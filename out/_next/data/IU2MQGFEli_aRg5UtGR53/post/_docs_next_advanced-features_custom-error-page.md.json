{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Override and extend the built-in Error page to handle custom errors.\n---\n\n# Custom Error Page\n\n## 404 Page\n\nA 404 page may be accessed very often. Server-rendering an error page for every visit increases the load of the Next.js server. This can result in increased costs and slow experiences.\n\nTo avoid the above pitfalls, Next.js provides a static 404 page by default without having to add any additional files.\n\n### Customizing The 404 Page\n\nTo create a custom 404 page you can create a `pages/404.js` file. This file is statically generated at build time.\n\n```jsx\n// pages/404.js\nexport default function Custom404() {\n  return <h1>404 - Page Not Found</h1>\n}\n```\n\n## 500 Page\n\nBy default Next.js provides a 500 error page that matches the default 404 page’s style. This page is not statically optimized as it allows server-side errors to be reported. This is why 404 and 500 (other errors) are separated.\n\n### Customizing The Error Page\n\n500 errors are handled both client-side and server-side by the `Error` component. If you wish to override it, define the file `pages/_error.js` and add the following code:\n\n```jsx\nfunction Error({ statusCode }) {\n  return (\n    <p>\n      {statusCode\n        ? `An error ${statusCode} occurred on server`\n        : 'An error occurred on client'}\n    </p>\n  )\n}\n\nError.getInitialProps = ({ res, err }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404\n  return { statusCode }\n}\n\nexport default Error\n```\n\n> `pages/_error.js` is only used in production. In development you’ll get an error with the call stack to know where the error originated from.\n\n### Reusing the built-in error page\n\nIf you want to render the built-in error page you can by importing the `Error` component:\n\n```jsx\nimport Error from 'next/error'\n\nexport async function getServerSideProps() {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const errorCode = res.ok ? false : res.statusCode\n  const json = await res.json()\n\n  return {\n    props: { errorCode, stars: json.stargazers_count },\n  }\n}\n\nexport default function Page({ errorCode, stars }) {\n  if (errorCode) {\n    return <Error statusCode={errorCode} />\n  }\n\n  return <div>Next stars: {stars}</div>\n}\n```\n\nThe `Error` component also takes `title` as a property if you want to pass in a text message along with a `statusCode`.\n\nIf you have a custom `Error` component be sure to import that one instead. `next/error` exports the default component used by Next.js.\n"}},"__N_SSG":true}