{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Docker\nsubSection: deployment\n[meta]-->\n\n# Docker\n\nKeystone files need to be built with `keystone build` before running in production mode.\n\nKeystone can be easily built as a Docker container image, suitable for deploying on Kubernetes or other environments.\n\nRecommended guides:\n\n- [Get Started with Docker](https://docs.docker.com/get-started/)\n- [Intro Guide to Dockerfile Best Practices](https://blog.docker.com/2019/07/intro-guide-to-dockerfile-best-practices/)\n- [Dockerfile Reference](https://docs.docker.com/engine/reference/builder/)\n\nYou'll need to add a [`.dockerignore`](https://docs.docker.com/engine/reference/builder/#dockerignore-file) file to the root of your Keystone project (or wherever the image is built from) to avoid including unwanted files in the image. Here's an example of what it might look like:\n\n```shell title=.dockerignore showLanguage=false\n.git/\ndocs/\ndist/\n.env.secret\n```\n\nIf you're already familiar with Heroku or Pivotal Cloudfoundry, you might find [Cloud Native Buildpacks](https://buildpacks.io/) a simple way to build Docker images.\n\nThe following is an example of production-ready Dockerfile for a Keystone app built with `yarn build` and started with `yarn start`:\n\n```dockerfile title=Dockerfile showLanguage=false\n# https://docs.docker.com/samples/library/node/\nARG NODE_VERSION=12.10.0\n# https://github.com/Yelp/dumb-init/releases\nARG DUMB_INIT_VERSION=1.2.2\n\n# Build container\nFROM node:${NODE_VERSION}-alpine AS build\nARG DUMB_INIT_VERSION\n\nWORKDIR /home/node\n\nRUN apk add --no-cache build-base python2 yarn && \\\n    wget -O dumb-init -q https://github.com/Yelp/dumb-init/releases/download/v${DUMB_INIT_VERSION}/dumb-init_${DUMB_INIT_VERSION}_amd64 && \\\n    chmod +x dumb-init\nADD . /home/node\nRUN yarn install && yarn build && yarn cache clean\n\n# Runtime container\nFROM node:${NODE_VERSION}-alpine\n\nWORKDIR /home/node\n\nCOPY --from=build /home/node /home/node\n\nEXPOSE 3000\nCMD [\"./dumb-init\", \"yarn\", \"start\"]\n```\n\nWhen using Docker for deployment, you'll also need a registry to serve your images. This can be [the official Docker Hub](https://hub.docker.com/), a registry in your cloud provider, a third-party hosted registry, or a [self-hosted private registry](https://github.com/docker/distribution).\n\nIf you have `.dockerignore` and `Dockerfile` files in the root of your Keystone project, and you're set up with a registry, you can build and push your image like this:\n\n```shell allowCopy=false showLanguage=false\n# Build on local machine\ndocker build -t my-registry.example.com/my-cool-keystone-app:v1.0 .\n# Push to registry server\ndocker push my-registry.example.com/my-cool-keystone-app:v1.0\n```\n\nYou can test running your image locally (no need to push) with a command like this (assuming your server runs on port 3000):\n\n```shell allowCopy=false showLanguage=false\ndocker run --rm -p 127.0.0.1:3000:3000 my-registry.example.com/my-cool-keystone-app:v1.0\n```\n"}},"__N_SSG":true}