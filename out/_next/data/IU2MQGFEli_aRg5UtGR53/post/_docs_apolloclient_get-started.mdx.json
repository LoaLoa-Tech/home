{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Get started\ndescription: Set up Apollo Client in your React app\n---\n\nHello! This short tutorial gets you up and running with Apollo Client.\n\n> For a more complete introduction to the entire Apollo platform, we recommend first completing the [full-stack tutorial](https://www.apollographql.com/docs/tutorial/introduction/).\n\n## Installation\n\nFirst, let's install the packages we need:\n\n```bash\nnpm install @apollo/client graphql\n```\n\n- `@apollo/client`: This single package contains virtually everything you need to set up Apollo Client. It includes the in-memory cache, local state management, error handling, and a React-based view layer.\n- `graphql`: This package provides logic for parsing GraphQL queries.\n\n> If you'd like to walk through this tutorial yourself, we recommend either running a new React project locally with [Create React App](https://create-react-app.dev/) or creating a new React sandbox on [CodeSandbox](https://codesandbox.io/). For reference, we will be using [this CodeSandbox](https://codesandbox.io/s/practical-snyder-48p1r2roz4) as our GraphQL server for our sample app, which pulls exchange rate data from the Coinbase API. If you'd like to skip ahead and see the app we're about to build, you can [view it on CodeSandbox](https://codesandbox.io/s/get-started-coinbase-client-73r10).\n\n## Create a client\n\nNow that we have all the dependencies we need, let's initialize an `ApolloClient` instance. You'll need to provide it the URL of a running GraphQL server, such as [this CodeSandbox instance](https://codesandbox.io/s/practical-snyder-48p1r2roz4).\n\nIn `index.js`, let's import `ApolloClient` from `@apollo/client` and provide our GraphQL server's URL as the `uri` property of the constructor's configuration object:\n\n```js:title=index.js\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\n```\n\nThat's it! Our `client` is ready to start fetching data. Now, before we start using Apollo Client with React, let's first try sending a query with plain JavaScript.\n\nIn the same `index.js` file, call `client.query()` with the query string shown below. You'll need to import the `gql` function to parse the query string into a query document.\n\n```js:title=index.js\nimport { gql } from '@apollo/client';\n\n// const client = ...\n\nclient\n  .query({\n    query: gql`\n      query GetRates {\n        rates(currency: \"USD\") {\n          currency\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n```\n\nRun this code, open your console, and inspect the result object. You should see a `data` property with `rates` attached, along with some other properties like `loading` and `networkStatus`.\n\nAlthough executing GraphQL operations like this can be useful, Apollo Client really shines when it's integrated with a view layer like React. You can bind queries to your UI and update it automatically as new data is fetched.\n\nLet's look at how that works!\n\n## Connect your client to React\n\nYou connect Apollo Client to React with the `ApolloProvider` component. The `ApolloProvider` is similar to React's [`Context.Provider`](https://reactjs.org/docs/context.html#contextprovider). It wraps your React app and places the client on the context, which enables you to access it from anywhere in your component tree.\n\nIn `index.js`, let's wrap our React app with an `ApolloProvider`. We suggest putting the `ApolloProvider` somewhere high in your app, above any component that might need to access GraphQL data. For example, it could be outside of your root route component if you're using React Router.\n\n```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport { ApolloProvider } from '@apollo/client';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <h2>My first Apollo app ðŸš€</h2>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nrender(<App />, document.getElementById('root'));\n```\n\n## Request data\n\nOnce your `ApolloProvider` is hooked up, you're ready to start requesting data with `useQuery`. `useQuery` is a React hook that use the [Hooks API](https://reactjs.org/docs/hooks-intro.html) to share GraphQL data with your UI.\n\nFirst, pass your GraphQL query (wrapped in the `gql` function) to the `useQuery` hook. When your component renders and the `useQuery` hook runs, a result object is returned that contains `loading`, `error`, and `data` properties:\n\n* Apollo Client tracks error and loading state for you, which are reflected in the `loading` and `error` properties.\n* When the result of your query comes back, it's attached to the `data` property.\n\nLet's create an `ExchangeRates` component in `index.js` to see the `useQuery` hook in action:\n\n```jsx\nimport { useQuery, gql } from '@apollo/client';\n\nconst EXCHANGE_RATES = gql`\n  query GetExchangeRates {\n    rates(currency: \"USD\") {\n      currency\n      rate\n    }\n  }\n`;\n\nfunction ExchangeRates() {\n  const { loading, error, data } = useQuery(EXCHANGE_RATES);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.rates.map(({ currency, rate }) => (\n    <div key={currency}>\n      <p>\n        {currency}: {rate}\n      </p>\n    </div>\n  ));\n}\n```\n\nCongrats, you just made your first `useQuery`-based component! ðŸŽ‰ If you render your `ExchangeRates` component within your `App` component from the previous example, you'll first see a loading indicator on the page, followed by data when it's ready. Apollo Client automatically caches this data when it comes back from the server, so you won't see a loading indicator if you run the same query again.\n\nTo play around with the app we just built, [check it out on CodeSandbox](https://codesandbox.io/s/get-started-coinbase-client-73r10). But don't stop there! Try building more components that use `useQuery`, and experiment with the concepts you just learned.\n\n## Next steps\n\nNow that you've learned how to fetch data with Apollo Client, you're ready to dive deeper into creating more complex queries and mutations. After this section, we recommend moving on to:\n\n- [Queries](data/queries/): Learn how to fetch queries with arguments and dive deeper into configuration options. For a full list of options, check out the API reference for `useQuery`.\n- [Mutations](data/mutations/): Learn how to update data with mutations and when you'll need to update the Apollo cache. For a full list of options, check out the API reference for `useMutation`.\n- [Apollo Client API](api/core/ApolloClient/): Sometimes, you'll need to access the client directly like we did in our plain JavaScript example above. Visit the API reference for a full list of options.\n"}},"__N_SSG":true}