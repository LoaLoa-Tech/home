{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Client-side schema\ndescription: Configure a client-side schema with Apollo Client\n---\n\nYou can optionally set a client-side schema to be used with Apollo Client, through either the `ApolloClient` constructor `typeDefs` parameter, or the local state API `setTypeDefs` method. Your schema should be written in [Schema Definition Language](https://www.apollographql.com/docs/graphql-tools/generate-schema#schema-language). This schema is not used for validation like it is on the server because the `graphql-js` modules for schema validation would dramatically increase your bundle size. Instead, your client-side schema is used for introspection in [Apollo Client Devtools](https://github.com/apollographql/apollo-client-devtools), where you can explore your schema in GraphiQL.\n\nThe following demonstrates how to configure a client-side schema through the `ApolloClient` constructor:\n\n```js\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\nconst typeDefs = gql`\n  extend type Query {\n    isLoggedIn: Boolean!\n    cartItems: [Launch]!\n  }\n\n  extend type Launch {\n    isInCart: Boolean!\n  }\n\n  extend type Mutation {\n    addOrRemoveFromCart(id: ID!): [Launch]\n  }\n`;\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'http://localhost:4000/graphql',\n  typeDefs,\n});\n```\n\nIf you open up Apollo Client Devtools and click on the `GraphiQL` tab, you'll be able to explore your client schema in the \"Docs\" section. This example doesn't include a remote schema, but if it did, you would be able to see your local queries and mutations alongside your remote ones.\n\n![GraphiQL Console](../assets/client-schema.png)\n"}},"__N_SSG":true}