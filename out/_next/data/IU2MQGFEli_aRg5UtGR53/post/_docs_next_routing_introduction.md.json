{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Next.js has a built-in, opinionated, and file-system based Router. You can learn how it works here.\n---\n\n# Routing\n\nNext.js has a file-system based router built on the [concept of pages](/docs/basic-features/pages.md).\n\nWhen a file is added to the `pages` directory it's automatically available as a route.\n\nThe files inside the `pages` directory can be used to define most common patterns.\n\n#### Index routes\n\nThe router will automatically route files named `index` to the root of the directory.\n\n- `pages/index.js` → `/`\n- `pages/blog/index.js` → `/blog`\n\n#### Nested routes\n\nThe router supports nested files. If you create a nested folder structure files will be automatically routed in the same way still.\n\n- `pages/blog/first-post.js` → `/blog/first-post`\n- `pages/dashboard/settings/username.js` → `/dashboard/settings/username`\n\n#### Dynamic route segments\n\nTo match a dynamic segment you can use the bracket syntax. This allows you to match named parameters.\n\n- `pages/blog/[slug].js` → `/blog/:slug` (`/blog/hello-world`)\n- `pages/[username]/settings.js` → `/:username/settings` (`/foo/settings`)\n- `pages/post/[...all].js` → `/post/*` (`/post/2020/id/title`)\n\n> Check out the [Dynamic Routes documentation](/docs/routing/dynamic-routes.md) to learn more about how they work.\n\n## Linking between pages\n\nThe Next.js router allows you to do client-side route transitions between pages, similar to a single-page application.\n\nA React component called `Link` is provided to do this client-side route transition.\n\n```jsx\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/\">\n          <a>Home</a>\n        </Link>\n      </li>\n      <li>\n        <Link href=\"/about\">\n          <a>About Us</a>\n        </Link>\n      </li>\n      <li>\n        <Link href=\"/blog/hello-world\">\n          <a>Blog Post</a>\n        </Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\nIn the example above we have multiple links, each one maps a path (`href`) to a known page:\n\n- `/` → `pages/index.js`\n- `/about` → `pages/about.js`\n- `/blog/hello-world` → `pages/blog/[slug].js`\n\n### Linking to dynamic paths\n\nYou can also use interpolation to create the path, which comes in handy for [dynamic route segments](#dynamic-route-segments). For example, to show a list of posts which have been passed to the component as a prop:\n\n```jsx\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${encodeURIComponent(post.slug)}`}>\n            <a>{post.title}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Posts\n```\n\n> [`encodeURIComponent`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) is used in the example to keep the path utf-8 compatible.\n\nAlternatively, using a URL Object:\n\n```jsx\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link\n            href={{\n              pathname: '/blog/[slug]',\n              query: { slug: post.slug },\n            }}\n          >\n            <a>{post.title}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Posts\n```\n\nNow, instead of using interpolation to create the path, we use a URL object in `href` where:\n\n- `pathname` is the name of the page in the `pages` directory. `/blog/[slug]` in this case.\n- `query` is an object with the dynamic segment. `slug` in this case.\n\n## Injecting the router\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/dynamic-routing\">Dynamic Routing</a></li>\n  </ul>\n</details>\n\nTo access the [`router` object](/docs/api-reference/next/router.md#router-object) in a React component you can use [`useRouter`](/docs/api-reference/next/router.md#useRouter) or [`withRouter`](/docs/api-reference/next/router.md#withRouter).\n\nIn general we recommend using [`useRouter`](/docs/api-reference/next/router.md#useRouter).\n\n## Learn more\n\nThe router is divided in multiple parts:\n\n<div class=\"card\">\n  <a href=\"/docs/api-reference/next/link.md\">\n    <b>next/link:</b>\n    <small>Handle client-side navigations.</small>\n  </a>\n</div>\n\n<div class=\"card\">\n  <a href=\"/docs/api-reference/next/router.md\">\n    <b>next/router:</b>\n    <small>Leverage the router API in your pages.</small>\n  </a>\n</div>\n"}},"__N_SSG":true}