{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Using Apollo with TypeScript\nsidebar_title: Using TypeScript\n---\n\nAs your application grows, you may find it helpful to include a type system to assist in development. Apollo supports type definitions for TypeScript out of the box. Apollo Client ships with definitions in its associated npm package, so installation should be done for you after the libraries are included in your project.\n\nThese docs assume you already have TypeScript configured in your project, if not start [here](https://github.com/Microsoft/TypeScript-React-Conversion-Guide#typescript-react-conversion-guide).\n\nThe most common need when using type systems with GraphQL is to type the results of an operation. Given that a GraphQL server's schema is strongly typed, we can even generate TypeScript definitions automatically using a tool like [apollo-codegen](https://github.com/apollographql/apollo-codegen). In these docs however, we will be writing result types manually.\n\n## Typing hooks\n\nApollo Client's `useQuery`, `useMutation` and `useSubscription` React hooks are fully typed, and Generics can be used to type both incoming operation variables and GraphQL result data. React Hook options and result types are listed in the [Hooks API](../api/react/hooks/) section of the docs. You can find a typed example of each Hook below.\n\n### `useQuery`\n\n```jsx\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\ninterface RocketInventory {\n  id: number;\n  model: string;\n  year: number;\n  stock: number;\n}\n\ninterface RocketInventoryData {\n  rocketInventory: RocketInventory[];\n}\n\ninterface RocketInventoryVars {\n  year: number;\n}\n\nconst GET_ROCKET_INVENTORY = gql`\n  query GetRocketInventory($year: Int!) {\n    rocketInventory(year: $year) {\n      id\n      model\n      year\n      stock\n    }\n  }\n`;\n\nexport function RocketInventoryList() {\n  const { loading, data } = useQuery<RocketInventoryData, RocketInventoryVars>(\n    GET_ROCKET_INVENTORY,\n    { variables: { year: 2019 } }\n  );\n  return (\n    <div>\n      <h3>Available Inventory</h3>\n      {loading ? (\n        <p>Loading ...</p>\n      ) : (\n        <table>\n          <thead>\n            <tr>\n              <th>Model</th>\n              <th>Stock</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data && data.rocketInventory.map(inventory => (\n              <tr>\n                <td>{inventory.model}</td>\n                <td>{inventory.stock}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n```\n\n### `useMutation`\n\n```jsx\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\nconst SAVE_ROCKET = gql`\n  mutation saveRocket($rocket: RocketInput!) {\n    saveRocket(rocket: $rocket) {\n      model\n    }\n  }\n`;\n\ninterface RocketInventory {\n  id: number;\n  model: string;\n  year: number;\n  stock: number;\n}\n\ninterface NewRocketDetails {\n  model: string;\n  year: number;\n  stock: number;\n}\n\nexport function NewRocketForm() {\n  const [model, setModel] = useState('');\n  const [year, setYear] = useState(0);\n  const [stock, setStock] = useState(0);\n\n  const [saveRocket, { error, data }] = useMutation<\n    { saveRocket: RocketInventory },\n    { rocket: NewRocketDetails }\n  >(SAVE_ROCKET, {\n    variables: { rocket: { model, year: +year, stock: +stock } }\n  });\n\n  return (\n    <div>\n      <h3>Add a Rocket</h3>\n      {error ? <p>Oh no! {error.message}</p> : null}\n      {data && data.saveRocket ? <p>Saved!</p> : null}\n      <form>\n        <p>\n          <label>Model</label>\n          <input\n            name=\"model\"\n            onChange={e => setModel(e.target.value)}\n          />\n        </p>\n        <p>\n          <label>Year</label>\n          <input\n            type=\"number\"\n            name=\"model\"\n            onChange={e => setYear(+e.target.value)}\n          />\n        </p>\n        <p>\n          <label>Stock</label>\n          <input\n            type=\"number\"\n            name=\"stock\"\n            onChange={e => setStock(e.target.value)}\n          />\n        </p>\n        <button onClick={() => model && year && stock && saveRocket()}>\n          Add\n        </button>\n      </form>\n    </div>\n  );\n}\n```\n\n### `useSubscription`\n\n```jsx\nimport React from 'react';\nimport { useSubscription, gql } from '@apollo/client';\n\ninterface Message {\n  content: string;\n}\n\ninterface News {\n  latestNews: Message;\n}\n\nconst LATEST_NEWS = gql`\n  subscription getLatestNews {\n    latestNews {\n      content\n    }\n  }\n`;\n\nexport function LatestNews() {\n  const { loading, data } = useSubscription<News>(LATEST_NEWS);\n  return (\n    <div>\n      <h5>Latest News</h5>\n      <p>\n        {loading ? 'Loading...' : data!.latestNews.content}\n      </p>\n    </div>\n  );\n}\n```\n\n## Typing Render Prop Components\n\nUsing Apollo together with TypeScript couldn't be easier than using it with component API released in React Apollo 2.1:\n\n```tsx\nconst ALL_PEOPLE_QUERY = gql`\n  query All_People_Query {\n    allPeople {\n      people {\n        id\n        name\n      }\n    }\n  }\n`;\n\ninterface Data {\n  allPeople: {\n    people: Array<{ id: string; name: string }>;\n  };\n};\n\ninterface Variables {\n  first: number;\n};\n\nconst AllPeopleComponent = <Query<Data, Variables> query={ALL_PEOPLE_QUERY}>\n  {({ loading, error, data }) => { ... }}\n</Query>\n```\n\nNow the `<Query />` component render prop function arguments are typed. Since we are not mapping any props coming into our component, nor are we rewriting the props passed down, we only need to provide the shape of our data and the variables for full typing to work! Everything else is handled by React Apollo's robust type definitions.\n\nThis approach is the exact same for the `<Query />`, `<Mutation />`, and `<Subcription />` components! Learn it once, and get the best types ever with Apollo.\n\n### Extending components\n\nIn previous versions of React Apollo, render prop components (`Query`, `Mutation` and `Subscription`) could be extended to add additional type information:\n\n```js\nclass SomeQuery extends Query<SomeData, SomeVariables> {}\n```\n\nSince all class based render prop components have been converted to functional components, extending components in this manner is no longer possible. While we recommend switching over to use the new `useQuery`, `useMutation` and `useSubscription` hooks as soon as possible, if you're looking for a stop gap you can consider replacing your class with a wrapped and typed component:\n\n```jsx\nexport const SomeQuery = () => (\n  <Query<SomeData, SomeVariables> query={SOME_QUERY} /* ... */>\n    {({ loading, error, data }) => { ... }}\n  </Query>\n);\n```\n\n## Typing Higher Order Components\n\nSince the result of a query will be sent to the wrapped component as props, we want to be able to tell our type system the shape of those props. Here is an example setting types for an operation using the `graphql` higher order component (**note**: the follow sections also work for the query, mutation, and subscription hocs):\n\n```tsx\nimport React from \"react\";\nimport { gql } from \"@apollo/client\";\nimport { ChildDataProps, graphql } from \"@apollo/react-hoc\";\n\nconst HERO_QUERY = gql`\n  query GetCharacter($episode: Episode!) {\n    hero(episode: $episode) {\n      name\n      id\n      friends {\n        name\n        id\n        appearsIn\n      }\n    }\n  }\n`;\n\ntype Hero = {\n  name: string;\n  id: string;\n  appearsIn: string[];\n  friends: Hero[];\n};\n\ntype Response = {\n  hero: Hero;\n};\n\ntype Variables = {\n  episode: string;\n};\n\ntype ChildProps = ChildDataProps<{}, Response, Variables>;\n\n// Note that the first parameter here is an empty Object, which means we're\n// not checking incoming props for type safety in this example. The next\n// example (in the \"Options\" section) shows how the type safety of incoming\n// props can be ensured.\nconst withCharacter = graphql<{}, Response, Variables, ChildProps>(HERO_QUERY, {\n  options: () => ({\n    variables: { episode: \"JEDI\" }\n  })\n});\n\nexport default withCharacter(({ data: { loading, hero, error } }) => {\n  if (loading) return <div>Loading</div>;\n  if (error) return <h1>ERROR</h1>;\n  return ...// actual component with data;\n});\n```\n\n### Options\n\nTypically, variables to the query will be computed from the props of the wrapper component. Wherever the component is used in your application, the caller would pass arguments that we want our type system to validate what the shape of these props could look like. Here is an example setting the type of props:\n\n```tsx\nimport React from \"react\";\nimport { gql } from \"@apollo/client\";\nimport { ChildDataProps, graphql } from \"@apollo/react-hoc\";\n\nconst HERO_QUERY = gql`\n  query GetCharacter($episode: Episode!) {\n    hero(episode: $episode) {\n      name\n      id\n      friends {\n        name\n        id\n        appearsIn\n      }\n    }\n  }\n`;\n\ntype Hero = {\n  name: string;\n  id: string;\n  appearsIn: string[];\n  friends: Hero[];\n};\n\ntype Response = {\n  hero: Hero;\n};\n\ntype InputProps = {\n  episode: string;\n};\n\ntype Variables = {\n  episode: string;\n};\n\ntype ChildProps = ChildDataProps<InputProps, Response, Variables>;\n\nconst withCharacter = graphql<InputProps, Response, Variables, ChildProps>(HERO_QUERY, {\n  options: ({ episode }) => ({\n    variables: { episode }\n  }),\n});\n\nexport default withCharacter(({ data: { loading, hero, error } }) => {\n  if (loading) return <div>Loading</div>;\n  if (error) return <h1>ERROR</h1>;\n  return ...// actual component with data;\n});\n```\n\nThis is especially helpful when accessing deeply nested objects that are passed down to the component through props. For example, when adding prop types, a project using TypeScript will begin to surface errors where props being passed are invalid:\n\n```tsx\nimport React from \"react\";\nimport {\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\n\nimport Character from \"./Character\";\n\nexport const link = createHttpLink({\n  uri: \"https://mpjk0plp9.lp.gql.zone/graphql\"\n});\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n});\n\nexport default () =>\n  <ApolloProvider client={client}>\n    // $ExpectError property `episode`. Property not found in. See: src/Character.js:43\n    <Character />\n  </ApolloProvider>;\n```\n\n### Props\n\nOne of the most powerful feature of the React integration is the `props` function which allows you to reshape the result data from an operation into a new shape of props for the wrapped component. GraphQL is awesome at allowing you to only request the data you want from the server. The client still often needs to reshape or do client side calculations based on these results. The return value can even differ depending on the state of the operation (i.e loading, error, recieved data), so informing our type system of choice of these possible values is really important to make sure our components won't have runtime errors.\n\nThe `graphql` wrapper from `@apollo/react-hoc` supports manually declaring the shape of your result props.\n\n```tsx\nimport React from \"react\";\nimport { gql } from \"@apollo/client\";\nimport { graphql, ChildDataProps } from \"@apollo/react-hoc\";\n\nconst HERO_QUERY = gql`\n  query GetCharacter($episode: Episode!) {\n    hero(episode: $episode) {\n      name\n      id\n      friends {\n        name\n        id\n        appearsIn\n      }\n    }\n  }\n`;\n\ntype Hero = {\n  name: string;\n  id: string;\n  appearsIn: string[];\n  friends: Hero[];\n};\n\ntype Response = {\n  hero: Hero;\n};\n\ntype InputProps = {\n  episode: string\n};\n\ntype Variables = {\n  episode: string\n};\n\ntype ChildProps = ChildDataProps<InputProps, Response, Variables>;\n\nconst withCharacter = graphql<InputProps, Response, Variables, ChildProps>(HERO_QUERY, {\n  options: ({ episode }) => ({\n    variables: { episode }\n  }),\n  props: ({ data }) => ({ ...data })\n});\n\nexport default withCharacter(({ loading, hero, error }) => {\n  if (loading) return <div>Loading</div>;\n  if (error) return <h1>ERROR</h1>;\n  return ...// actual component with data;\n});\n```\n\nSince we have typed the response shape, the props shape, and the shape of what will be passed to the client, we can prevent errors in multiple places. Our options and props function within the `graphql` wrapper are now type safe, our rendered component is protected, and our tree of components have their required props enforced.\n\n```ts\nexport const withCharacter = graphql<InputProps, Response, Variables, Props>(HERO_QUERY, {\n  options: ({ episode }) => ({\n    variables: { episode }\n  }),\n  props: ({ data, ownProps }) => ({\n    ...data,\n    // $ExpectError [string] This type cannot be compared to number\n    episode: ownProps.episode > 1,\n    // $ExpectError property `isHero`. Property not found on object type\n    isHero: data && data.hero && data.hero.isHero\n  })\n});\n```\n\nWith this addition, the entirety of the integration between Apollo and React can be statically typed. When combined with the strong tooling each system provides, it can make for a much improved application and developer experience.\n\n### Classes vs Functions\n\nAll of the above examples show wrapping a component which is just a function using the result of a `graphql` wrapper. Sometimes, components that depend on GraphQL data require state and are formed using the `class MyComponent extends React.Component` practice. In these use cases, TypeScript requires adding prop shape to the class instance. In order to support this, `@apollo/react-hoc` exports types to support creating result types easily.\n\n```tsx\nimport { ChildProps } from \"@apollo/react-hoc\";\n\nconst withCharacter = graphql<InputProps, Response>(HERO_QUERY, {\n  options: ({ episode }) => ({\n    variables: { episode }\n  })\n});\n\nclass Character extends React.Component<ChildProps<InputProps, Response>, {}> {\n  render(){\n    const { loading, hero, error } = this.props.data;\n    if (loading) return <div>Loading</div>;\n    if (error) return <h1>ERROR</h1>;\n    return ...// actual component with data;\n  }\n}\n\nexport default withCharacter(Character);\n```\n\n### Using the `name` property\n\nIf you are using the `name` property in the configuration of the `graphql` wrapper, you will need to manually attach the type of the response to the `props` function. An example using TypeScript would be like this:\n\n```ts\nimport { NamedProps, QueryProps } from '@apollo/react-hoc';\n\nexport const withCharacter = graphql<InputProps, Response, {}, Prop>(HERO_QUERY, {\n  name: 'character',\n  props: ({ character, ownProps }: NamedProps<{ character: QueryProps & Response }, Props) => ({\n    ...character,\n    // $ExpectError [string] This type cannot be compared to number\n    episode: ownProps.episode > 1,\n    // $ExpectError property `isHero`. Property not found on object type\n    isHero: character && character.hero && character.hero.isHero\n  })\n});\n```\n"}},"__N_SSG":true}