{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Learn how to upgrade Next.js.\n---\n\n# Upgrade Guide\n\n## Upgrading from version 9 to 10\n\nThere were no breaking changes between version 9 and 10.\n\nTo upgrade run the following command:\n\n```\nnpm install next@latest\n```\n\n## Upgrading from version 8 to 9\n\n### Preamble\n\n#### Production Deployment on Vercel\n\nIf you previously configured `routes` in your `vercel.json` file for dynamic routes, these rules can be removed when leveraging Next.js 9's new [Dynamic Routing feature](/docs/routing/dynamic-routes.md).\n\nNext.js 9's dynamic routes are **automatically configured on [Vercel](https://vercel.com/)** and do not require any `vercel.json` customization.\n\nYou can read more about [Dynamic Routing here](/docs/routing/dynamic-routes.md).\n\n#### Check your Custom <App> (`pages/_app.js`)\n\nIf you previously copied the [Custom `<App>`](/docs/advanced-features/custom-app.md) example, you may be able to remove your `getInitialProps`.\n\nRemoving `getInitialProps` from `pages/_app.js` (when possible) is important to leverage new Next.js features!\n\nThe following `getInitialProps` does nothing and may be removed:\n\n```js\nclass MyApp extends App {\n  // Remove me, I do nothing!\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {}\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    return { pageProps }\n  }\n\n  render() {\n    // ... etc\n  }\n}\n```\n\n### Breaking Changes\n\n#### `@zeit/next-typescript` is no longer necessary\n\nNext.js will now ignore usage `@zeit/next-typescript` and warn you to remove it. Please remove this plugin from your `next.config.js`.\n\nRemove references to `@zeit/next-typescript/babel` from your custom `.babelrc` (if present).\n\nUsage of [`fork-ts-checker-webpack-plugin`](https://github.com/Realytics/fork-ts-checker-webpack-plugin/issues) should also be removed from your `next.config.js`.\n\nTypeScript Definitions are published with the `next` package, so you need to uninstall `@types/next` as they would conflict.\n\nThe following types are different:\n\n> This list was created by the community to help you upgrade, if you find other differences please send a pull-request to this list to help other users.\n\nFrom:\n\n```tsx\nimport { NextContext } from 'next'\nimport { NextAppContext, DefaultAppIProps } from 'next/app'\nimport { NextDocumentContext, DefaultDocumentIProps } from 'next/document'\n```\n\nto\n\n```tsx\nimport { NextPageContext } from 'next'\nimport { AppContext, AppInitialProps } from 'next/app'\nimport { DocumentContext, DocumentInitialProps } from 'next/document'\n```\n\n#### The `config` key is now a special export on a page\n\nYou may no longer export a custom variable named `config` from a page (i.e. `export { config }` / `export const config ...`).\nThis exported variable is now used to specify page-level Next.js configuration like Opt-in AMP and API Route features.\n\nYou must rename a non-Next.js-purposed `config` export to something different.\n\n#### `next/dynamic` no longer renders \"loading...\" by default while loading\n\nDynamic components will not render anything by default while loading. You can still customize this behavior by setting the `loading` property:\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponentWithCustomLoading = dynamic(\n  () => import('../components/hello2'),\n  {\n    loading: () => <p>Loading</p>,\n  }\n)\n```\n\n#### `withAmp` has been removed in favor of an exported configuration object\n\nNext.js now has the concept of page-level configuration, so the `withAmp` higher-order component has been removed for consistency.\n\nThis change can be **automatically migrated by running the following commands in the root of your Next.js project:**\n\n```bash\ncurl -L https://github.com/vercel/next-codemod/archive/master.tar.gz | tar -xz --strip=2 next-codemod-master/transforms/withamp-to-config.js npx jscodeshift -t ./withamp-to-config.js pages/**/*.js\n```\n\nTo perform this migration by hand, or view what the codemod will produce, see below:\n\n**Before**\n\n```jsx\nimport { withAmp } from 'next/amp'\n\nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport default withAmp(Home)\n// or\nexport default withAmp(Home, { hybrid: true })\n```\n\n**After**\n\n```jsx\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport const config = {\n  amp: true,\n  // or\n  amp: 'hybrid',\n}\n```\n\n#### `next export` no longer exports pages as `index.html`\n\nPreviously, exporting `pages/about.js` would result in `out/about/index.html`. This behavior has been changed to result in `out/about.html`.\n\nYou can revert to the previous behavior by creating a `next.config.js` with the following content:\n\n```js\n// next.config.js\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\n#### `./pages/api/` is treated differently\n\nPages in `./pages/api/` are now considered [API Routes](https://nextjs.org/blog/next-9#api-routes).\nPages in this directory will no longer contain a client-side bundle.\n\n## Deprecated Features\n\n#### `next/dynamic` has deprecated loading multiple modules at once\n\nThe ability to load multiple modules at once has been deprecated in `next/dynamic` to be closer to React's implementation (`React.lazy` and `Suspense`).\n\nUpdating code that relies on this behavior is relatively straightforward! We've provided an example of a before/after to help you migrate your application:\n\n**Before**\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst HelloBundle = dynamic({\n  modules: () => {\n    const components = {\n      Hello1: () => import('../components/hello1').then((m) => m.default),\n      Hello2: () => import('../components/hello2').then((m) => m.default),\n    }\n\n    return components\n  },\n  render: (props, { Hello1, Hello2 }) => (\n    <div>\n      <h1>{props.title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  ),\n})\n\nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n\nexport default DynamicBundle\n```\n\n**After**\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst Hello1 = dynamic(() => import('../components/hello1'))\nconst Hello2 = dynamic(() => import('../components/hello2'))\n\nfunction HelloBundle({ title }) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <Hello1 />\n      <Hello2 />\n    </div>\n  )\n}\n\nfunction DynamicBundle() {\n  return <HelloBundle title=\"Dynamic Bundle\" />\n}\n\nexport default DynamicBundle\n```\n"}},"__N_SSG":true}