{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: You can add the dynamic routes used for pages to API Routes too. Learn how it works here.\n---\n\n# Dynamic API Routes\n\n<details open>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/api-routes\">Basic API Routes</a></li>\n  </ul>\n</details>\n\nAPI routes support [dynamic routes](/docs/routing/dynamic-routes.md), and follow the same file naming rules used for `pages`.\n\nFor example, the API route `pages/api/post/[pid].js` has the following code:\n\n```js\nexport default function handler(req, res) {\n  const {\n    query: { pid },\n  } = req\n\n  res.end(`Post: ${pid}`)\n}\n```\n\nNow, a request to `/api/post/abc` will respond with the text: `Post: abc`.\n\n### Index routes and Dynamic API routes\n\nA very common RESTful pattern is to set up routes like this:\n\n- `GET api/posts` - gets a list of posts, probably paginated\n- `GET api/posts/12345` - gets post id 12345\n\nWe can model this in two ways:\n\n- Option 1:\n  - `/api/posts.js`\n  - `/api/posts/[postId].js`\n- Option 2:\n  - `/api/posts/index.js`\n  - `/api/posts/[postId].js`\n\nBoth are equivalent. A third option of only using `/api/posts/[postId].js` is not valid because Dynamic Routes (including Catch-all routes - see below) do not have an `undefined` state and `GET api/posts` will not match `/api/posts/[postId].js` under any circumstances.\n\n### Catch all API routes\n\nAPI Routes can be extended to catch all paths by adding three dots (`...`) inside the brackets. For example:\n\n- `pages/api/post/[...slug].js` matches `/api/post/a`, but also `/api/post/a/b`, `/api/post/a/b/c` and so on.\n\n> **Note**: You can use names other than `slug`, such as: `[...param]`\n\nMatched parameters will be sent as a query parameter (`slug` in the example) to the page, and it will always be an array, so, the path `/api/post/a` will have the following `query` object:\n\n```json\n{ \"slug\": [\"a\"] }\n```\n\nAnd in the case of `/api/post/a/b`, and any other matching path, new parameters will be added to the array, like so:\n\n```json\n{ \"slug\": [\"a\", \"b\"] }\n```\n\nAn API route for `pages/api/post/[...slug].js` could look like this:\n\n```js\nexport default function handler(req, res) {\n  const {\n    query: { slug },\n  } = req\n\n  res.end(`Post: ${slug.join(', ')}`)\n}\n```\n\nNow, a request to `/api/post/a/b/c` will respond with the text: `Post: a, b, c`.\n\n### Optional catch all API routes\n\nCatch all routes can be made optional by including the parameter in double brackets (`[[...slug]]`).\n\nFor example, `pages/api/post/[[...slug]].js` will match `/api/post`, `/api/post/a`, `/api/post/a/b`, and so on.\n\nThe main difference between catch all and optional catch all routes is that with optional, the route without the parameter is also matched (`/api/post` in the example above).\n\nThe `query` objects are as follows:\n\n```json\n{ } // GET `/api/post` (empty object)\n{ \"slug\": [\"a\"] } // `GET /api/post/a` (single-element array)\n{ \"slug\": [\"a\", \"b\"] } // `GET /api/post/a/b` (multi-element array)\n```\n\n## Caveats\n\n- Predefined API routes take precedence over dynamic API routes, and dynamic API routes over catch all API routes. Take a look at the following examples:\n  - `pages/api/post/create.js` - Will match `/api/post/create`\n  - `pages/api/post/[pid].js` - Will match `/api/post/1`, `/api/post/abc`, etc. But not `/api/post/create`\n  - `pages/api/post/[...slug].js` - Will match `/api/post/1/2`, `/api/post/a/b/c`, etc. But not `/api/post/create`, `/api/post/abc`\n\n## Related\n\nFor more information on what to do next, we recommend the following sections:\n\n<div class=\"card\">\n  <a href=\"/docs/routing/dynamic-routes.md\">\n    <b>Dynamic Routes:</b>\n    <small>Learn more about the built-in dynamic routes.</small>\n  </a>\n</div>\n"}},"__N_SSG":true}