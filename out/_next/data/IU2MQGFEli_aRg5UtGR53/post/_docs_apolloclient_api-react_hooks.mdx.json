{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Hooks\ndescription: Apollo Client react hooks API reference\n---\n\nimport QueryOptions from '../../../shared/query-options.mdx';\nimport QueryResult from '../../../shared/query-result.mdx';\nimport MutationOptions from '../../../shared/mutation-options.mdx';\nimport MutationResult from '../../../shared/mutation-result.mdx';\nimport SubscriptionOptions from '../../../shared/subscription-options.mdx';\nimport SubscriptionResult from '../../../shared/subscription-result.mdx';\n\n## Installation\n\nApollo Client >= 3 includes React hooks functionality out of the box. You don't need to install any additional packages.\n\n## The `ApolloProvider` component\n\nThe `ApolloProvider` component leverages [React's Context API](https://reactjs.org/docs/context.html) to make a configured Apollo Client instance available throughout a React component tree. This component can be imported directly from the `@apollo/client` package.\n\n```js\nimport { ApolloProvider } from '@apollo/client';\n```\n\n### Props\n\n| Option   | Type                       | Description                 |\n| -------- | -------------------------- | --------------------------- |\n| `client` | ApolloClient&lt;TCache&gt; | An `ApolloClient` instance. |\n\n### Example\n\n```jsx{7-9}\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"http://localhost:4000/graphql\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <MyRootComponent />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n```\n\n## The `ApolloConsumer` component\n\nOne way to access the configured Apollo Client instance directly is to create an `ApolloConsumer` component and provide a render prop function as its child. The render prop function will be called with your `ApolloClient` instance as its only argument. You can think of the `ApolloConsumer` component as similar to the `Consumer` component from the [React Context API](https://reactjs.org/docs/context.html).\n\n### Example\n\n```jsx\nimport React from 'react';\nimport { ApolloConsumer } from '@apollo/client';\n\nconst WithApolloClient = () => (\n  <ApolloConsumer>\n    {client => 'We have access to the client!' /* do stuff here */}\n  </ApolloConsumer>\n);\n```\n\n## `useQuery`\n\n### Example\n\n```jsx\nimport { gql, useQuery } from '@apollo/client';\n\nconst GET_GREETING = gql`\n  query GetGreeting($language: String!) {\n    greeting(language: $language) {\n      message\n    }\n  }\n`;\n\nfunction Hello() {\n  const { loading, error, data } = useQuery(GET_GREETING, {\n    variables: { language: 'english' },\n  });\n  if (loading) return <p>Loading ...</p>;\n  return <h1>Hello {data.greeting.message}!</h1>;\n}\n```\n\n> Refer to the [Queries](../../data/queries/) section for a more in-depth overview of `useQuery`.\n\n### Function Signature\n\n```ts\nfunction useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {}\n```\n\n### Params\n\n#### `query`\n\n| Param   | Type         | Description                                                   |\n| ------- | ------------ | ------------------------------------------------------------- |\n| `query` | DocumentNode | A GraphQL query document parsed into an AST by `gql`. |\n\n#### `options`\n\n<QueryOptions />\n\n### Result\n\n<QueryResult />\n\n## `useLazyQuery`\n\n### Example\n\n```jsx\nimport { gql, useLazyQuery } from \"@apollo/client\";\n\nconst GET_GREETING = gql`\n  query GetGreeting($language: String!) {\n    greeting(language: $language) {\n      message\n    }\n  }\n`;\n\nfunction Hello() {\n  const [loadGreeting, { called, loading, data }] = useLazyQuery(\n    GET_GREETING,\n    { variables: { language: \"english\" } }\n  );\n  if (called && loading) return <p>Loading ...</p>\n  if (!called) {\n    return <button onClick={() => loadGreeting()}>Load greeting</button>\n  }\n  return <h1>Hello {data.greeting.message}!</h1>;\n}\n```\n\n> Refer to the [Queries](../../data/queries/) section for a more in-depth overview of `useLazyQuery`.\n\n### Function Signature\n\n```ts\nfunction useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: LazyQueryHookOptions<TData, TVariables>,\n): [\n  (options?: QueryLazyOptions<TVariables>) => void,\n  QueryResult<TData, TVariables>\n] {}\n```\n\n### Params\n\n#### `query`\n\n| Param   | Type         | Description                                                   |\n| ------- | ------------ | ------------------------------------------------------------- |\n| `query` | DocumentNode | A GraphQL query document parsed into an AST by `gql`. |\n\n#### `options`\n\n<QueryOptions />\n\n### Result\n\n**Execute function**\n\n| Param            | Type                                                  | Description                                                                                                                     |\n| ---------------- | ----------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| Execute function | options?: QueryLazyOptions&lt;TVariables&gt;) => void | Function that can be triggered to execute the suspended query. After being called, `useLazyQuery` behaves just like `useQuery`. |\n\n**Result object**\n\n<QueryResult />\n\n## `useMutation`\n\n### Example\n\n```jsx\nimport { gql, useMutation } from '@apollo/client';\n\nconst ADD_TODO = gql`\n  mutation AddTodo($type: String!) {\n    addTodo(type: $type) {\n      id\n      type\n    }\n  }\n`;\n\nfunction AddTodo() {\n  let input;\n  const [addTodo, { data }] = useMutation(ADD_TODO);\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addTodo({ variables: { type: input.value } });\n          input.value = '';\n        }}\n      >\n        <input\n          ref={node => {\n            input = node;\n          }}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n    </div>\n  );\n}\n```\n\n> Refer to the [Mutations](../../data/mutations/) section for a more in-depth overview of `useMutation`.\n\n### Function Signature\n\n```ts\nfunction useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>,\n): MutationTuple<TData, TVariables> {}\n```\n\n### Params\n\n#### `mutation`\n\n| Param      | Type         | Description                                                      |\n| ---------- | ------------ | ---------------------------------------------------------------- |\n| `mutation` | DocumentNode | A GraphQL mutation document parsed into an AST by `gql`. |\n\n#### `options`\n\n<MutationOptions />\n\n### Result\n\n<MutationResult />\n\n## `useSubscription`\n\n### Example\n\n```jsx\nconst COMMENTS_SUBSCRIPTION = gql`\n  subscription OnCommentAdded($repoFullName: String!) {\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      content\n    }\n  }\n`;\n\nfunction DontReadTheComments({ repoFullName }) {\n  const {\n    data: { commentAdded },\n    loading,\n  } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n  return <h4>New comment: {!loading && commentAdded.content}</h4>;\n}\n```\n\n> Refer to the [Subscriptions](../../data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n\n### Function Signature\n\n```ts\nfunction useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n): {\n  variables: TVariables;\n  loading: boolean;\n  data?: TData;\n  error?: ApolloError;\n} {}\n```\n\n### Params\n\n#### `subscription`\n\n| Param          | Type         | Description                                                          |\n| -------------- | ------------ | -------------------------------------------------------------------- |\n| `subscription` | DocumentNode | A GraphQL subscription document parsed into an AST by `gql`. |\n\n#### `options`\n\n<SubscriptionOptions />\n\n### Result\n\n<SubscriptionResult />\n\n## `useApolloClient`\n\n### Example\n\n```jsx\nimport { useApolloClient } from '@apollo/client';\n\nfunction SomeComponent() {\n  const client = useApolloClient();\n  // `client` is now set to the `ApolloClient` instance being used by the\n  // application (that was configured using something like `ApolloProvider`)\n}\n```\n\n### Function Signature\n\n```ts\nfunction useApolloClient(): ApolloClient<object> {}\n```\n\n### Result\n\n| Param                  | Type                       | Description                                                |\n| ---------------------- | -------------------------- | ---------------------------------------------------------- |\n| Apollo Client instance | ApolloClient&lt;object&gt; | The `ApolloClient` instance being used by the application. |\n"}},"__N_SSG":true}