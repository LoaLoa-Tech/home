{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Use codemods to update your codebase when upgrading Next.js to the latest version\n---\n\n# Next.js Codemods\n\nNext.js provides Codemod transformations to help upgrade your Next.js codebase when a feature is deprecated.\n\nCodemods are transformations that run on your codebase programmatically. This allows for a large amount of changes to be applied without having to manually go through every file.\n\n## Usage\n\n`npx @next/codemod <transform> <path>`\n\n- `transform` - name of transform, see available transforms below.\n- `path` - files or directory to transform\n- `--dry` Do a dry-run, no code will be edited\n- `--print` Prints the changed output for comparison\n\n## Next.js 9\n\n### `name-default-component`\n\nTransforms anonymous components into named components to make sure they work with [Fast Refresh](https://nextjs.org/blog/next-9-4#fast-refresh).\n\nFor example\n\n```jsx\n// my-component.js\nexport default function () {\n  return <div>Hello World</div>\n}\n```\n\nTransforms into:\n\n```jsx\n// my-component.js\nexport default function MyComponent() {\n  return <div>Hello World</div>\n}\n```\n\nThe component will have a camel cased name based on the name of the file, and it also works with arrow functions.\n\n#### Usage\n\nGo to your project\n\n```\ncd path-to-your-project/\n```\n\nRun the codemod:\n\n```\nnpx @next/codemod name-default-component\n```\n\n### `withamp-to-config`\n\nTransforms the `withAmp` HOC into Next.js 9 page configuration.\n\nFor example:\n\n```js\n// Before\nimport { withAmp } from 'next/amp'\n\nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport default withAmp(Home)\n```\n\n```js\n// After\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport const config = {\n  amp: true,\n}\n```\n\n#### Usage\n\nGo to your project\n\n```\ncd path-to-your-project/\n```\n\nRun the codemod:\n\n```\nnpx @next/codemod withamp-to-config\n```\n\n## Next.js 6\n\n### `url-to-withrouter`\n\nTransforms the deprecated automatically injected `url` property on top level pages to using `withRouter` and the `router` property it injects. Read more here: [err.sh/next.js/url-deprecated](https://err.sh/next.js/url-deprecated)\n\nFor example:\n\n```js\n// From\nimport React from 'react'\nexport default class extends React.Component {\n  render() {\n    const { pathname } = this.props.url\n    return <div>Current pathname: {pathname}</div>\n  }\n}\n```\n\n```js\n// To\nimport React from 'react'\nimport { withRouter } from 'next/router'\nexport default withRouter(\n  class extends React.Component {\n    render() {\n      const { pathname } = this.props.router\n      return <div>Current pathname: {pathname}</div>\n    }\n  }\n)\n```\n\nThis is just one case. All the cases that are transformed (and tested) can be found in the [`__testfixtures__` directory](https://github.com/vercel/next.js/tree/canary/packages/next-codemod/transforms/__testfixtures__/url-to-withrouter).\n\n#### Usage\n\nGo to your project\n\n```\ncd path-to-your-project/\n```\n\nRun the codemod:\n\n```\nnpx @next/codemod url-to-withrouter\n```\n"}},"__N_SSG":true}