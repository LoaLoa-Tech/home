{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Local-only fields\nsidebar_title: Local-only fields\ndescription: Fetch both local and remote data with the same GraphQL query\n---\n\nimport { ExpansionPanel } from 'gatsby-theme-apollo-docs/src/components/expansion-panel';\n\nYour Apollo Client queries can include **local-only fields** that _aren't_ defined in your GraphQL server's schema. The values for these fields are calculated locally using any logic you want, such as reading data from `localStorage`.\n\nA single query can include both local-only fields _and_ fields that are fetched from your GraphQL server.\n\n## Defining\n\nLet's say we're building an e-commerce application. Most of a product's details are stored on our back-end server, but we want to define an `isInCart` boolean field that's local to the client. First, we create a **field policy** for `isInCart`.\n\nA field policy specifies custom logic for how a single GraphQL field is fetched from and written to your Apollo Client cache. You can define field policies for both local-only fields and remotely fetched fields.\n\n> Field policies are primarily documented in [Customizing the behavior of cached fields](../caching/cache-field-behavior/). This article specifically describes how to use them with local-only fields.\n\nYou define your application's field policies in a map that you provide to the constructor of Apollo Client's `InMemoryCache`. Each field policy is a child of a particular _type_ policy (much like the corresponding field is a child of a particular type).\n\nHere's a sample `InMemoryCache` constructor that defines a field policy for `Product.isInCart`:\n\n```js\nconst cache = new InMemoryCache({\n  typePolicies: { // Type policy map\n    Product: {\n      fields: { // Field policy map for the Product type\n        isInCart: { // Field policy for the isInCart field\n          read(_, { variables }) { // The read function for the isInCart field\n            return localStorage.getItem('CART').includes(\n              variables.productId\n            );\n          }\n        }\n      }\n    }\n  }\n});\n```\n\nThe field policy above defines a [`read` function](../caching/cache-field-behavior/#the-read-function) for the `isInCart` field. Whenever you query a field that has a `read` function, the cache calls that function to calculate the field's value. In this case, the `read` function returns whether the queried product's ID is in the `CART` array in `localStorage`.\n\nYou can use `read` functions to perform any sort of logic you want, including:\n\n* Manually executing other cache operations\n* Calling helper utilities or libraries to prepare, validate, or sanitize data\n* Fetching data from a separate store\n* Logging usage metrics\n\n> If you query a local-only field that _doesn't_ define a `read` function, Apollo Client performs a default cache lookup for the field. See [Storing local state in the cache](#storing-local-state-in-the-cache) for details.\n\n## Querying\n\nNow that we've defined a field policy for `isInCart`, we can include the field in a query that _also_ queries our back-end server, like so:\n\n```js{6}\nconst GET_PRODUCT_DETAILS = gql`\n  query ProductDetails($productId: ID!) {\n    product(id: $productId) {\n      name\n      price\n      isInCart @client\n    }\n  }\n`;\n```\n\nThat's it! The `@client` directive tells Apollo Client that `isInCart` is a local-only field. Because `isInCart` is local-only, Apollo Client omits it from the query it sends to our server to fetch `name` and `price`. The final query result is returned only after all local _and_ remote fields are populated.\n\n> **Note:** If you apply the `@client` directive to a field with subfields, the directive is automatically applied to all subfields.\n>\n> <ExpansionPanel title=\"See example\">\n>\n> ```js{6-9}\n> const GET_PRODUCT_DETAILS = gql`\n  query ProductDetails($productId: ID!) {\n    product(id: $productId) {\n      name\n      price\n      purchaseStatus @client {\n        isInCart\n        isOnWishlist\n      }\n    }\n  }\n`;\n> ```\n>\n> </ExpansionPanel>\n\n## Storing\n\nYou can use Apollo Client to query local state, regardless of how you _store_ that state. Apollo Client provides a couple of optional but helpful mechanisms for representing local state:\n\n* [Reactive variables](#storing-local-state-in-reactive-variables)\n* [The Apollo Client cache itself](#storing-local-state-in-the-cache)\n\n### Storing local state in reactive variables\n\nApollo Client [reactive variables](./reactive-variables) are great for representing local state:\n\n* You can read and modify reactive variables from anywhere in your application, without needing to use a GraphQL operation to do so.\n* Unlike the Apollo Client cache, reactive variables don't enforce data normalization, meaning you can store data in any format you want.\n* If a field's value depends on the value of a reactive variable, and that variable's value _changes_, **every active query that includes the field automatically refreshes**.\n\n#### Example\n\nReturning to our e-commerce application, let's say we want to fetch a list of the item IDs in a user's cart, and this list is stored locally. The query to do that looks like this:\n\n```js:title=Cart.js\nexport const GET_CART_ITEMS = gql`\n  query GetCartItems {\n    cartItems @client\n  }\n`;\n```\n\nLet's initialize a reactive variable to store our local list of cart items, like so:\n\n```js:title=cache.js\nexport const cartItemsVar = makeVar([]);\n```\n\nThis initializes a reactive variable that contains an empty array. We can get this variable's current value by calling `cartItemsVar()`, and we can set a _new_ value by calling `cartItemsVar(newValue)`.\n\nNext, let's define the field policy for `cartItems`. As always, we pass this to the constructor of `InMemoryCache`: \n\n```js{5-9}:title=cache.js\nexport const cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        cartItems: {\n          read() {\n            return cartItemsVar();\n          }\n        }\n      }\n    }\n  }\n});\n```\n\nThis `read` function returns the value of our reactive variable whenever `cartItems` is queried.\n\nNow, let's create a button component that enables the user to add a product to their cart:\n\n```jsx{7}:title=AddToCartButton.js\nimport { cartItemsVar } from './cache';\n// ... other imports\n\nexport function AddToCartButton({ productId }) {\n  return (\n    <div class=\"add-to-cart-button\">\n      <Button onClick={() => cartItemsVar([...cartItemsVar(), productId])}>\n        Add to Cart\n      </Button>\n    </div>\n  );\n}\n```\n\nOn click, this button updates the value of `cartItemsVar` to append the button's associated `productId`. When this happens, Apollo Client notifies every active query that includes the `cartItems` field.\n\nHere's a `Cart` component that uses the `GET_CART_ITEMS` query and therefore refreshes automatically whenever the value of `cartItemsVar` changes:\n\n```jsx:title=Cart.js\nexport const GET_CART_ITEMS = gql`\n  query GetCartItems {\n    cartItems @client\n  }\n`;\n\nexport function Cart() {\n  const { data, loading, error } = useQuery(GET_CART_ITEMS);\n\n  if (loading) return <Loading />;\n  if (error) return <p>ERROR: {error.message}</p>;\n\n  return (\n    <div class=\"cart\">\n      <Header>My Cart</Header>\n      {data && data.cartItems.length === 0 ? (\n        <p>No items in your cart</p>\n      ) : (\n        <Fragment>\n          {data && data.cartItems.map(productId => (\n            <CartItem key={productId} />\n          ))}\n        </Fragment>\n      )}\n    </div>\n  );\n}\n```\n\nAlternatively, you can read directly from a reactive variable using the `useReactiveVar` hook introduced in Apollo Client 3.2.0:\n\n```jsx:title=Cart.js\nimport { useReactiveVar } from '@apollo/client';\n\nexport function Cart() {\n  const cartItems = useReactiveVar(cartItemsVar);\n\n  return (\n    <div class=\"cart\">\n      <Header>My Cart</Header>\n      {cartItems.length === 0 ? (\n        <p>No items in your cart</p>\n      ) : (\n        <Fragment>\n          {cartItems.map(productId => (\n            <CartItem key={productId} />\n          ))}\n        </Fragment>\n      )}\n    </div>\n  );\n}\n```\n\nAs in the earlier `useQuery` example, whenever the `cartItemsVar` variable is updated, any currently-mounted `Cart` components will rerender. Calling `cartItemsVar()` without `useReactiveVar` will not capture this dependency, so future variable updates will not rerender the component. Both of these approaches are useful in different situations.\n\n### Storing local state in the cache\n\nStoring local state directly in the Apollo Client cache provides some advantages, but usually requires more code than [using reactive variables](#storing-local-state-in-reactive-variables):\n\n* You don't _have_ to [define a field policy](#defining) for local-only fields that are present in the cache. If you query a field that doesn't define a `read` function, by default Apollo Client attempts to fetch that field's value directly from the cache.\n* When you modify a cached field with [`writeQuery` or `writeFragment`](../caching/cache-interaction#writequery-and-writefragment), **every active query that includes the field automatically refreshes**.\n\n#### Example\n\nLet's say our application defines the following query:\n\n```js\nconst IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n```\n\nThe `isLoggedIn` field of this query is a local-only field. We can use [the `writeQuery` method](../caching/cache-interaction/#writequery-and-writefragment) to write a value for this field directly to the Apollo Client cache, like so:\n\n```js\ncache.writeQuery({\n  query: IS_LOGGED_IN,\n  data: {\n    isLoggedIn: !!localStorage.getItem(\"token\"),\n  },\n});\n```\n\nThis writes a boolean value according to whether `localStorage` includes a `token` item, indicating an active session.\n\nNow our application's components can render according to the value of the `isLoggedIn` field, _without_ our needing to define a `read` function for it:\n\n```js\nfunction App() {\n  const { data } = useQuery(IS_LOGGED_IN);\n  return data.isLoggedIn ? <Pages /> : <Login />;\n}\n```\n\nHere's a full example that incorporates the code blocks above:\n\n<ExpansionPanel title=\"Expand example\">\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from '@apollo/client';\n\nimport Pages from './pages';\nimport Login from './pages/login';\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache\n});\n\nconst IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\ncache.writeQuery({\n  query: IS_LOGGED_IN,\n  data: {\n    isLoggedIn: !!localStorage.getItem(\"token\"),\n  },\n});\n\nfunction App() {\n  const { data } = useQuery(IS_LOGGED_IN);\n  return data.isLoggedIn ? <Pages /> : <Login />;\n}\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n```\n\n</ExpansionPanel>\n\nNote that even if you _do_ store local data as fields in the Apollo Client cache, you can (and probably should!) still define `read` functions for those fields. A `read` function can execute helpful custom logic, such as returning a default value if a field isn't present in the cache.\n\n## Modifying\n\nThe way you modify the value of a local-only field depends on how you [store that field](#storing):\n\n* **If you're using a [reactive variable](#storing-local-state-in-reactive-variables)**, all you need to do is set the reactive variable's new value. Apollo Client automatically detects this change and triggers a refresh of every active operation that includes an affected field.\n\n* **If you're [using the cache directly](#storing-local-state-in-the-cache)**, call one of `writeQuery`, `writeFragment`, or `cache.modify` ([all documented here](../caching/cache-interaction/)) to modify cached fields. Like reactive variables, all of these methods trigger a refresh of every affected active operation.\n\n* **If you're using another storage method**, such as `localStorage`, set the field's new value in whatever method you're using. Then, you can force a refresh of every affected operation by calling [`cache.evict`](../caching/garbage-collection/#cacheevict). In your call, provide both the `id` of your field's containing object and the name of the local-only field.\n\n## Using local-only fields as GraphQL variables\n\nIf your GraphQL query uses variables, the local-only fields of that query can provide the _values_ of those variables.\n\nTo do so, you apply the `@export(as: \"variableName\")` directive, like so:\n\n```js{3}\nconst GET_CURRENT_AUTHOR_POST_COUNT = gql`\n  query CurrentAuthorPostCount($authorId: Int!) {\n    currentAuthorId @client @export(as: \"authorId\")\n    postCount(authorId: $authorId)\n  }\n`;\n```\n\nIn the query above, the result of the local-only field `currentAuthorId` is used as the value of the `$authorId` variable that's passed to `postCount`. \n\nYou can do this even if `postCount` is _also_ a local-only field (i.e., if it's also marked as `@client`).\n\n### Considerations for using `@export`\n\n* To use the `@export` directive, a field **must also** use the `@client` directive. In other words, only local-only fields can be used as variable values.\n\n* A field that `@export`s a variable value **must appear before** any fields that _use_ that variable.\n\n* If multiple fields in an operation use the `@export` directive to assign their value to the _same_ variable, the field listed _last_ takes precedence. When this happens in development mode, Apollo Client logs a warning message.\n\n* At first glance, the `@export` directive appears to violate the [GraphQL specification's requirement](https://graphql.github.io/graphql-spec/draft/#sec-Normal-and-Serial-Execution) that the execution order of an operation must not affect its result:\n\n    > …the resolution of fields other than top‐level mutation fields must always be side effect‐free and idempotent, the execution order must not affect the result, and hence the server has the freedom to execute the field entries in whatever order it deems optimal.\n\n    However, all `@export`ed variable values are populated _before_ an operation is sent to a remote server. Only local-only fields can use the `@export` directive, and those fields are stripped from operations before they're transmitted.\n"}},"__N_SSG":true}