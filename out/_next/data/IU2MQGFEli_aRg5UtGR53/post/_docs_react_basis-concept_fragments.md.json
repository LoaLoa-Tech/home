{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: fragments\ntitle: Fragments\npermalink: docs/fragments.html\n---\n\nA common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.\n\n```js\nrender() {\n  return (\n    <React.Fragment>\n      <ChildA />\n      <ChildB />\n      <ChildC />\n    </React.Fragment>\n  );\n}\n```\n\nThere is also a new [short syntax](#short-syntax) for declaring them.\n\n## Motivation {#motivation}\n\nA common pattern is for a component to return a list of children. Take this example React snippet:\n\n```jsx\nclass Table extends React.Component {\n  render() {\n    return (\n      <table>\n        <tr>\n          <Columns />\n        </tr>\n      </table>\n    );\n  }\n}\n```\n\n`<Columns />` would need to return multiple `<td>` elements in order for the rendered HTML to be valid. If a parent div was used inside the `render()` of `<Columns />`, then the resulting HTML will be invalid.\n\n```jsx\nclass Columns extends React.Component {\n  render() {\n    return (\n      <div>\n        <td>Hello</td>\n        <td>World</td>\n      </div>\n    );\n  }\n}\n```\n\nresults in a `<Table />` output of:\n\n```jsx\n<table>\n  <tr>\n    <div>\n      <td>Hello</td>\n      <td>World</td>\n    </div>\n  </tr>\n</table>\n```\n\nFragments solve this problem.\n\n## Usage {#usage}\n\n```jsx{4,7}\nclass Columns extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <td>Hello</td>\n        <td>World</td>\n      </React.Fragment>\n    );\n  }\n}\n```\n\nwhich results in a correct `<Table />` output of:\n\n```jsx\n<table>\n  <tr>\n    <td>Hello</td>\n    <td>World</td>\n  </tr>\n</table>\n```\n\n### Short Syntax {#short-syntax}\n\nThere is a new, shorter syntax you can use for declaring fragments. It looks like empty tags:\n\n```jsx{4,7}\nclass Columns extends React.Component {\n  render() {\n    return (\n      <>\n        <td>Hello</td>\n        <td>World</td>\n      </>\n    );\n  }\n}\n```\n\nYou can use `<></>` the same way you'd use any other element except that it doesn't support keys or attributes.\n\n### Keyed Fragments {#keyed-fragments}\n\nFragments declared with the explicit `<React.Fragment>` syntax may have keys. A use case for this is mapping a collection to an array of fragments -- for example, to create a description list:\n\n```jsx\nfunction Glossary(props) {\n  return (\n    <dl>\n      {props.items.map(item => (\n        // Without the `key`, React will fire a key warning\n        <React.Fragment key={item.id}>\n          <dt>{item.term}</dt>\n          <dd>{item.description}</dd>\n        </React.Fragment>\n      ))}\n    </dl>\n  );\n}\n```\n\n`key` is the only attribute that can be passed to `Fragment`. In the future, we may add support for additional attributes, such as event handlers.\n\n### Live Demo {#live-demo}\n\nYou can try out the new JSX fragment syntax with this [CodePen](https://codepen.io/reactjs/pen/VrEbjE?editors=1000).\n"}},"__N_SSG":true}