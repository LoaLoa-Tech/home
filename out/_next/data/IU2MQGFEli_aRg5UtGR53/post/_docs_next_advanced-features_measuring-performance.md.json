{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Measure and track page performance using Next.js's build-in performance relayer\n---\n\n# Measuring performance\n\nNext.js has a built-in relayer that allows you to analyze and measure the performance of\npages using different metrics.\n\nTo measure any of the supported metrics, you will need to create a [custom\nApp](/docs/advanced-features/custom-app.md) component and define a `reportWebVitals` function:\n\n```js\n// pages/_app.js\nexport function reportWebVitals(metric) {\n  console.log(metric)\n}\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\nexport default MyApp\n```\n\nThis function is fired when the final values for any of the metrics have finished calculating on\nthe page. You can use to log any of the results to the console or send to a particular endpoint.\n\nThe `metric` object returned to the function consists of a number of properties:\n\n- `id`: Unique identifier for the metric in the context of the current page load\n- `name`: Metric name\n- `startTime`: First recorded timestamp of the performance entry in [milliseconds](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp) (if applicable)\n- `value`: Value, or duration in [milliseconds](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), of the performance entry\n- `label`: Type of metric (`web-vital` or `custom`)\n\nThere are two types of metrics that are tracked:\n\n- Web Vitals\n- Custom metrics\n\n## Web Vitals\n\n[Web Vitals](https://web.dev/vitals/) are a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:\n\n- [Time to First Byte](https://developer.mozilla.org/en-US/docs/Glossary/Time_to_first_byte) (TTFB)\n- [First Contentful Paint](https://developer.mozilla.org/en-US/docs/Glossary/First_contentful_paint) (FCP)\n- [Largest Contentful Paint](https://web.dev/lcp/) (LCP)\n- [First Input Delay](https://web.dev/fid/) (FID)\n- [Cumulative Layout Shift](https://web.dev/cls/) (CLS)\n\nYou can handle all the results of these metrics using the `web-vital` label:\n\n```js\nexport function reportWebVitals(metric) {\n  if (metric.label === 'web-vital') {\n    console.log(metric) // The metric object ({ id, name, startTime, value, label }) is logged to the console\n  }\n}\n```\n\nThere's also the option of handling each of the metrics separately:\n\n```js\nexport function reportWebVitals(metric) {\n  switch (metric.name) {\n    case 'FCP':\n      // handle FCP results\n      break\n    case 'LCP':\n      // handle LCP results\n      break\n    case 'CLS':\n      // handle CLS results\n      break\n    case 'FID':\n      // handle FID results\n      break\n    case 'TTFB':\n      // handle TTFB results\n      break\n    default:\n      break\n  }\n}\n```\n\nA third-party library, [web-vitals](https://github.com/GoogleChrome/web-vitals), is used to measure\nthese metrics. Browser compatibility depends on the particular metric, so refer to the [Browser\nSupport](https://github.com/GoogleChrome/web-vitals#browser-support) section to find out which\nbrowsers are supported.\n\n## Custom metrics\n\nIn addition to the core metrics listed above, there are some additional custom metrics that\nmeasure the time it takes for the page to hydrate and render:\n\n- `Next.js-hydration`: Length of time it takes for the page to start and finish hydrating (in ms)\n- `Next.js-route-change-to-render`: Length of time it takes for a page to start rendering after a\n  route change (in ms)\n- `Next.js-render`: Length of time it takes for a page to finish render after a route change (in ms)\n\nYou can handle all the results of these metrics using the `custom` label:\n\n```js\nexport function reportWebVitals(metric) {\n  if (metric.label === 'custom') {\n    console.log(metric) // The metric object ({ id, name, startTime, value, label }) is logged to the console\n  }\n}\n```\n\nThere's also the option of handling each of the metrics separately:\n\n```js\nexport function reportWebVitals(metric) {\n  switch (metric.name) {\n    case 'Next.js-hydration':\n      // handle hydration results\n      break\n    case 'Next.js-route-change-to-render':\n      // handle route-change to render results\n      break\n    case 'Next.js-render':\n      // handle render results\n      break\n    default:\n      break\n  }\n}\n```\n\nThese metrics work in all browsers that support the [User Timing API](https://caniuse.com/#feat=user-timing).\n\n## Sending results to analytics\n\nWith the relay function, you can send any of results to an analytics endpoint to measure and track\nreal user performance on your site. For example:\n\n```js\nexport function reportWebVitals(metric) {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n\n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n}\n```\n\n> **Note**: If you use [Google Analytics](https://analytics.google.com/analytics/web/), using the\n> `id` value can allow you to construct metric distributions manually (to calculate percentiles,\n> etc...).\n>\n> ```js\n> export function reportWebVitals({ id, name, label, value }) {\n>   // Use `window.gtag` if you initialized Google Analytics as this example:\n>   // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js\n>   window.gtag('event', name, {\n>     event_category:\n>       label === 'web-vital' ? 'Web Vitals' : 'Next.js custom metric',\n>     value: Math.round(name === 'CLS' ? value * 1000 : value), // values must be integers\n>     event_label: id, // id unique to current page load\n>     non_interaction: true, // avoids affecting bounce rate.\n>   })\n> }\n> ```\n>\n> Read more about sending results to Google Analytics [here](https://github.com/GoogleChrome/web-vitals#send-the-results-to-google-analytics).\n\n## TypeScript\n\nIf you are using TypeScript, you can use the built-in type `NextWebVitalsMetric`:\n\n```ts\n// pages/_app.tsx\n\nimport type { AppProps, NextWebVitalsMetric } from 'next/app'\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n\nexport function reportWebVitals(metric: NextWebVitalsMetric) {\n  console.log(metric)\n}\n\nexport default MyApp\n```\n"}},"__N_SSG":true}