{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Server-side rendering\n---\n\nimport {\n  ExpansionPanel,\n} from 'gatsby-theme-apollo-docs/src/components/expansion-panel';\n\n**Server-side rendering** (**SSR**) is a performance optimization for modern web apps. It enables you to render your app's initial state to raw HTML and CSS _before_ serving it to a browser. This means users don't have to wait for their browser to download and initialize React (or Angular, Vue, etc.) before content is available:\n\n```mermaid\nsequenceDiagram\n    participant Browser;\n    participant Server;\n\n    Browser->>Server: Requests example.com;\n    Note over Server: Renders initial state of example.com on server;\n    Server->>Browser: Returns raw HTML and CSS;\n    Note over Browser: Displays raw HTML and CSS;\n    Note over Browser: Initializes view layer and \"rehydrates\" it with returned data\n```\n\nApollo Client provides a handy API for using it with server-side rendering, including a function that executes all of the GraphQL queries that are required to render your component tree. You don't need to make any changes to your queries to support this API.\n\n## Differences from client-side rendering\n\nWhen you render your React app on the server side, _most_ of the code is identical to its client-side counterpart, with a few important exceptions:\n\n* You need to use a server-compatible router for React, such as [React Router](https://reactrouter.com/web/guides/server-rendering).\n\n    (In the case of React Router, you wrap your application in a `StaticRouter` component instead of the `BrowserRouter` you use on the client side.)\n\n* You need to replace relative URLs with absolute URLs wherever applicable.\n\n* The initialization of Apollo Client changes slightly, as [described below](#initializing-apollo-client).\n\n## Initializing Apollo Client\n\nHere's an example _server-side_ initialization of Apollo Client:\n\n```js{7-17}\nimport {\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\nconst client = new ApolloClient({\n  ssrMode: true,\n  link: createHttpLink({\n    uri: 'http://localhost:3010',\n    credentials: 'same-origin',\n    headers: {\n      cookie: req.header('Cookie'),\n    },\n  }),\n  cache: new InMemoryCache(),\n});\n```\n\nYou'll notice a couple differences from a typical client-side initialization:\n\n* You provide `ssrMode: true`. This prevents Apollo Client from refetching queries unnecessarily, and it also enables you to use the `getDataFromTree` function (covered below).\n\n* Instead of providing a `uri` option, you provide an `HttpLink` instance to the `link` option. This enables you to specify any required authentication details when sending requests to your GraphQL endpoint from the server side.\n\n    Note that you also might need to make sure your GraphQL endpoint is configured to accept GraphQL operations from your SSR server (for example, by safelisting its domain or IP).\n\n> It's possible and valid for your GraphQL endpoint to be hosted by the _same server_ that's performing SSR. In this case, Apollo Client doesn't need to make network requests to execute queries. For details, see [Avoiding the network for local queries](#avoiding-the-network-for-local-queries).\n\n## Example\n\nLet's look at an example of SSR in a Node.js app. This example uses Express and React Router v4, although it can work with any server middleware and any router that supports SSR.\n\nFirst, here's an example `app.js` file, _without_ the code for rendering React to HTML and CSS:\n\n<ExpansionPanel title=\"Click to expand\">\n\n```jsx:title=app.js\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\nimport Express from 'express';\nimport React from 'react';\nimport { StaticRouter } from 'react-router';\n\n// File shown below\nimport Layout from './routes/Layout';\n\nconst app = new Express();\napp.use((req, res) => {\n\n  const client = new ApolloClient({\n    ssrMode: true,\n    link: createHttpLink({\n      uri: 'http://localhost:3010',\n      credentials: 'same-origin',\n      headers: {\n        cookie: req.header('Cookie'),\n      },\n    }),\n    cache: new InMemoryCache(),\n  });\n\n  const context = {};\n\n  // The client-side App will instead use <BrowserRouter>\n  const App = (\n    <ApolloProvider client={client}>\n      <StaticRouter location={req.url} context={context}>\n        <Layout />\n      </StaticRouter>\n    </ApolloProvider>\n  );\n\n  // TODO: rendering code (see below)\n});\n\napp.listen(basePort, () => console.log(\n  `app Server is now running on http://localhost:${basePort}`\n));\n```\n\n</ExpansionPanel>\n\nSo far, whenever this example server receives a request, it first initializes Apollo Client and then creates a React tree that's wrapped with the `ApolloProvider` and `StaticRouter` components. The contents of that tree depend on the request's path and the `StaticRouter`'s defined routes.\n\n> It's important to create an _entirely new instance_ of Apollo Client for each request. Otherwise, your response to a request might include sensitive cached query results from a _previous_ request.\n\n### Executing queries with `getDataFromTree`\n\nBecause our app uses Apollo Client, some of the components in the React tree probably execute a GraphQL query with the `useQuery` hook. We can instruct Apollo Client to execute _all_ of the queries required by the tree's components with the `getDataFromTree` function.\n\nThis function walks down the entire tree and executes every required query it encounters (including nested queries). It returns a `Promise` that resolves when all result data is ready in the Apollo Client cache.\n\nWhen the `Promise` resolves, you're ready to render your React tree and return it, along with the current state of the Apollo Client cache.\n\nThe following code replaces the `TODO` comment within the `app.use` call in the example above:\n\n```js:title=app.js\n// Add this import to the top of the file\nimport { getDataFromTree } from \"@apollo/client/react/ssr\";\n\n// Replace the TODO with this\ngetDataFromTree(App).then((content) => {\n  // Extract the entirety of the Apollo Client cache's current state\n  const initialState = client.extract();\n\n  // Add both the page content and the cache state to a top-level component\n  const html = <Html content={content} state={initialState} />;\n\n  // Render the component to static markup and return it\n  res.status(200);\n  res.send(`<!doctype html>\\n${ReactDOM.renderToStaticMarkup(html)}`);\n  res.end();\n});\n```\n\nThe definition of the top-level `Html` component that's rendered to static markup might look like this:\n\n```jsx:title=components/html.js\nexport function Html({ content, state }) {\n  return (\n    <html>\n      <body>\n        <div id=\"root\" dangerouslySetInnerHTML={{ __html: content }} />\n        <script dangerouslySetInnerHTML={{\n          __html: `window.__APOLLO_STATE__=${JSON.stringify(state).replace(/</g, '\\\\u003c')};`,\n        }} />\n      </body>\n    </html>\n  );\n}\n```\n\nThis results in the rendered React tree being added as a child of the `root` `div`, and the initial cache state is assigned to the `__APOLLO_STATE__` global object.\n\n> The `replace` call in this example escapes the `<` character to prevent cross-site scripting attacks that are possible via the presence of `</script>` in a string literal.\n\n### Rehydrating the client-side cache\n\nAlthough the server-side cache's state is available in `__APOLLO_STATE__`, it isn't yet available in the _client-side_ cache. `InMemoryCache` provides a helpful `restore` function for **rehydrating** its state with data `extract`ed from another cache instance.\n\nIn your client-side initialization of Apollo Client, you can rehydrate the cache like so:\n\n```js\nconst client = new ApolloClient({\n  cache: new InMemoryCache().restore(JSON.parse(window.__APOLLO_STATE__)),\n  uri: 'https://example.com/graphql'\n});\n```\n\nNow when the client-side version of the app runs its initial queries, the data is returned instantly because it's already in the cache!\n\n#### Overriding fetch policies during initialization\n\nIf some of your initial queries use the `network-only` or `cache-and-network` [fetch policy](../data/queries/#setting-a-fetch-policy), you can provide the `ssrForceFetchDelay` option to Apollo Client to skip force-fetching those queries during initialization. This way, even those queries initially run using only the cache:\n\n```js\nconst client = new ApolloClient({\n  cache: new InMemoryCache().restore(JSON.parse(window.__APOLLO_STATE__)),\n  link,\n  ssrForceFetchDelay: 100, // in milliseconds\n});\n```\n\n## Avoiding the network for local queries\n\nIf your GraphQL endpoint is hosted by the same server that you're rendering from, you can optionally avoid using the network when executing your SSR queries. This is particularly helpful if `localhost` is firewalled in the server's environment (e.g., on Heroku).\n\nOne option is to use Apollo Link to fetch data using a local GraphQL schema instead of making a network request. To achieve this, when creating an Apollo Client on the server, you could use a [SchemaLink](../api/link/apollo-link-schema/) instead of using `createHttpLink`. `SchemaLink` uses your schema and context to run the query immediately, without any additional network requests:\n\n```js\nimport { ApolloClient, InMemoryCache } from '@apollo/client'\nimport { SchemaLink } from '@apollo/client/link/schema';\n\n// ...\n\nconst client = new ApolloClient({\n  ssrMode: true,\n  // Instead of \"createHttpLink\" use SchemaLink here\n  link: new SchemaLink({ schema }),\n  cache: new InMemoryCache(),\n});\n```\n\n## Skipping a query\n\nIf you want to intentionally skip a particular query during SSR, you can include `ssr: false` in that query's options. Typically, this means the component is rendered in its \"loading\" state on the server. For example:\n\n```jsx\nfunction withClientOnlyUser() {\n  useQuery(GET_USER_WITH_ID, { ssr: false });\n  return <span>My query won't be run on the server</span>;\n}\n```\n"}},"__N_SSG":true}