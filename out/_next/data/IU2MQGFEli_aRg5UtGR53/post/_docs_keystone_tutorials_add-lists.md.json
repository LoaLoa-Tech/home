{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: tutorials\ntitle: Adding lists\norder: 2\n[meta]-->\n\n# Adding lists\n\nWe've already created one list during the [previous\ntutorial](/docs/tutorials/new-project.md). Now it's the time to dive deeper.\nLet's make our `Todo` list a bit more complex.\n\n## Creating lists by file\n\nTo improve maintainability of your code it can be convenient to split `List` schemas\ninto separate files. Create a directory named `lists`, with a file `Todo.js`\nand put the following code inside.\n\n```javascript title=/lists/Todo.js\nconst { Text, Checkbox } = require('@keystonejs/fields');\n\nmodule.exports = {\n  fields: {\n    description: {\n      type: Text,\n      isRequired: true,\n    },\n    isComplete: {\n      type: Checkbox,\n      defaultValue: false,\n    },\n  },\n};\n```\n\n<!-- We should describe the function of, or link to documentation for `isRequired` and `defaultValue` -->\n\nHere we described a very basic schema for a generic `Todo`. Let's add it to our\nKeystone application. Inside of `index.js` import the defined schema and replace\nthe existing one with the required version.\n\n```javascript title=index.js\nconst TodoSchema = require('./lists/Todo.js');\n\nkeystone.createList('Todo', TodoSchema);\n```\n\nMake sure to relaunch Keystone and check that everything is working as expected.\n\n## Adding fields\n\n`Todo` tasks usually have a few more fields. Let's add the ability to set\ndeadlines and the assignee of a task:\n\n```javascript title=/lists/Todo.js\nconst { Text, CalendarDay, Checkbox } = require('@keystonejs/fields');\n\nmodule.exports = {\n  fields: {\n    // existing fields\n    description: {\n      type: Text,\n      isRequired: true,\n    },\n    isComplete: {\n      type: Checkbox,\n      defaultValue: false,\n    },\n    // added fields\n    deadline: {\n      type: CalendarDay,\n      dateFrom: '2019-01-01',\n      dateTo: '2029-01-01',\n      isRequired: false,\n      defaultValue: new Date().toISOString('YYYY-MM-DD').substring(0, 10), // Today's date\n    },\n    assignee: {\n      type: Text,\n      isRequired: true,\n    },\n  },\n};\n```\n\nIf you're curious about the usage options you can read [more about `CalendarDay`](/packages/fields/src/types/CalendarDay/README.md).\nNow it's time to explore docs on other field types and get a bit familiar with them. It will help you make your schema cleaner.\n\n## Defining a `User` list\n\nTake a look at the `assignee` field. Now we're just typing in a name.\nWhy don't we make a separate `User` list, so we can point assigned tasks to a specific `User`.\nCreate another file `User.js` in the `lists` directory. It should look like this:\n\n```javascript title=/lists/User.js\nconst { Text, Password } = require('@keystonejs/fields');\n\nmodule.exports = {\n  fields: {\n    username: {\n      type: Text,\n      isRequired: true,\n    },\n    password: {\n      type: Password,\n      isRequired: true,\n    },\n  },\n};\n```\n\nAnd register it in `index.js`:\n\n```javascript title=index.js\nconst TodoSchema = require('./lists/Todo.js');\nconst UserSchema = require('./lists/User.js');\n\nkeystone.createList('Todo', TodoSchema);\nkeystone.createList('User', UserSchema);\n```\n\n<!-- FIXME:TL We haven't shown then how to get an Admin UI yet!!!! -->\n\nRelaunch your app and see the lists appear in the Admin UI.\n\nBut how can we assign a task to specific user? Let's proceed with [Defining Relationships](/docs/tutorials/relationships.md)\n\nSee also:\n\n- [Schema - Lists & Fields](/docs/guides/schema.md)\n- [API - createList](/docs/api/create-list.md)\n"}},"__N_SSG":true}