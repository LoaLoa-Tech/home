{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Authentication\nsubSection: advanced\n[meta]-->\n\n# Authentication\n\nA note on terminology:\n\n- **Authentication** refers to a user identifying themselves.\n  Within this document, we abbreviate _Authentication_ to _Auth_.\n- **Access control** refers to the specific actions an authenticated or anonymous\n  user can take. Often referred to as _authorization_ elsewhere.\n  The specifics of how this is done is outside the scope of this document.\n  See [access control](/docs/guides/access-control.md) for more.\n\n## Admin UI\n\nUsername / Password authentication can be enabled on the Admin UI.\n\n> **Important:** Admin Authentication will only restrict access to the Admin _UI_. It _will not_ restrict API access. To also restrict access to the API, you must set up [Access controls](/docs/guides/access-control.md).\n\nTo setup authentication, you must instantiate an _Auth Strategy_, and create a\nlist used for authentication in `index.js`. Here, we will setup a\n`PasswordAuthStrategy` instance:\n\n```javascript\nconst { Keystone } = require('@keystonejs/keystone');\nconst { Text, Password } = require('@keystonejs/fields');\nconst { PasswordAuthStrategy } = require('@keystonejs/auth-password');\nconst { AdminUIApp } = require('@keystonejs/app-admin-ui');\n\nconst keystone = new Keystone();\n\nkeystone.createList('User', {\n  fields: {\n    username: { type: Text },\n    password: { type: Password },\n  },\n});\n\nconst authStrategy = keystone.createAuthStrategy({\n  type: PasswordAuthStrategy,\n  list: 'User',\n  config: {\n    identityField: 'username', // default: 'email'\n    secretField: 'password', // default: 'password'\n  },\n});\n\n// Enable Admin UI login by adding the authentication strategy\nconst admin = new AdminUIApp({ authStrategy });\n```\n\nOnce your Keystone server is restarted, the Admin UI will now enforce\nauthentication.\n\n### Logging in to the Admin UI\n\nThe first time you setup authentication, you may not be able to login. This is\nbecause there are no `User`s who can do the logging in.\n\nFirst, disable authentication on the Admin UI by removing `authStrategy` from\nthe `new AdminUIApp()` call:\n\n```diff\n- const admin = new AdminUIApp({ authStrategy });\n+ const admin = new AdminUIApp();\n```\n\nSecond, disable access control by removing `access` from the\n`keystone.createList('User', ...` call:\n\n```diff\n-  access: {\n-    read: access.userIsAdminOrOwner,\n-    update: access.userIsAdminOrOwner,\n-    create: access.userIsAdmin,\n-    delete: access.userIsAdmin,\n-    auth: true,\n-  },\n```\n\nRestart your Keystone App, and visit <http://localhost:3000/admin/users> - you should now be able to access the Admin UI without logging in.\n\nNext, create a User (be sure to set both a username and password).\n\nAdd the `authStrategy` config back to the `new AdminUIApp()` call\n\n```diff\n- const admin = new AdminUIApp();\n+ const admin = new AdminUIApp({ authStrategy });\n```\n\nRestart your Keystone App once more, and try to visit <http://localhost:3000/admin/users>; you will be presented with the login screen.\n\nFinally; login with the newly created `User`'s credentials.\n\n### Programmatic authentication\n\nEach list associated with an auth strategy creates corresponding queries and mutations you can use for programmatic authentication. For a `List` called `User` using the `Password` auth strategy, the following operations are made available:\n\n| Name                           | Type     | Description                                    |\n| ------------------------------ | -------- | ---------------------------------------------- |\n| `authenticatedUser`            | Query    | Returns the currently authenticated list item. |\n| `authenticateUserWithPassword` | Mutation | Authenticates a user.                          |\n| `unauthenticateUser`           | Mutation | Unauthenticates the authenticated user.        |\n\n_NOTE:_ these operations may be named differently if the `List.itemQueryName` config option is set.\n\n#### GraphQL\n\nThe above configuration would also add the following types to the GraphQL schema:\n\n```graphql\ntype authenticateUserOutput {\n  \"\"\"\n  Used to make subsequent authenticated requests by setting this token in a header: 'Authorization: Bearer <token>'.\n  \"\"\"\n  token: String\n  \"\"\"\n  Retrieve information on the newly authenticated User here.\n  \"\"\"\n  item: User\n}\n\ntype unauthenticateUserOutput {\n  \"\"\"\n  \\`true\\` when unauthentication succeeds.\n  NOTE: unauthentication always succeeds when the request has an invalid or missing authentication token.\n  \"\"\"\n  success: Boolean\n}\n```\n\n> **Remember:** The exact schema will depend on your chosen list and authentication strategy.\n\n#### Usage\n\nAuthenticate and return the ID of the newly authenticated user:\n\n```graphql\nmutation signin($identity: String, $secret: String) {\n  authenticate: authenticateUserWithPassword(email: $identity, password: $secret) {\n    item {\n      id\n    }\n  }\n}\n```\n\nUnauthenticate the currently authenticated user:\n\n```graphql\nmutation {\n  unauthenticate: unauthenticateUser {\n    success\n  }\n}\n```\n\n### Controlling access to the Admin UI\n\nBy default, any _authenticated_ user will be able to access the Admin UI. To restrict access, use the `isAccessAllowed` config option.\n\nSee the [Admin UI app](https://www.keystonejs.com/keystonejs/app-admin-ui/) docs for more details.\n\n## API access control\n\nAdding Authentication as shown above will only enable login to the Admin UI. It _will not_ restrict API access.\n\n> **Note:** To restrict API access, you must set up [Access controls](/docs/guides/access-control.md)\n\n## Hooks\n\nKeystone provides a collection of hooks to allow you to customise the behaviour of the authentication mutations.\nPlease see the [hooks API docs](/docs/api/hooks.md) for details on how to use authentication hooks.\n"}},"__N_SSG":true}