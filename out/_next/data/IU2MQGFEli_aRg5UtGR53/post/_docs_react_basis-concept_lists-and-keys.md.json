{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: lists-and-keys\ntitle: Lists and Keys\npermalink: docs/lists-and-keys.html\nprev: conditional-rendering.html\nnext: forms.html\n---\n\nFirst, let's review how you transform lists in JavaScript.\n\nGiven the code below, we use the [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) function to take an array of `numbers` and double their values. We assign the new array returned by `map()` to the variable `doubled` and log it:\n\n```javascript{2}\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map((number) => number * 2);\nconsole.log(doubled);\n```\n\nThis code logs `[2, 4, 6, 8, 10]` to the console.\n\nIn React, transforming arrays into lists of [elements](/docs/rendering-elements.html) is nearly identical.\n\n### Rendering Multiple Components {#rendering-multiple-components}\n\nYou can build collections of elements and [include them in JSX](/docs/introducing-jsx.html#embedding-expressions-in-jsx) using curly braces `{}`.\n\nBelow, we loop through the `numbers` array using the JavaScript [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) function. We return a `<li>` element for each item. Finally, we assign the resulting array of elements to `listItems`:\n\n```javascript{2-4}\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li>{number}</li>\n);\n```\n\nWe include the entire `listItems` array inside a `<ul>` element, and [render it to the DOM](/docs/rendering-elements.html#rendering-an-element-into-the-dom):\n\n```javascript{2}\nReactDOM.render(\n  <ul>{listItems}</ul>,\n  document.getElementById('root')\n);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/GjPyQr?editors=0011)\n\nThis code displays a bullet list of numbers between 1 and 5.\n\n### Basic List Component {#basic-list-component}\n\nUsually you would render lists inside a [component](/docs/components-and-props.html).\n\nWe can refactor the previous example into a component that accepts an array of `numbers` and outputs a list of elements.\n\n```javascript{3-5,7,13}\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li>{number}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\nWhen you run this code, you'll be given a warning that a key should be provided for list items. A \"key\" is a special string attribute you need to include when creating lists of elements. We'll discuss why it's important in the next section.\n\nLet's assign a `key` to our list items inside `numbers.map()` and fix the missing key issue.\n\n```javascript{4}\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>\n      {number}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/jrXYRR?editors=0011)\n\n## Keys {#keys}\n\nKeys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:\n\n```js{3}\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>\n    {number}\n  </li>\n);\n```\n\nThe best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:\n\n```js{2}\nconst todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n);\n```\n\nWhen you don't have stable IDs for rendered items, you may use the item index as a key as a last resort:\n\n```js{2,3}\nconst todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs\n  <li key={index}>\n    {todo.text}\n  </li>\n);\n```\n\nWe don't recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state. Check out Robin Pokorny's article for an [in-depth explanation on the negative impacts of using an index as a key](https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318). If you choose not to assign an explicit key to list items then React will default to using indexes as keys.\n\nHere is an [in-depth explanation about why keys are necessary](/docs/reconciliation.html#recursing-on-children) if you're interested in learning more.\n\n### Extracting Components with Keys {#extracting-components-with-keys}\n\nKeys only make sense in the context of the surrounding array.\n\nFor example, if you [extract](/docs/components-and-props.html#extracting-components) a `ListItem` component, you should keep the key on the `<ListItem />` elements in the array rather than on the `<li>` element in the `ListItem` itself.\n\n**Example: Incorrect Key Usage**\n\n```javascript{4,5,14,15}\nfunction ListItem(props) {\n  const value = props.value;\n  return (\n    // Wrong! There is no need to specify the key here:\n    <li key={value.toString()}>\n      {value}\n    </li>\n  );\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Wrong! The key should have been specified here:\n    <ListItem value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n**Example: Correct Key Usage**\n\n```javascript{2,3,9,10}\nfunction ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()} value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/ZXeOGM?editors=0010)\n\nA good rule of thumb is that elements inside the `map()` call need keys.\n\n### Keys Must Only Be Unique Among Siblings {#keys-must-only-be-unique-among-siblings}\n\nKeys used within arrays should be unique among their siblings. However they don't need to be globally unique. We can use the same keys when we produce two different arrays:\n\n```js{2,5,11,12,19,21}\nfunction Blog(props) {\n  const sidebar = (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  const content = props.posts.map((post) =>\n    <div key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  return (\n    <div>\n      {sidebar}\n      <hr />\n      {content}\n    </div>\n  );\n}\n\nconst posts = [\n  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n  {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\nReactDOM.render(\n  <Blog posts={posts} />,\n  document.getElementById('root')\n);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/NRZYGN?editors=0010)\n\nKeys serve as a hint to React but they don't get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:\n\n```js{3,4}\nconst content = posts.map((post) =>\n  <Post\n    key={post.id}\n    id={post.id}\n    title={post.title} />\n);\n```\n\nWith the example above, the `Post` component can read `props.id`, but not `props.key`.\n\n### Embedding map() in JSX {#embedding-map-in-jsx}\n\nIn the examples above we declared a separate `listItems` variable and included it in JSX:\n\n```js{3-6}\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <ListItem key={number.toString()}\n              value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n```\n\nJSX allows [embedding any expression](/docs/introducing-jsx.html#embedding-expressions-in-jsx) in curly braces so we could inline the `map()` result:\n\n```js{5-8}\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  return (\n    <ul>\n      {numbers.map((number) =>\n        <ListItem key={number.toString()}\n                  value={number} />\n      )}\n    </ul>\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/BLvYrB?editors=0010)\n\nSometimes this results in clearer code, but this style can also be abused. Like in JavaScript, it is up to you to decide whether it is worth extracting a variable for readability. Keep in mind that if the `map()` body is too nested, it might be a good time to [extract a component](/docs/components-and-props.html#extracting-components).\n"}},"__N_SSG":true}