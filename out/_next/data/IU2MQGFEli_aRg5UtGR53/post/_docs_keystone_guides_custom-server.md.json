{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Custom server\nsubSection: advanced\n[meta]-->\n\n# Custom server\n\nBy default, the Keystone CLI starts an `express`-powered server for you when\nrunning the `keystone dev` or `keystone start` commands.\n\nIn some circumstances, you may want to have more control over the server which\nhandles the GraphQL API and Admin UI. Things such as:\n\n- Add additional routes\n- Setup additional server middleware (`compress`/`brotli`/etc)\n- Notify a 3rd party service when the API is ready\n\nA **custom server** can replace the default and act as the entry point to your\napplication which consumes your [schema definition](/docs/guides/schema.md). A custom\nserver must handle initialising a http server which correctly executes any given Keystone apps.\n\n> **Note:** Before reaching for a custom server, consider using a Keystone app which can enhance the functionality of the default server.\n\nApps available in Keystone include:\n\n- [Static App](/packages/app-static/README.md) for serving static files.\n- [Next.js App](/packages/app-next/README.md) for serving a Next.js App on the same server as the API\n- [Nuxt.js App](/packages/app-nuxt/README.md) for serving a Nuxt.js App on the same server as the API\n\n## You may not need a custom server\n\nIf all you want to do is some basic configuration of the default Express instance, you don't need a\ncustom server. The Keystone CLI accepts an additional `configureExpress` export in your `index.js` file.\nThis function takes a single `app` parameter. The running Express instance will be passed to this function\nbefore any middlewares are set up, so you can perform any Express configuration you need here.\n\n```javascript title=index.js\nmodule.exports = {\n  configureExpress: app => {\n    app.set('view engine', 'pug');\n  },\n};\n```\n\n## Minimal custom server\n\n```json title=package.json\n{\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  }\n}\n```\n\n```javascript title=index.js\nconst { Keystone } = require('@keystonejs/keystone');\nconst { GraphQLApp } = require('@keystonejs/app-graphql');\n\nconst keystone = new Keystone({...});\n\nmodule.exports = {\n  keystone,\n  apps: [new GraphQLApp()],\n};\n```\n\n```javascript title=server.js\nconst express = require('express');\nconst { keystone, apps } = require('./index.js');\n\nkeystone\n  .prepare({\n    apps: apps,\n    dev: process.env.NODE_ENV !== 'production',\n  })\n  .then(async ({ middlewares }) => {\n    await keystone.connect();\n    const app = express();\n\n    app.use(middlewares).listen(3000);\n  });\n```\n\n## All-in-one custom server\n\nWhen using a custom server, there is nothing special about the `index.js` file.\nIn this example there is no `index.js` file, instead the `keystone` instance and\n`apps` are declared directly in `server.js`.\n\n```json title=package.json\n{\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  }\n}\n```\n\n```javascript title=server.js\nconst express = require('express');\nconst { Keystone } = require('@keystonejs/keystone');\nconst { GraphQLApp } = require('@keystonejs/app-graphql');\n\nconst keystone = new Keystone({...});\n\nkeystone\n  .prepare({\n    apps: [new GraphQLApp()],\n    dev: process.env.NODE_ENV !== 'production',\n  })\n  .then(async ({ middlewares }) => {\n    await keystone.connect();\n    const app = express();\n\n    app.use(middlewares).listen(3000);\n  });\n```\n\n## Custom server w/middleware\n\nFor really fine-grained control, a custom server can skip calling\n`keystone.prepare()` in favour of calling an app's `.prepareMiddleware()`\nfunction directly.\n\n```json title=package.json\n{\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  }\n}\n```\n\n```javascript title=server.js\nconst express = require('express');\nconst { Keystone } = require('@keystonejs/keystone');\nconst { GraphQLApp } = require('@keystonejs/app-graphql');\nconst { AdminUIApp } = require('@keystonejs/app-admin-ui');\n\nconst keystone = new Keystone({...});\n\nconst dev = process.env.NODE_ENV !== 'production';\nconst apps = [new GraphQLApp(), new AdminUIApp()];\nconst preparations = apps.map(app =>\n  app.prepareMiddleware({ keystone, dev })\n);\n\nPromise.all(preparations).then(async middlewares => {\n  await keystone.connect();\n  const app = express();\n\n  app.use(middlewares).listen(3000);\n});\n```\n\n## Custom server for ServerLess environments\n\nThe current version of Keystone cannot be run in a ServerLess environment such as\n[AWS Lambda](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html).\n\nThis is because the bundled dependencies cause the uncompressed size to exceed the limit of 250mb\nand the dependencies do not compact nicely with \"serverless-webpack\" due to dynamic require statements.\n\nThe KeystoneJS team are working to resolve this in the next major update.\n\nFor now it is best to explore other deployment options such as Docker containers, Heroku or just a simple server behind a load balancer.\n"}},"__N_SSG":true}