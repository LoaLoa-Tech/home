{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Next.js supports TypeScript by default and has built-in types for pages and the API. You can get started with TypeScript in Next.js here.\n---\n\n# TypeScript\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-typescript\">TypeScript</a></li>\n  </ul>\n</details>\n\nNext.js provides an integrated [TypeScript](https://www.typescriptlang.org/) experience out of the box, similar to an IDE.\n\nTo get started, create an empty `tsconfig.json` file in the root of your project:\n\n```bash\ntouch tsconfig.json\n```\n\nNext.js will automatically configure this file with default values. Providing your own `tsconfig.json` with custom [compiler options](https://www.typescriptlang.org/docs/handbook/compiler-options.html) is also supported.\n\n> Next.js uses Babel to handle TypeScript, which has some [caveats](https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats), and some [compiler options are handled differently](https://babeljs.io/docs/en/babel-plugin-transform-typescript#typescript-compiler-options).\n\nThen, run `next` (normally `npm run dev` or `yarn dev`) and Next.js will guide you through the installation of the required packages to finish the setup:\n\n```bash\nnpm run dev\n\n# You'll see instructions like these:\n#\n# Please install typescript, @types/react, and @types/node by running:\n#\n#         yarn add --dev typescript @types/react @types/node\n#\n# ...\n```\n\nYou're now ready to start converting files from `.js` to `.tsx` and leveraging the benefits of TypeScript!.\n\n> A file named `next-env.d.ts` will be created in the root of your project. This file ensures Next.js types are picked up by the TypeScript compiler. **You cannot remove it**, however, you can edit it (but you don't need to).\n\n> TypeScript `strict` mode is turned off by default. When you feel comfortable with TypeScript, it's recommended to turn it on in your `tsconfig.json`.\n\nBy default, Next.js will do type checking as part of `next build`. We recommend using code editor type checking during development.\n\nIf you want to silence the error reports, refer to the documentation for [Ignoring TypeScript errors](/docs/api-reference/next.config.js/ignoring-typescript-errors.md).\n\n## Static Generation and Server-side Rendering\n\nFor `getStaticProps`, `getStaticPaths`, and `getServerSideProps`, you can use the `GetStaticProps`, `GetStaticPaths`, and `GetServerSideProps` types respectively:\n\n```ts\nimport { GetStaticProps, GetStaticPaths, GetServerSideProps } from 'next'\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  // ...\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // ...\n}\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  // ...\n}\n```\n\n> If you're using `getInitialProps`, you can [follow the directions on this page](/docs/api-reference/data-fetching/getInitialProps.md#typescript).\n\n## API Routes\n\nThe following is an example of how to use the built-in types for API routes:\n\n```ts\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  res.status(200).json({ name: 'John Doe' })\n}\n```\n\nYou can also type the response data:\n\n```ts\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype Data = {\n  name: string\n}\n\nexport default (req: NextApiRequest, res: NextApiResponse<Data>) => {\n  res.status(200).json({ name: 'John Doe' })\n}\n```\n\n## Custom `App`\n\nIf you have a [custom `App`](/docs/advanced-features/custom-app.md), you can use the built-in type `AppProps` and change file name to `./pages/_app.tsx` like so:\n\n```ts\n// import App from \"next/app\";\nimport type { AppProps /*, AppContext */ } from 'next/app'\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext: AppContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n\n//   return { ...appProps }\n// }\n\nexport default MyApp\n```\n\n## Path aliases and baseUrl\n\nNext.js automatically supports the `tsconfig.json` `\"paths\"` and `\"baseUrl\"` options.\n\nYou can learn more about this feature on the [Module Path aliases documentation](/docs/advanced-features/module-path-aliases.md).\n"}},"__N_SSG":true}