{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Testing\ndescription: Apollo Client React testing API\n---\n\n## Installation\n\nApollo Client >= 3 includes React testing utilities out of the box. You don't need to install any additional packages.\n\n## `MockedProvider`\n\n```js\nimport { MockedProvider } from \"@apollo/client/testing\";\n```\n\nThe `MockedProvider` is a test-utility that allows you to create a mocked version of the [`ApolloProvider`](./hooks/#the-apolloprovider-component) that doesn't send out network requests to your API, but rather allows you to specify the exact response payload for a given request.\n\nThe `<MockedProvider />` component takes the following props:\n\n| Prop | Type | Description |\n| - | - | - |\n| mocks? | ReadonlyArray<MockedResponse> | An array containing a request object and the corresponding response. |\n| addTypename? | boolean | A boolean indicating whether or not `__typename` are injected into the documents sent to graphql. This **defaults to true**. |\n| defaultOptions? | DefaultOptions | An object containing options to pass directly to the `ApolloClient` instance. |\n| cache? | ApolloCache<TSerializedCache> | A custom cache object to be used in your test. Defaults to `InMemoryCache`. Useful when you need to define a custom `dataIdFromObject` function for automatic cache updates. |\n| resolvers? | Resolvers | Apollo Client local resolvers |\n| childProps? | object | Props that should be passed down to the child |\n\nHere is an example `mocks` prop shape:\n\n```js\nconst mocks = [\n  {\n    request: {\n      query: SOME_QUERY,\n      variables: { first: 4 }\n    },\n    result: {\n      data: {\n        dog: {\n          name: \"Douglas\"\n        }\n      }\n    }\n  },\n  {\n    request: {\n      query: SOME_QUERY,\n      variables: { first: 8}\n    },\n    error: new Error(\"Something went wrong\")\n  }\n]\n```\n\nThe above shows that if the request `SOME_QUERY` is fired with variables `{ first: 4 }` that it results in the data in the `result` object.\n\nIf `SOME_QUERY` is fired with variables `{ first: 8 }` then it results in an `error`.\n\n### Example\n\n```js\nit(\"runs the mocked query\", () => {\n  render(\n    <MockedProvider mocks={mocks}>\n      <MyQueryComponent />\n    </MockedProvider>\n  )\n\n  // Run assertions on <MyQueryComponent/>\n});\n```\n"}},"__N_SSG":true}