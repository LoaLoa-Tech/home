{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Hooks\n[meta]-->\n\n# Hooks\n\nHooks give developers a way to add custom logic to the framework of lists, fields and operations Keystone provides.\n\nThis document provides an overview of the concepts, patterns and function of the Keystone hook system.\nThe [Hooks API docs](/docs/api/hooks.md) describe the specific arguments and usage information.\n\n## Conceptual organisation\n\nThere are several categorisations that can be applied to hooks and are useful for understanding what is run and when.\n\n> **Note:** the concepts listed here have some exceptions.\n> See the [Gotchas section](#gotchas).\n\n### Stage\n\nKeystone defines several _stages_ within the [hook execution order](#intra-hook-execution-order).\nThese stages are intended to be used for different purposes; they help organise your hook functionality.\n\n- Input resolution - modify the values supplied\n- Data validation - check the values are valid\n- Before operation - perform side effects _before_ the primary operation\n- After operation - perform side effects _after_ the primary operation\n\n### Operation\n\nHooks are available for these core operations:\n\n- `create`\n- `update`\n- `delete`\n- `authenticate`\n- `unauthenticate`\n\nThese operations are used for both \"single\" and \"many\" modes.\nE.g. the `deleteUser` (singular) and `deleteUsers` (plural) mutations are both considered to be `delete` operations.\n\nHooks for these operations have different signatures due to the nature of the operations being performed.\nSee the [Hook API docs](/docs/api/hooks.md) for specifics.\n\n> **Note:** Keystone does not currently implement `read` hooks.\n\n### Hook type\n\nA hook _type_ is defined by where it is attached.\nKeystone recognises three _types_ of hook:\n\n- [Field Type hooks](/docs/api/hooks.md#field-type-hooks) -\n  Field Type hooks are associated with a particular _field type_ and are applied to all fields of that type across all lists.\n- [Field hooks](/docs/api/hooks.md#field-hooks) -\n  Field hooks can be defined by the app developer by specifying the `hooks` attribute of a field configuration when calling `createList()`.\n- [List hooks](/docs/api/hooks.md#list-hooks) -\n  List hooks can be defined by the app developer by specifying the `hooks` attribute of a list configuration when calling `createList()`.\n\n### Hook set\n\nFor most _stage_ and _operation_ combinations, different functions (hooks) can be supplied for each _hook type_.\nThis group of distinct but related hooks are referred to as a _hook set_.\n\nE.g. a `beforeDelete` function could be supplied for a list, several specific fields on the list and a field type used by the list.\nAll hooks in a hook set share the same functional signature but are invoked at different times.\nSee the [Hooks API docs](/docs/api/hooks.md) and [Intra-Hook Execution Order section](#intra-hook-execution-order) for more information.\n\n### Putting it together\n\nIn total there are 13 _hook sets_ available.\nThis table shows the _hook set_ relevant to each combination of _stage_ and _operation_:\n\n| Stage            | `create`        | `update`        | `delete`         | `authenticate`      | `unauthenticate` |\n| ---------------- | --------------- | --------------- | ---------------- | ------------------- | ---------------- |\n| Input resolution | `resolveInput`  | `resolveInput`  | n/a              | `resolveAuthInput`  |                  |\n| Data validation  | `validateInput` | `validateInput` | `validateDelete` | `validateAuthInput` |                  |\n| Before operation | `beforeChange`  | `beforeChange`  | `beforeDelete`   | `beforeAuth`        | `beforeUnauth`   |\n| After operation  | `afterChange`   | `afterChange`   | `afterDelete`    | `afterAuth`         | `afterUnauth`    |\n\nThe `create`, `update` and `delete` _hook sets_ can be attached as _list_, _field_ or _field type_ hooks.\nThe `authenticate` and `unauthenticate` hook sets are unique in that they can only be defined when creating an authentication strategy.\n\nDue to their similarity, the `create` and `update` operations share a single set of hooks.\nTo implement different logic for these operations make it conditional on either the `operation` or `existingItem` arguments;\nfor create operations `existingItem` will be `undefined`.\n\nSee the [Hooks API docs](/docs/api/hooks.md) for argument details and usage.\n\n## Execution order\n\nThe hooks are invoked in a specific order during an operation.\nFor full details of the mutation lifecycle, and where hooks fit within this, see the [Mutation Lifecycle Guide](/docs/guides/mutation-lifecycle.md).\n\n### Create/Update\n\n1. Access control checks\n2. Field defaults applied\n3. `resolveInput` called on all fields, even if they are not defined in the supplied data\n4. `validateInput` called on all fields which have a resolved value (after all `resolveInput` calls have returned)\n5. `beforeChange` called on all fields which have a resolved value (after all `validateInput` calls have returned)\n6. Database operation\n7. `afterChange` called on all fields, even if their value was not changed\n\n### Delete\n\n1. Access control checks\n2. `validateDelete` called on all fields\n3. `beforeDelete` called on all fields (after all `validateDelete` calls have returned)\n4. Database operation (after all `beforeDelete` calls have returned)\n5. `afterDelete` called on all fields (after the DB operation has completed)\n\n### Authentication\n\n1. Access control checks\n2. `resolveAuthInput` called for the list\n3. `validateAuthInput` called for the list\n4. `beforeAuth` called for the list\n5. Auth strategy `validate()` is called\n6. `afterAuth` called for the list\n\n### Unauthentication\n\n1. Access control checks\n2. `beforeAuth` called for the list\n3. `context.endAuthedSession()` is called\n4. `afterAuth` called for the list\n\n### Intra-hook execution order\n\nWithin each hook set, the different [hook types](#hook-type) are invoked in a specific order.\n\n1. All relevant and defined [field type hooks](/docs/api/hooks.md#field-type-hooks) are invoked in **parallel**\n2. All relevant and defined [field hooks](/docs/api/hooks.md#field-hooks) are invoked in **parallel**\n3. If defined the [list hook](/docs/api/hooks.md#list-hooks) is invoked\n\n## Gotchas\n\nThe hook system is powerful but its breadth and flexibility introduce some complexity.\nA few of the main stumbling blocks are:\n\n- The `create` and `update` operations share a single set of hooks.\n  To implement different logic for these operations make it conditional on either the `operation` or `existingItem` arguments;\n  for create operations `existingItem` will be `undefined`.\n- As per the table above, the `delete` operations have no hook set for the _input resolution_ stage.\n  This operation doesn't accept any input (other than the target IDs).\n- Keystone does not currently implement `read` hooks.\n- Field type hooks and field hooks are run in parallel.\n- The `authenticate` and `unauthenticate` hook sets are unique in that they can only be defined when creating an authentication strategy.\n\nThese nuances aren't bugs per se -- they generally exist for good reason --\nbut they can make understanding the hook system difficult.\n\n<!-- TODO: ## Error Handling -->\n"}},"__N_SSG":true}