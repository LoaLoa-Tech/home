{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: api\ntitle: Creating lists\norder: 2\n[meta]-->\n\n# Creating lists\n\nKeystone lists define your application's models. These models represent the\nentities of your application domain and map to the tables in your database.\n\n```javascript allowCopy=false showLanguage=false\nkeystone.createList('ListKey', {...});\n```\n\n## Config\n\n| Option          | Type                                | Default                       | Description                                                            |\n| --------------- | ----------------------------------- | ----------------------------- | ---------------------------------------------------------------------- |\n| `access`        | `Function` \\| `Object` \\| `Boolean` | `true`                        | [Access control](/docs/guides/access-control.md) options for the list. |\n| `adapterConfig` | `Object`                            |                               | Override the adapter config options for a specific list.               |\n| `adminConfig`   | `Object`                            | `{}`                          | Options for the AdminUI.                                               |\n| `adminDoc`      | `String`                            |                               | A description for the list used in the Admin UI.                       |\n| `cacheHint`     | `Object`                            | `{}`                          | Configures a default caching hint for list.                            |\n| `fields`        | `Object`                            |                               | Defines the fields in a list.                                          |\n| `hooks`         | `Object`                            | `{}`                          | Functions to be called during list operations.                         |\n| `itemQueryName` | `String`                            |                               | Changes the _item_ name in GraphQL queries and mutations.              |\n| `label`         | `String`                            | `listName`                    | Overrides label for the list in the AdminUI.                           |\n| `labelField`    | `String`                            | `name`                        | Specify a field to use as a label for individual list items.           |\n| `labelResolver` | `Function`                          | Resolves `labelField` or `id` | Function to resolve labels for individual list items.                  |\n| `listQueryName` | `String`                            |                               | Changes the _list_ name in GraphQL queries and mutations.              |\n| `path`          | `String`                            |                               | Changes the path in the Admin UI.                                      |\n| `plugins`       | `Array`                             | `[]`                          | An array of `plugins` that can modify the list config.                 |\n| `plural`        | `String`                            |                               | Specify a plural for `Keystone` to use for the list.                   |\n| `queryLimits`   | `Object`                            | `{}`                          | Configures list-level query limits.                                    |\n| `schemaDoc`     | `String`                            |                               | A description for the list used in the GraphQL schema.                 |\n| `singular`      | `String`                            |                               | Specify a singular noun for `Keystone` to use for the list.            |\n\n## Definitions\n\n### `access`\n\n[Access control](/docs/guides/access-control.md) options for the list.\n\nOptions for `create`, `read`, `update` and `delete` - can be a function, GraphQL where clause or Boolean. See the [access control API documentation](/docs/api/access-control.md) for more details.\n\n### `adapterConfig`\n\nOverride the adapter config options for a specific list. Normally `adapterConfig` is provided when initialising Keystone:\n\n```javascript\nconst keystone = new Keystone({\n  adapter: new Adapter({...}),\n});\n```\n\nSpecifying an adapter config on a list item will extend the default config for this list.\n\n### `adminConfig`\n\nOptions for the AdminUI including:\n\n- `defaultPageSize`\n- `defaultColumns`\n- `defaultSort`\n- `maximumPageSize`\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    email: { type: Text },\n  },\n  adminConfig: {\n    defaultColumns: 'name,email',\n    defaultPageSize: 50,\n    defaultSort: 'email',\n    maximumPageSize: 100,\n  },\n});\n```\n\n### `adminDoc`\n\nA description for the list used in the Admin UI. To document the list in the GraphQL schema, see [`schemaDoc`](#schemadoc);\n\n```javascript\nkeystone.createList('Todo', {\n  adminDoc: 'A list of things which need to be done.',\n});\n```\n\n### `fields`\n\nDefines the fields to use in a list.\n\n```javascript\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n  },\n});\n```\n\nSee: [Fields](/packages/fields/README.md) for more information on configuring field options.\n\n### `hooks`\n\nSpecify functions to be executed during list operations.\nSupported hooks include:\n\n- Create and update operations\n  - `resolveInput`\n  - `validateInput`\n  - `beforeChange`\n  - `afterChange`\n- Delete operations\n  - `validateDelete`\n  - `beforeDelete`\n  - `afterDelete`\n\nSee [List Hooks in the API docs](/docs/api/hooks.md#list-hooks) and the [Hooks Guide](/docs/guides/hooks.md) for details.\n\n#### Usage\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n  },\n  hooks: {\n    resolveInput: ({ resolvedData }) => {\n      return {\n        name: `${resolvedData.name} the Great!`,\n      };\n    },\n  },\n});\n```\n\n### `itemQueryName`\n\nChanges the item name in GraphQL queries and mutations.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n  },\n  itemQueryName: 'Person',\n});\n```\n\nWith the above example a GraphQL query might look like this:\n\n```graphql\nquery {\n  Person(where: { id: \"1\" }) {\n    name\n  }\n}\n```\n\n### `label`\n\nOverrides label for the list in the AdminUI. Default is `listName`.\n\n### `labelField`\n\nSpecify a field to use as a label for individual list items.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    email: { type: Text },\n  },\n  labelField: 'name',\n});\n```\n\n### `labelResolver`\n\nFunction to resolve labels for individual list item. Default resolves the `labelField`.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    email: { type: Text },\n  },\n  labelResolver: item => `${item.name} - ${item.email}`,\n});\n```\n\n### `listQueryName`\n\nChanges the list name in GraphQL queries and mutations.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n  },\n  listQueryName: 'People',\n});\n```\n\nWith the above example a GraphQL query might look like this:\n\n```graphql\nquery {\n  allPeople {\n    name\n  }\n}\n```\n\n### `path`\n\nChanges the path in the Admin UI. Updating `plural` and `singular` values will not change the route in the admin UI. You can specify this using `path`.\n\n### `plugins`\n\nAn array of functions that modify config values. Plugin functions receive `(config, { listKey, keystone })`, where `config` is the a list config object, `listKey` is the name of the list, and `keystone` is the keystone object. They should return a valid list config. Plugin functions are executed in the order provided in the list, with the output config of one being passed as input to the next. The output of the final plugin is used to construct the `List` instance.\n\n```javascript\nconst setupUserList = ({ fields, ...config }) => {\n  return {\n    ...config,\n    fields: {\n      ...fields,\n      name: { type: Text },\n      password: { type: Password },\n    },\n  };\n};\n\nkeystone.createList('User', {\n  plugin: [setupUserList],\n});\n```\n\nThis provides a method for packaging features that can be applied to multiple lists.\n\n### `plural`\n\nKeystone will attempt to determine a plural for list items. Sometimes Keystone will not be able to determine the plural forcing you to change the list name. Or sometimes Keystone may get it wrong, especially for non-English words.\n\nE.g. Keystone thinks the correct plural for Octopus is \"Octopi\". Everyone knows the scientifically accurate plural is \"Octopodes\":\n\n```javascript\nkeystone.createList('Octopus', {\n  fields: {\n    legs: { type: Integer },\n  },\n  plural: 'Octopodes',\n});\n```\n\n### `queryLimits`\n\nConfiguration for limiting the kinds of queries that can be made against the list, to avoid queries that might overload the server.\n\nSee also [global query limits on the Keystone object](/packages/keystone/README.md#querylimits).\n\n- `maxResults`: maximum number of results that can be returned in a query (or subquery)\n\n```javascript\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n  },\n  queryLimits: {\n    maxResults: 100,\n  },\n});\n```\n\n### `schemaDoc`\n\nA description for the list used in the GraphQL schema. To document the list in the Admin UI, see [`adminDoc`](#admindoc);\n\n```javascript\nkeystone.createList('Todo', {\n  schemaDoc: 'A list of things which need to be done.',\n});\n```\n\n### `singular`\n\nKeystone list names should be singular and Keystone will attempt to determine a plural.\n\nWhere Keystone can't determine a plural you may be forced to use a different list name.\n\nThe `singular` option allows you to change the display label for singular items.\n\nE.g. Keystone can't determine a plural for 'Sheep'. Let's change the `singular` option:\n\n```javascript\nkeystone.createList('WoolyBoi', {\n  fields: {\n    sheepName: { type: Text },\n  },\n  singular: 'Sheep',\n  plural: 'Sheep',\n});\n```\n\n> **Note:** This will override labels in the AdminUI but will not change graphQL queries. For queries and mutations see: `itemQueryName` and `listQueryName`.\n"}},"__N_SSG":true}