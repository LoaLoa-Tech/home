{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Extend the default document markup added by Next.js.\n---\n\n# Custom `Document`\n\nA custom `Document` is commonly used to augment your application's `<html>` and `<body>` tags. This is necessary because Next.js pages skip the definition of the surrounding document's markup.\n\nTo override the default `Document`, create the file `./pages/_document.js` and extend the `Document` class as shown below:\n\n```jsx\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx)\n    return { ...initialProps }\n  }\n\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n```\n\n> The code above is the default `Document` added by Next.js. Feel free to remove the `getInitialProps` or `render` function from `MyDocument` if you don't need to change them.\n\n`<Html>`, `<Head />`, `<Main />` and `<NextScript />` are required for the page to be properly rendered.\n\nCustom attributes are allowed as props, like `lang`:\n\n```jsx\n<Html lang=\"en\">\n```\n\nThe `<Head />` component used here is not the same one from [`next/head`](/docs/api-reference/next/head.md). The `<Head />` component used here should only be used for any `<head>` code that is common for all pages. For all other cases, such as `<title>` tags, we recommend using [`next/head`](/docs/api-reference/next/head.md) in your pages or components.\n\nThe `ctx` object is equivalent to the one received in [`getInitialProps`](/docs/api-reference/data-fetching/getInitialProps.md#context-object), with one addition:\n\n- `renderPage`: `Function` - a callback that runs the actual React rendering logic (synchronously). It's useful to decorate this function in order to support server-rendering wrappers like Aphrodite's [`renderStatic`](https://github.com/Khan/aphrodite#server-side-rendering)\n\n## Caveats\n\n- `Document` is only rendered in the server, event handlers like `onClick` won't work.\n- React components outside of `<Main />` will not be initialized by the browser. Do _not_ add application logic here or custom CSS (like `styled-jsx`). If you need shared components in all your pages (like a menu or a toolbar), take a look at the [`App`](/docs/advanced-features/custom-app.md) component instead.\n- `Document`'s `getInitialProps` function is not called during client-side transitions, nor when a page is [statically optimized](/docs/advanced-features/automatic-static-optimization.md).\n- `Document` currently does not support Next.js [Data Fetching methods](/docs/basic-features/data-fetching.md) like [`getStaticProps`](/docs/basic-features/data-fetching.md#getstaticprops-static-generation) or [`getServerSideProps`](/docs/basic-features/data-fetching.md#getserversideprops-server-side-rendering).\n\n## Customizing `renderPage`\n\n> It should be noted that the only reason you should be customizing `renderPage` is for usage with **css-in-js** libraries that need to wrap the application to properly work with server-side rendering.\n\nIt takes as argument an options object for further customization:\n\n```jsx\nimport Document from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const originalRenderPage = ctx.renderPage\n\n    ctx.renderPage = () =>\n      originalRenderPage({\n        // useful for wrapping the whole react tree\n        enhanceApp: (App) => App,\n        // useful for wrapping in a per-page basis\n        enhanceComponent: (Component) => Component,\n      })\n\n    // Run the parent `getInitialProps`, it now includes the custom `renderPage`\n    const initialProps = await Document.getInitialProps(ctx)\n\n    return initialProps\n  }\n}\n\nexport default MyDocument\n```\n\n## TypeScript\n\nYou can use the built-in `DocumentContext` type and change the file name to `./pages/_document.tsx` like so:\n\n```tsx\nimport Document, { DocumentContext } from 'next/document'\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx: DocumentContext) {\n    const initialProps = await Document.getInitialProps(ctx)\n\n    return initialProps\n  }\n}\n\nexport default MyDocument\n```\n"}},"__N_SSG":true}