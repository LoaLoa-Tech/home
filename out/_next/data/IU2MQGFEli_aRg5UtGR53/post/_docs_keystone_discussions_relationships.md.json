{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: discussions\ntitle: Relationships\n[meta]-->\n\n# Relationships\n\nKeystone allows you to model your data as a collection of related `Lists`.\nFor example, a blogging application might have lists called `Post` and `User`, where each post has a single author.\nThis would be represented in Keystone by a relationship between the `Post` and `User` lists.\n\n## Defining a relationship\n\nRelationships are implemented using the `Relationship` field type and defined along with other fields in `createLists`.\nFor our blog example, we could define:\n\n```javascript\nkeystone.createList('User', { fields: { name: { type: Text } } });\n\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n    content: { type: Text },\n    author: { type: Relationship, ref: 'User', many: false },\n  },\n});\n```\n\nThe `Relationship` field type takes a config option `ref` which is able to reference another list in the application.\nIn this case, the `author` field will hold a reference to the `User` list.\n\nIf we wanted to allow a post to have multiple authors we could change our definition to\n\n```javascript\n    authors: { type: Relationship, ref: 'User', many: true },\n```\n\nWe have used `many: true` to indicate that the post relates to multiple `Users`, who are the `authors` of that post.\nThe default configuration is `many: false`, which indicates that each post is related to exactly one user.\n\n### One-sided vs two-sided\n\nIn our example we know the authors of each post.\nWe can access this information from our GraphQL API by querying for the `authors` field of a post.\n\n```graphql\nQuery {\n  allPosts {\n    title\n    content\n    authors {\n      name\n    }\n  }\n}\n```\n\nIf we can find all `authors` of a post, this implies there is enough information available to find all posts written by a particular user.\nTo access to this information from the `Users` list as well, we update our list definitions as such:\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    posts: { type: Relationship, ref: 'Post.authors', many: true },\n  },\n});\n\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n    content: { type: Text },\n    authors: { type: Relationship, ref: 'User.posts', many: true },\n  },\n});\n```\n\nWe have now added a `posts` field to the `User` list, and changed the `ref` config of the `authors` field.\nWe now have two `Relationship` fields, but importantly, we still **only have one relationship**.\nThe two fields simply represent different sides of the one relationship.\n\nThis type of configuration is called a _two-sided_ relationship, while the original configuration without `posts` was a _one-sided_ relationship.\n\nWe can now write the following query to find all the posts written by each user:\n\n```graphql\nQuery {\n  allUsers {\n    name\n    posts {\n      title\n      content\n    }\n  }\n}\n```\n\nThere are some important things to remember when defining a two-sided relationship:\n\n- Even though there are two fields, there is only one relationship between the lists.\n- The `ref` config must be formatted as `<listName>.<fieldName>` and both sides must refer to each other.\n- Both fields are sharing the same data. If you change the author of a post, that post will no longer show up in the original author's `posts`.\n\n## Self-referential lists\n\nIn the above examples we defined relationships between two different lists, `Users` and `Posts`.\nIt is also possible to define relationships which refer to the same list.\nFor example if we wanted to implement a Twitter style following relationship we could define:\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    follows: { type: Relationship, ref: 'User', many: true },\n  },\n});\n```\n\nThis one-sided relationship allows us to keep track of who each user is following.\nWe could turn this into a two-sided relationship to also access the followers of each user:\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    follows: { type: Relationship, ref: 'User.followers', many: true },\n    followers: { type: Relationship, ref: 'User.follows', many: true },\n  },\n});\n```\n\nThe only relationship configuration not currently supported is having a field reference _itself_, e.g. `friends: { type: Relationship, ref: 'User.friends', many: true }`.\n\n## Cardinality\n\nThe _cardinality_ of a relationship is the number items which can exist on either side of the relationship.\nIn general, each side can have either `one` or `many` related items.\nSince each relationship has two sides this means we can have `one-to-one`, `one-to-many` and `many-to-many` relationships.\n\nThe cardinality of your relationship is controlled by the use of the `many` config option.\nIn two-sided relationships the `many` option on both sides must be considered.\nThe follow examples will demonstrate how to set up each type of cardinality in the context of our blog.\n\n### One-sided\n\n#### One-to-many\n\nEach post has a single author, and each user can have multiple posts, however we cannot directly access a users' posts.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n  },\n});\n\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n    content: { type: Text },\n    author: { type: Relationship, ref: 'User', many: false },\n  },\n});\n```\n\n#### Many-to-many\n\nEach post has multiple authors, and each user can have multiple posts, however we cannot directly access a users' posts.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n  },\n});\n\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n    content: { type: Text },\n    authors: { type: Relationship, ref: 'User', many: true },\n  },\n});\n```\n\n### Twos-sided\n\n#### One-to-one\n\nEach post has a single author, and each user is only allowed to write one post.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    post: { type: Relationship, ref: 'Post.author', many: false },\n  },\n});\n\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n    content: { type: Text },\n    author: { type: Relationship, ref: 'User.post', many: false },\n  },\n});\n```\n\n#### One-to-many\n\nEach post has a single author, and each user can have multiple posts.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    posts: { type: Relationship, ref: 'Post.author', many: true },\n  },\n});\n\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n    content: { type: Text },\n    author: { type: Relationship, ref: 'User.posts', many: false },\n  },\n});\n```\n\n#### Many-to-many\n\nEach post can have multiple authors, and each user can have multiple posts.\n\n```javascript\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n    posts: { type: Relationship, ref: 'Post.authors', many: true },\n  },\n});\n\nkeystone.createList('Post', {\n  fields: {\n    title: { type: Text },\n    content: { type: Text },\n    authors: { type: Relationship, ref: 'User.posts', many: true },\n  },\n});\n```\n\n## Summary\n\nKeystone relationships are managed using the `Relationship` field type.\nThey can be configured as one-sided or two-sided by the `ref` config option, and the cardinality can be set using the `many` flag.\nIf you need help deciding which options to use, please consult the [relationship configuration guide](/docs/guides/relationships.md).\n"}},"__N_SSG":true}