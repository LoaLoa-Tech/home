{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Custom field types\nsubSection: advanced\n[meta]-->\n\n# Custom field types\n\nWhat makes up a field type?\n\n```shell allowCopy=false showLanguage=false\nType/index.js           # The field definition, points to other files and defines the type\nType/Implementation.js  # Back-end implementation of the field type\nType/README.md          # Type specific documentation and usage examples\nType/views/\n├── Field.js            # Main React component rendered by the Item Details view\n└── Cell.js             # Main React component rendered by the List view\n└── Controller.js       # Client-side controller for the field type\n```\n\n## Example\n\nFor an example of a custom field, please see the [Stars field](https://github.com/keystonejs/keystone/tree/master/examples/custom-fields/) in the basic test project.\n\n## Implementation\n\nThis is the back-end class that implements the field type and its schema in\nKeystone. It implements the GraphQL schema types, custom argument definitions\nand resolvers, as well as Field Config and Admin Meta management.\n\nBack-end logic for value validation, processing and hooks should be implemented\nhere.\n\n## Controller\n\nThis is the client-side class that implements helpers for the Admin UI React app\nand views.\n\nIt should extend the `./Controller.js` in the package root.\n\nIt is generally responsible for getting the default data for new items,\nprocessing raw data returned by the API, implementing client-side validation\nmethods, and other helper utilities.\n\n## Views\n\nThese are the client-side React Components that render various pieces of UI for\nthe field type.\n\nThere are currently three views that can be provided:\n\n- `Field` - the form control rendered in the **Item Details** view\n- `Cell` - the content rendered in the List view\n- `Filter` - the filter control rendered in the filters dropdown in the List view\n\n```typescript\ntype FilterProps<Value> = {\n  innerRef: React.Ref<HTMLElement>;\n  value: Value;\n  onChange: Value => mixed;\n  field: Field;\n  filter: string;\n};\n\ntype CellProps<Value> = {\n  list: List;\n  field: Field;\n  data: Value;\n  Link: React.ComponentType<{ children: React.Node, id: string, path: string }>;\n};\n\ntype FieldProps<Value> = {\n  autoFocus: boolean;\n  field: Field;\n  value: Value;\n  error: Error;\n  onChange: Value => mixed;\n  renderContext: 'dialog' | 'page';\n};\n```\n"}},"__N_SSG":true}