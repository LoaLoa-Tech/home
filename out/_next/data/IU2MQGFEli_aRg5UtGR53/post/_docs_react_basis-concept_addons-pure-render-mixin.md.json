{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: pure-render-mixin\ntitle: PureRenderMixin\npermalink: docs/pure-render-mixin.html\nlayout: docs\ncategory: Add-Ons\n---\n\n> Note:\n>\n> `PureRenderMixin` is a legacy add-on. Use [`React.PureComponent`](/docs/react-api.html#reactpurecomponent) instead.\n\n**Importing**\n\n```javascript\nimport PureRenderMixin from 'react-addons-pure-render-mixin'; // ES6\nvar PureRenderMixin = require('react-addons-pure-render-mixin'); // ES5 with npm\n```\n\n## Overview {#overview}\n\nIf your React component's render function renders the same result given the same props and state, you can use this mixin for a performance boost in some cases.\n\nExample:\n\n```js\nconst createReactClass = require('create-react-class');\n\ncreateReactClass({\n  mixins: [PureRenderMixin],\n\n  render: function() {\n    return <div className={this.props.className}>foo</div>;\n  }\n});\n```\n\nUnder the hood, the mixin implements [shouldComponentUpdate](/docs/component-specs.html#updating-shouldcomponentupdate), in which it compares the current props and state with the next ones and returns `false` if the equalities pass.\n\n> Note:\n>\n> This only shallowly compares the objects. If these contain complex data structures, it may produce false-negatives for deeper differences. Only mix into components which have simple props and state, or use `forceUpdate()` when you know deep data structures have changed. Or, consider using [immutable objects](https://facebook.github.io/immutable-js/) to facilitate fast comparisons of nested data.\n>\n> Furthermore, `shouldComponentUpdate` skips updates for the whole component subtree. Make sure all the children components are also \"pure\".\n"}},"__N_SSG":true}