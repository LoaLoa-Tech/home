{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: api\ntitle: Hooks\norder: 7\n[meta]-->\n\n# Hooks API\n\nHooks give solution developers a way to add custom logic to the framework of lists, fields and operations Keystone provides.\n\nThis document describes:\n\n- How and where to configure hooks of different types\n- The specific arguments and usage information of different hook sets\n\nFor a more general overview of the concepts, patterns and function of the Keystone hook system, see the\n[hooks guide](/docs/guides/hooks.md).\n\nNote: For performance reasons relationship fields are not fully resolved by hooks, and will return an array of ids. To fetch data from a relationship field, a second query is required. To do this inside a hook function use the `context.executeGraphQL()` method.\n\n## Hook types\n\nHooks can be categorised into four [types](/docs/guides/hooks.md#hook-type)\ndepending on where in the list schema they're attached:\n\n- [List hooks](#list-hooks)\n- [Field hooks](#field-hooks)\n- [Field type hooks](#field-type-hooks)\n- [Authentication hooks](#authentication-hooks)\n\nWith the exception of the authentication hooks, the [hook sets](/docs/guides/hooks.md#hook-set) that span these types have very similar signatures.\nAny differences are called out in the documentation below.\n\n### List hooks\n\nList hooks can be defined by the system developer by specifying the `hooks` attribute of a list configuration when calling `createList()`.\nHooks for the `create`, `update` and `delete` operations are available.\n\n#### Usage\n\n```js\nkeystone.createList('User', {\n  fields: {\n    name: { type: Text },\n  },\n  hooks: {\n    // Hooks for create and update operations\n    resolveInput: async (...) => {...},\n    validateInput: async (...) => {...},\n    beforeChange: async (...) => {...},\n    afterChange: async (...) => {...},\n\n    // Hooks for delete operations\n    validateDelete: async (...) => {...},\n    beforeDelete: async (...) => {...},\n    afterDelete: async (...) => {...},\n  },\n});\n```\n\n### Field hooks\n\nField hooks can be defined by the system developer by specifying the `hooks` attribute of a field configuration when calling `createList()`.\nHooks for the `create`, `update` and `delete` operations are available.\n\n#### Usage\n\n```js\nkeystone.createList('User', {\n  fields: {\n    name: {\n      type: Text,\n      hooks: {\n        // Hooks for create and update operations\n        resolveInput: async (...) => {...}\n        validateInput: async (...) => {...}\n        beforeChange: async (...) => {...}\n        afterChange: async (...) => {...}\n\n        // Hooks for delete operations\n        validateDelete: async (...) => {...}\n        beforeDelete: async (...) => {...}\n        afterDelete: async (...) => {...}\n      },\n    },\n  },\n});\n```\n\n### Field type hooks\n\nField type hooks are associated with a particular _field type_ and are applied to all fields of that type.\nCustom field types can implement hooks by implementing the following hook methods on the `Field` base class.\nSee the [Custom Field Types guide](/docs/guides/custom-field-types.md) for more info.\n\nHooks for the `create`, `update` and `delete` operations are available.\n\n#### Usage\n\n```js\nclass CustomFieldType extends Field {\n  // Hooks for create and update operations\n  async resolveInput(...) {...},\n  async validateInput(...) {...},\n  async beforeChange(...) {...},\n  async afterChange(...) {...},\n\n  // Hooks for delete operations\n  async beforeDelete(...) {...},\n  async validateDelete(...) {...},\n  async afterDelete(...) {...},\n}\n```\n\n### Authentication hooks\n\nAuthentication hooks can be defined by the system developer by specifying the `hooks` attribute when calling `createAuthStrategy()`.\nHooks for the `authenticate` and `unauthenticate` operations are available.\n\n#### Usage\n\n```js\nkeystone.createAuthStrategy({\n  type: PasswordAuthStrategy,\n  list: 'User',\n  hooks: {\n    resolveAuthInput: async (...) => {...},\n    validateAuthInput: async (...) => {...},\n    beforeAuth: async (...) => {...},\n    afterAuth: async (...) => {...},\n\n    beforeUnauth: async (...) => {...},\n    afterUnauth: async (...) => {...},\n  },\n});\n```\n\n## Hook sets\n\n### `resolveInput`\n\n**Used to modify the `resolvedData`.**\n\n- Invoked after access control and field defaults are applied\n- Available for `create` and `update` operations\n\nThe return of `resolveInput` can be a `Promise` or an `Object`.\nIt should resolve to the same structure as the `resolvedData`.\nThe result is passed to [the next function in the execution order](/docs/guides/hooks.md#execution-order).\n\n#### Arguments\n\n| Argument        | Type                    | Description                                                                                                                  |\n| :-------------- | :---------------------- | :--------------------------------------------------------------------------------------------------------------------------- |\n| `operation`     | `String`                | The operation being performed (ie. `create` or `update`)                                                                     |\n| `existingItem`  | `Object` or `undefined` | The current stored item (or `undefined` for `create` operations)                                                             |\n| `originalInput` | `Object`                | The data received by the GraphQL mutation                                                                                    |\n| `resolvedData`  | `Object`                | The data received by the GraphQL mutation plus defaults values                                                               |\n| `context`       | `Apollo Context`        | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/data/data/#context-argument) for this request |\n| `listKey`       | `String`                | The key for the list being operated on                                                                                       |\n| `fieldPath`     | `String`                | The path for the field being operated on (applicable to field hooks only)                                                    |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst resolveInput = ({\n  operation,\n  existingItem,\n  originalInput,\n  resolvedData,\n  context,\n  listKey,\n  fieldPath, // exists only for field hooks\n}) => {\n  // Input resolution logic. Object returned is used in place of `resolvedData`.\n  return resolvedData;\n};\n```\n\n### `validateInput`\n\n**Used to verify the `resolvedData` is valid.**\n\n- Invoked after all `resolveInput` hooks have resolved\n- Available for `create` and `update` operations\n\nIf errors are found in `resolvedData` the function should either throw or call the supplied `addFieldValidationError` argument.\nReturn values are ignored.\n\n#### Arguments\n\n| Argument                  | Type                    | Description                                                                                                                  |\n| :------------------------ | :---------------------- | :--------------------------------------------------------------------------------------------------------------------------- |\n| `operation`               | `String`                | The operation being performed (ie. `create` or `update`)                                                                     |\n| `existingItem`            | `Object` or `undefined` | The current stored item (or `undefined` for `create` operations)                                                             |\n| `originalInput`           | `Object`                | The data received by the GraphQL mutation                                                                                    |\n| `resolvedData`            | `Object`                | The data received by the GraphQL mutation plus defaults values                                                               |\n| `context`                 | `Apollo Context`        | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/data/data/#context-argument) for this request |\n| `addFieldValidationError` | `Function`              | Used to set a field validation error; accepts a `String`                                                                     |\n| `listKey`                 | `String`                | The key for the list being operated on                                                                                       |\n| `fieldPath`               | `String`                | The path for the field being operated on (applicable to field hooks only)                                                    |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst validateInput = ({\n  operation,\n  existingItem,\n  originalInput,\n  resolvedData,\n  context,\n  addFieldValidationError,\n  listKey,\n  fieldPath, // exists only for field hooks\n}) => {\n  // Throw error objects or register validation errors with addFieldValidationError(<String>)\n  // Return values ignored\n};\n```\n\n### `beforeChange`\n\n**Used to cause side effects before the primary operation is executed.**\n\n- Invoked after all `validateInput` hooks have resolved\n- Available for `create` and `update` operations\n\n`beforeChange` hooks can't manipulate the data passed to the primary operation but perform operations before data is saved.\nReturn values are ignored.\n\n#### Arguments\n\n| Argument        | Type                    | Description                                                                                                                  |\n| :-------------- | :---------------------- | :--------------------------------------------------------------------------------------------------------------------------- |\n| `operation`     | `String`                | The operation being performed (ie. `create` or `update`)                                                                     |\n| `existingItem`  | `Object` or `undefined` | The current stored item (or `undefined` for `create` operations)                                                             |\n| `originalInput` | `Object`                | The data received by the GraphQL mutation                                                                                    |\n| `resolvedData`  | `Object`                | The data received by the GraphQL mutation plus defaults values                                                               |\n| `context`       | `Apollo Context`        | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/data/data/#context-argument) for this request |\n| `listKey`       | `String`                | The key for the list being operated on                                                                                       |\n| `fieldPath`     | `String`                | The path for the field being operated on (applicable to field hooks only)                                                    |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst beforeChange = ({\n  operation,\n  existingItem,\n  originalInput,\n  resolvedData,\n  context,\n  listKey,\n  fieldPath, // exists only for field hooks\n}) => {\n  // Perform side effects\n  // Return values ignored\n};\n```\n\n### `afterChange`\n\n**Used to cause side effects after the primary operation is executed.**\n\n- Invoked after the primary operation has completed\n- Available for `create` and `update` operations\n\n`afterChange` hooks perform actions after data is saved.\nIt receives both the \"pre-update\" item that was stored (`existingItem`) and the resultant, \"post-update\" item data (`updatedItem`).\nThis includes any DB-level defaults.\nNotably, for `create` operations, this includes the item's `id`.\n\nReturn values are ignored.\n\n#### Arguments\n\n| Argument        | Type                    | Description                                                                                                                  |\n| :-------------- | :---------------------- | :--------------------------------------------------------------------------------------------------------------------------- |\n| `operation`     | `String`                | The operation being performed (ie. `create` or `update`)                                                                     |\n| `existingItem`  | `Object` or `undefined` | The previously stored item (or `undefined` for `create` operations)                                                          |\n| `originalInput` | `Object`                | The data received by the GraphQL mutation                                                                                    |\n| `updatedItem`   | `Object`                | The new/currently stored item                                                                                                |\n| `context`       | `Apollo Context`        | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/data/data/#context-argument) for this request |\n| `listKey`       | `String`                | The key for the list being operated on                                                                                       |\n| `fieldPath`     | `String`                | The path for the field being operated on (applicable to field hooks only)                                                    |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst afterChange = ({\n  operation,\n  existingItem,\n  originalInput,\n  updatedItem,\n  context,\n  listKey,\n  fieldPath, // exists only for field hooks\n}) => {\n  // Perform side effects\n  // Return values ignored\n};\n```\n\n### `validateDelete`\n\n**Used to verify a delete operation is valid**, ie. will maintain data consitency.\n\n- Invoked after access control has been tested\n- Available for `delete` operations\n\nShould throw or register errors with `addFieldValidationError(<String>)` if the delete operation is invalid.\n\n#### Arguments\n\n| Argument                  | Type             | Description                                                                                                                  |\n| :------------------------ | :--------------- | :--------------------------------------------------------------------------------------------------------------------------- |\n| `operation`               | `String`         | The operation being performed (`delete` in this case)                                                                        |\n| `existingItem`            | `Object`         | The current stored item                                                                                                      |\n| `context`                 | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/data/data/#context-argument) for this request |\n| `addFieldValidationError` | `Function`       | Used to set a field validation error; accepts a `String`                                                                     |\n| `listKey`                 | `String`         | The key for the list being operated on                                                                                       |\n| `fieldPath`               | `String`         | The path for the field being operated on (applicable to field hooks only)                                                    |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst validateDelete = ({\n  operation,\n  existingItem,\n  context,\n  addFieldValidationError,\n  listKey,\n  fieldPath, // exists only for field hooks\n}) => {\n  // Throw error objects or register validation errors with addFieldValidationError(<String>)\n  // Return values ignored\n};\n```\n\n### `beforeDelete`\n\n**Used to cause side effects before the delete operation is executed.**\n\n- Invoked after all `validateDelete` hooks have resolved\n- Available for `delete` operations\n\nPerform actions before the delete operation is executed.\nReturn values are ignored.\n\n#### Arguments\n\n| Argument       | Type             | Description                                                                                                                  |\n| :------------- | :--------------- | :--------------------------------------------------------------------------------------------------------------------------- |\n| `operation`    | `String`         | The operation being performed (`delete` in this case)                                                                        |\n| `existingItem` | `Object`         | The current stored item                                                                                                      |\n| `context`      | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/data/data/#context-argument) for this request |\n| `listKey`      | `String`         | The key for the list being operated on                                                                                       |\n| `fieldPath`    | `String`         | The path for the field being operated on (applicable to field hooks only)                                                    |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst beforeDelete = ({\n  operation,\n  existingItem,\n  context,\n  listKey,\n  fieldPath, // exists only for field hooks\n}) => {\n  // Perform side effects\n  // Return values ignored\n};\n```\n\n### `afterDelete`\n\n**Used to cause side effects after the delete operation is executed.**\n\n- Invoked after the delete operation has been executed\n- Available for `delete` operations\n\nPerform actions after the delete operation has been executed.\nThis is the last chance to operate on the previously stored item, supplied as `existingItem`.\n\nReturn values are ignored.\n\n#### Arguments\n\n| Argument       | Type             | Description                                                                                                                  |\n| :------------- | :--------------- | :--------------------------------------------------------------------------------------------------------------------------- |\n| `operation`    | `String`         | The operation being performed (`delete` in this case)                                                                        |\n| `existingItem` | `Object`         | The previously stored item, now deleted                                                                                      |\n| `context`      | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/data/data/#context-argument) for this request |\n| `listKey`      | `String`         | The key for the list being operated on                                                                                       |\n| `fieldPath`    | `String`         | The path for the field being operated on (applicable to field hooks only)                                                    |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst afterDelete = ({\n  operation,\n  existingItem,\n  context,\n  listKey,\n  fieldPath, // exists only for field hooks\n}) => {\n  // Perform side effects\n  // Return values ignored\n};\n```\n\n### `resolveAuthInput`\n\n**Used to modify the `originalInput`, producing `resolvedData`.**\n\n- Invoked after access control is applied\n- Available for `authenticate` operations\n\nThe return of `resolveAuthInput` can be a `Promise` or an `Object`.\nIt should resolve to the same structure as `originalInput`.\nThe result is passed to [the next function in the execution order](/docs/guides/hooks.md#intra-hook-execution-order).\n\n#### Arguments\n\n| Argument        | Type             | Description                                                                                                                   |\n| :-------------- | :--------------- | :---------------------------------------------------------------------------------------------------------------------------- |\n| `operation`     | `String`         | The operation being performed (`authenticate` in this case)                                                                   |\n| `originalInput` | `Object`         | The data received by the GraphQL mutation                                                                                     |\n| `context`       | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/essentials/data.html#context) for this request |\n| `listKey`       | `String`         | The key for the list being operated on                                                                                        |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst resolveAuthInput = ({\n  operation,\n  originalInput,\n  context,\n  listKey,\n}) => {\n  // Input resolution logic\n  // Object returned is used in place of resolvedData\n  const resolvedData = originalInput;\n  return resolvedData;\n};\n```\n\n### `validateAuthInput`\n\n**Used to verify the `resolvedData` is valid.**\n\n- Invoked after the `resolveAuthInput` hook has resolved\n- Available for `authenticate` operations\n\nIf errors are found in `resolvedData` the function should either throw or call the supplied `addValidationError` argument.\nReturn values are ignored.\n\n#### Arguments\n\n| Argument             | Type             | Description                                                                                                                   |\n| :------------------- | :--------------- | :---------------------------------------------------------------------------------------------------------------------------- |\n| `operation`          | `String`         | The operation being performed (`authenticate` in this case)                                                                   |\n| `originalInput`      | `Object`         | The data received by the GraphQL mutation                                                                                     |\n| `resolvedData`       | `Object`         | The data received by the GraphQL mutation or returned by `resolveAuthInput`, if defined                                       |\n| `context`            | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/essentials/data.html#context) for this request |\n| `addValidationError` | `Function`       | Used to set a validation error; accepts a message `String`                                                                    |\n| `listKey`            | `String`         | The key for the list being operated on                                                                                        |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst validateAuthInput = ({\n  operation,\n  originalInput,\n  resolvedData,\n  context,\n  addFieldValidationError,\n  listKey,\n}) => {\n  // Throw error objects or register validation errors with addValidationError(<String>)\n  // Return values ignored\n};\n```\n\n### `beforeAuth`\n\n**Used to cause side effects before the authenticate operation is executed.**\n\n- Invoked after the `validateAuthInput` hook has resolved\n- Available for `authenticate` operations\n\n`beforeAuth` hooks can perform operations before the auth strategy `validate()` function is invoked.\nReturn values are ignored.\n\n#### Arguments\n\n| Argument        | Type             | Description                                                                                                                   |\n| :-------------- | :--------------- | :---------------------------------------------------------------------------------------------------------------------------- |\n| `operation`     | `String`         | The operation being performed (`authenticate` in this case)                                                                   |\n| `originalInput` | `Object`         | The data received by the GraphQL mutation                                                                                     |\n| `resolvedData`  | `Object`         | The data received by the GraphQL mutation or returned by `resolveAuthInput`, if defined                                       |\n| `context`       | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/essentials/data.html#context) for this request |\n| `listKey`       | `String`         | The key for the list being operated on                                                                                        |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst beforeAuth = ({\n  operation,\n  originalInput,\n  resolvedData,\n  context,\n  listKey,\n}) => {\n  // Perform side effects\n  // Return values ignored\n};\n```\n\n### `afterAuth`\n\n**Used to cause side effects after the authenticate operation is executed.**\n\n- Invoked after the authenticate operation has completed\n- Available for `authenticate` operations\n\nCan cause side effects after the credentials have been validated or rejected.\nIf authentication was successful, the function is passed the item being authenticated.\n\nReturn values are ignored.\n\n#### Arguments\n\n| Argument        | Type             | Description                                                                                                                   |\n| :-------------- | :--------------- | :---------------------------------------------------------------------------------------------------------------------------- |\n| `operation`     | `String`         | The operation being performed (`authenticate` in this case)                                                                   |\n| `item`          | `Object`         | The item the caller has successfully authenticated as                                                                         |\n| `success`       | `Boolean`        | Indicates whether the credentials were verified successfully                                                                  |\n| `message`       | `String`         | The message being returned to caller                                                                                          |\n| `token`         | `String`         | The session token generated                                                                                                   |\n| `originalInput` | `Object`         | The data received by the GraphQL mutation                                                                                     |\n| `resolvedData`  | `Object`         | The data received by the GraphQL mutation or returned by `resolveAuthInput`, if defined                                       |\n| `context`       | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/essentials/data.html#context) for this request |\n| `listKey`       | `String`         | The key for the list being operated on                                                                                        |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst afterAuth = ({\n  operation,\n  item,\n  success,\n  message,\n  token,\n  originalInput,\n  resolvedData,\n  context,\n  listKey,\n}) => {\n  // Perform side effects\n  // Return values ignored\n};\n```\n\n### `beforeUnauth`\n\n**Used to cause side effects before the unauthenticate operation is executed.**\n\n- Invoked after access control is applied\n- Available for `unauthenticate` operations\n\n`beforeUnauth` hooks can perform operations before the `context.endAuthedSession()` function is invoked.\nReturn values are ignored.\n\n#### Arguments\n\n| Argument    | Type             | Description                                                                                                                   |\n| :---------- | :--------------- | :---------------------------------------------------------------------------------------------------------------------------- |\n| `operation` | `String`         | The operation being performed (`authenticate` in this case)                                                                   |\n| `context`   | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/essentials/data.html#context) for this request |\n| `listKey`   | `String`         | The key for the list being operated on                                                                                        |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst beforeUnauth = ({\n  operation,\n  context,\n  listKey,\n}) => {\n  // Perform side effects\n  // Return values ignored\n};\n```\n\n### `afterUnauth`\n\n**Used to cause side effects after the unauthenticate operation is executed.**\n\n- Invoked after the unauthenticate operation has completed\n- Available for `unauthenticate` operations\n\nCan cause side effects after the user session has been ended.\nIf a user session was terminated, the `listKey` and `itemId` of the user are passed to the function.\n\nReturn values are ignored.\n\n#### Arguments\n\n| Argument    | Type             | Description                                                                                                                   |\n| :---------- | :--------------- | :---------------------------------------------------------------------------------------------------------------------------- |\n| `operation` | `String`         | The operation being performed (`authenticate` in this case)                                                                   |\n| `success`   | `Boolean`        | Indicates whether the unauthentication operation was successful                                                               |\n| `listKey`   | `String`         | The list key of the unauthenticated user (if there was one)                                                                   |\n| `itemid`    | `String`         | The item ID of the unauthenticated user (if there was one)                                                                    |\n| `context`   | `Apollo Context` | The [Apollo `context` object](https://www.apollographql.com/docs/apollo-server/essentials/data.html#context) for this request |\n| `listKey`   | `String`         | The key for the list being operated on                                                                                        |\n\n#### Usage\n\n<!-- prettier-ignore -->\n\n```js\nconst afterAuth = ({\n  operation,\n  item,\n  success,\n  message,\n  token,\n  originalInput,\n  resolvedData,\n  context,\n  listKey,\n}) => {\n  // Perform side effects\n  // Return values ignored\n};\n```\n\n---\n\n### Running GraphQL Queries From Hook\n\nIf you need to execute a GraphQL query from within your hook function you can use `context.executeGraphQL()`.\nSee the docs on [server-side graphql operations](/docs/discussions/server-side-graphql.md) for more details.\n"}},"__N_SSG":true}