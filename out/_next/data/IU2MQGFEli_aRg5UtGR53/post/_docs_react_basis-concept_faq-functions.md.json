{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: faq-functions\ntitle: Passing Functions to Components\npermalink: docs/faq-functions.html\nlayout: docs\ncategory: FAQ\n---\n\n### How do I pass an event handler (like onClick) to a component? {#how-do-i-pass-an-event-handler-like-onclick-to-a-component}\n\nPass event handlers and other functions as props to child components:\n\n```jsx\n<button onClick={this.handleClick}>\n```\n\nIf you need to have access to the parent component in the handler, you also need to bind the function to the component instance (see below).\n\n### How do I bind a function to a component instance? {#how-do-i-bind-a-function-to-a-component-instance}\n\nThere are several ways to make sure functions have access to component attributes like `this.props` and `this.state`, depending on which syntax and build steps you are using.\n\n#### Bind in Constructor (ES2015) {#bind-in-constructor-es2015}\n\n```jsx\nclass Foo extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n```\n\n#### Class Properties (Stage 3 Proposal) {#class-properties-stage-3-proposal}\n\n```jsx\nclass Foo extends Component {\n  // Note: this syntax is experimental and not standardized yet.\n  handleClick = () => {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n```\n\n#### Bind in Render {#bind-in-render}\n\n```jsx\nclass Foo extends Component {\n  handleClick() {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={this.handleClick.bind(this)}>Click Me</button>;\n  }\n}\n```\n\n>**Note:**\n>\n>Using `Function.prototype.bind` in render creates a new function each time the component renders, which may have performance implications (see below).\n\n#### Arrow Function in Render {#arrow-function-in-render}\n\n```jsx\nclass Foo extends Component {\n  handleClick() {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={() => this.handleClick()}>Click Me</button>;\n  }\n}\n```\n\n>**Note:**\n>\n>Using an arrow function in render creates a new function each time the component renders, which may break optimizations based on strict identity comparison.\n\n### Is it OK to use arrow functions in render methods? {#is-it-ok-to-use-arrow-functions-in-render-methods}\n\nGenerally speaking, yes, it is OK, and it is often the easiest way to pass parameters to callback functions.\n\nIf you do have performance issues, by all means, optimize!\n\n### Why is binding necessary at all? {#why-is-binding-necessary-at-all}\n\nIn JavaScript, these two code snippets are **not** equivalent:\n\n```js\nobj.method();\n```\n\n```js\nvar method = obj.method;\nmethod();\n```\n\nBinding methods helps ensure that the second snippet works the same way as the first one.\n\nWith React, typically you only need to bind the methods you *pass* to other components. For example, `<button onClick={this.handleClick}>` passes `this.handleClick` so you want to bind it. However, it is unnecessary to bind the `render` method or the lifecycle methods: we don't pass them to other components.\n\n[This post by Yehuda Katz](https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/) explains what binding is, and how functions work in JavaScript, in detail.\n\n### Why is my function being called every time the component renders? {#why-is-my-function-being-called-every-time-the-component-renders}\n\nMake sure you aren't _calling the function_ when you pass it to the component:\n\n```jsx\nrender() {\n  // Wrong: handleClick is called instead of passed as a reference!\n  return <button onClick={this.handleClick()}>Click Me</button>\n}\n```\n\nInstead, *pass the function itself* (without parens):\n\n```jsx\nrender() {\n  // Correct: handleClick is passed as a reference!\n  return <button onClick={this.handleClick}>Click Me</button>\n}\n```\n\n### How do I pass a parameter to an event handler or callback? {#how-do-i-pass-a-parameter-to-an-event-handler-or-callback}\n\nYou can use an arrow function to wrap around an event handler and pass parameters:\n\n```jsx\n<button onClick={() => this.handleClick(id)} />\n```\n\nThis is equivalent to calling `.bind`:\n\n```jsx\n<button onClick={this.handleClick.bind(this, id)} />\n```\n\n#### Example: Passing params using arrow functions {#example-passing-params-using-arrow-functions}\n\n```jsx\nconst A = 65 // ASCII character code\n\nclass Alphabet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      justClicked: null,\n      letters: Array.from({length: 26}, (_, i) => String.fromCharCode(A + i))\n    };\n  }\n  handleClick(letter) {\n    this.setState({ justClicked: letter });\n  }\n  render() {\n    return (\n      <div>\n        Just clicked: {this.state.justClicked}\n        <ul>\n          {this.state.letters.map(letter =>\n            <li key={letter} onClick={() => this.handleClick(letter)}>\n              {letter}\n            </li>\n          )}\n        </ul>\n      </div>\n    )\n  }\n}\n```\n\n#### Example: Passing params using data-attributes {#example-passing-params-using-data-attributes}\n\nAlternately, you can use DOM APIs to store data needed for event handlers. Consider this approach if you need to optimize a large number of elements or have a render tree that relies on React.PureComponent equality checks.\n\n```jsx\nconst A = 65 // ASCII character code\n\nclass Alphabet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      justClicked: null,\n      letters: Array.from({length: 26}, (_, i) => String.fromCharCode(A + i))\n    };\n  }\n\n  handleClick(e) {\n    this.setState({\n      justClicked: e.target.dataset.letter\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        Just clicked: {this.state.justClicked}\n        <ul>\n          {this.state.letters.map(letter =>\n            <li key={letter} data-letter={letter} onClick={this.handleClick}>\n              {letter}\n            </li>\n          )}\n        </ul>\n      </div>\n    )\n  }\n}\n```\n\n### How can I prevent a function from being called too quickly or too many times in a row? {#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row}\n\nIf you have an event handler such as `onClick` or `onScroll` and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be done by using:\n\n- **throttling**: sample changes based on a time based frequency (eg [`_.throttle`](https://lodash.com/docs#throttle))\n- **debouncing**: publish changes after a period of inactivity (eg [`_.debounce`](https://lodash.com/docs#debounce))\n- **`requestAnimationFrame` throttling**: sample changes based on [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) (eg [`raf-schd`](https://github.com/alexreardon/raf-schd))\n\nSee [this visualization](http://demo.nimius.net/debounce_throttle/) for a comparison of `throttle` and `debounce` functions.\n\n> Note:\n>\n> `_.debounce`, `_.throttle` and `raf-schd` provide a `cancel` method to cancel delayed callbacks. You should either call this method from `componentWillUnmount` _or_ check to ensure that the component is still mounted within the delayed function.\n\n#### Throttle {#throttle}\n\nThrottling prevents a function from being called more than once in a given window of time. The example below throttles a \"click\" handler to prevent calling it more than once per second.\n\n```jsx\nimport throttle from 'lodash.throttle';\n\nclass LoadMoreButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClickThrottled = throttle(this.handleClick, 1000);\n  }\n\n  componentWillUnmount() {\n    this.handleClickThrottled.cancel();\n  }\n\n  render() {\n    return <button onClick={this.handleClickThrottled}>Load More</button>;\n  }\n\n  handleClick() {\n    this.props.loadMore();\n  }\n}\n```\n\n#### Debounce {#debounce}\n\nDebouncing ensures that a function will not be executed until after a certain amount of time has passed since it was last called. This can be useful when you have to perform some expensive calculation in response to an event that might dispatch rapidly (eg scroll or keyboard events). The example below debounces text input with a 250ms delay.\n\n```jsx\nimport debounce from 'lodash.debounce';\n\nclass Searchbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.emitChangeDebounced = debounce(this.emitChange, 250);\n  }\n\n  componentWillUnmount() {\n    this.emitChangeDebounced.cancel();\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        onChange={this.handleChange}\n        placeholder=\"Search...\"\n        defaultValue={this.props.value}\n      />\n    );\n  }\n\n  handleChange(e) {\n    this.emitChangeDebounced(e.target.value);\n  }\n\n  emitChange(value) {\n    this.props.onChange(value);\n  }\n}\n```\n\n#### `requestAnimationFrame` throttling {#requestanimationframe-throttling}\n\n[`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) is a way of queuing a function to be executed in the browser at the optimal time for rendering performance. A function that is queued with `requestAnimationFrame` will fire in the next frame. The browser will work hard to ensure that there are 60 frames per second (60 fps). However, if the browser is unable to it will naturally *limit* the amount of frames in a second. For example, a device might only be able to handle 30 fps and so you will only get 30 frames in that second. Using `requestAnimationFrame` for throttling is a useful technique in that it prevents you from doing more than 60 updates in a second. If you are doing 100 updates in a second this creates additional work for the browser that the user will not see anyway.\n\n>**Note:**\n>\n>Using this technique will only capture the last published value in a frame. You can see an example of how this optimization works on [`MDN`](https://developer.mozilla.org/en-US/docs/Web/Events/scroll)\n\n```jsx\nimport rafSchedule from 'raf-schd';\n\nclass ScrollListener extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleScroll = this.handleScroll.bind(this);\n\n    // Create a new function to schedule updates.\n    this.scheduleUpdate = rafSchedule(\n      point => this.props.onScroll(point)\n    );\n  }\n\n  handleScroll(e) {\n    // When we receive a scroll event, schedule an update.\n    // If we receive many updates within a frame, we'll only publish the latest value.\n    this.scheduleUpdate({ x: e.clientX, y: e.clientY });\n  }\n\n  componentWillUnmount() {\n    // Cancel any pending updates since we're unmounting.\n    this.scheduleUpdate.cancel();\n  }\n\n  render() {\n    return (\n      <div\n        style={{ overflow: 'scroll' }}\n        onScroll={this.handleScroll}\n      >\n        <img src=\"/my-huge-image.jpg\" />\n      </div>\n    );\n  }\n}\n```\n\n#### Testing your rate limiting {#testing-your-rate-limiting}\n\nWhen testing your rate limiting code works correctly it is helpful to have the ability to fast forward time. If you are using [`jest`](https://facebook.github.io/jest/) then you can use [`mock timers`](https://facebook.github.io/jest/docs/en/timer-mocks.html) to fast forward time. If you are using `requestAnimationFrame` throttling then you may find [`raf-stub`](https://github.com/alexreardon/raf-stub) to be a useful tool to control the ticking of animation frames.\n"}},"__N_SSG":true}