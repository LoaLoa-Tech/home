{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: introducing-jsx\ntitle: Introducing JSX\npermalink: docs/introducing-jsx.html\nprev: hello-world.html\nnext: rendering-elements.html\n---\n\nConsider this variable declaration:\n\n```js\nconst element = <h1>Hello, world!</h1>;\n```\n\nThis funny tag syntax is neither a string nor HTML.\n\nIt is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.\n\nJSX produces React \"elements\". We will explore rendering them to the DOM in the [next section](/docs/rendering-elements.html). Below, you can find the basics of JSX necessary to get you started.\n\n### Why JSX? {#why-jsx}\n\nReact embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.\n\nInstead of artificially separating *technologies* by putting markup and logic in separate files, React [separates *concerns*](https://en.wikipedia.org/wiki/Separation_of_concerns) with loosely coupled units called \"components\" that contain both. We will come back to components in a [further section](/docs/components-and-props.html), but if you're not yet comfortable putting markup in JS, [this talk](https://www.youtube.com/watch?v=x7cQ3mrcKaY) might convince you otherwise.\n\nReact [doesn't require](/docs/react-without-jsx.html) using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.\n\nWith that out of the way, let's get started!\n\n### Embedding Expressions in JSX {#embedding-expressions-in-jsx}\n\nIn the example below, we declare a variable called `name` and then use it inside JSX by wrapping it in curly braces:\n\n```js{1,2}\nconst name = 'Josh Perez';\nconst element = <h1>Hello, {name}</h1>;\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n```\n\nYou can put any valid [JavaScript expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions) inside the curly braces in JSX. For example, `2 + 2`, `user.firstName`, or `formatName(user)` are all valid JavaScript expressions.\n\nIn the example below, we embed the result of calling a JavaScript function, `formatName(user)`, into an `<h1>` element.\n\n```js{12}\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n};\n\nconst element = (\n  <h1>\n    Hello, {formatName(user)}!\n  </h1>\n);\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n```\n\n[](codepen://introducing-jsx)\n\nWe split JSX over multiple lines for readability. While it isn't required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of [automatic semicolon insertion](https://stackoverflow.com/q/2846283).\n\n### JSX is an Expression Too {#jsx-is-an-expression-too}\n\nAfter compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.\n\nThis means that you can use JSX inside of `if` statements and `for` loops, assign it to variables, accept it as arguments, and return it from functions:\n\n```js{3,5}\nfunction getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;\n  }\n  return <h1>Hello, Stranger.</h1>;\n}\n```\n\n### Specifying Attributes with JSX {#specifying-attributes-with-jsx}\n\nYou may use quotes to specify string literals as attributes:\n\n```js\nconst element = <div tabIndex=\"0\"></div>;\n```\n\nYou may also use curly braces to embed a JavaScript expression in an attribute:\n\n```js\nconst element = <img src={user.avatarUrl}></img>;\n```\n\nDon't put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.\n\n>**Warning:**\n>\n>Since JSX is closer to JavaScript than to HTML, React DOM uses `camelCase` property naming convention instead of HTML attribute names.\n>\n>For example, `class` becomes [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) in JSX, and `tabindex` becomes [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex).\n\n### Specifying Children with JSX {#specifying-children-with-jsx}\n\nIf a tag is empty, you may close it immediately with `/>`, like XML:\n\n```js\nconst element = <img src={user.avatarUrl} />;\n```\n\nJSX tags may contain children:\n\n```js\nconst element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n```\n\n### JSX Prevents Injection Attacks {#jsx-prevents-injection-attacks}\n\nIt is safe to embed user input in JSX:\n\n```js\nconst title = response.potentiallyMaliciousInput;\n// This is safe:\nconst element = <h1>{title}</h1>;\n```\n\nBy default, React DOM [escapes](https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html) any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that's not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent [XSS (cross-site-scripting)](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks.\n\n### JSX Represents Objects {#jsx-represents-objects}\n\nBabel compiles JSX down to `React.createElement()` calls.\n\nThese two examples are identical:\n\n```js\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n);\n```\n\n```js\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n```\n\n`React.createElement()` performs a few checks to help you write bug-free code but essentially it creates an object like this:\n\n```js\n// Note: this structure is simplified\nconst element = {\n  type: 'h1',\n  props: {\n    className: 'greeting',\n    children: 'Hello, world!'\n  }\n};\n```\n\nThese objects are called \"React elements\". You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.\n\nWe will explore rendering React elements to the DOM in the [next section](/docs/rendering-elements.html).\n\n>**Tip:**\n>\n>We recommend using the [\"Babel\" language definition](https://babeljs.io/docs/en/next/editors) for your editor of choice so that both ES6 and JSX code is properly highlighted.\n"}},"__N_SSG":true}