{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: 'HOC'\nsidebar_title: 'HOC (deprecated)'\ndescription: Deprecated React Apollo HOC API\n---\n\n> **Note:** Official support for React Apollo higher order components ended in March 2020. This library is still included in the `@apollo/client` package, but it no longer receives feature updates or bug fixes.\n\n## Installation\n\nThe HOC library is included in the core `@apollo/client` package:\n\n```\nnpm install @apollo/client\n```\n\nYou then import the library's symbols from `@apollo/client/react/hoc`.\n\n## `graphql(query, [config])(component)`\n\n```js\nimport { graphql } from '@apollo/client/react/hoc';\n```\n\nThe `graphql()` function is the core of Apollo's HOC API. Use this function to  create higher-order components that can execute queries and update reactively based on the data in your Apollo store.\n\nThe `graphql()` function returns a function that \"enhances\" any component with reactive GraphQL capabilities. This follows the React [higher-order component](https://reactjs.org/docs/higher-order-components.html) pattern that's also used by [`react-redux`’s `connect`](https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md) function.\n\nThe `graphql()` function can only provide access to your GraphQL data if there is an [`<ApolloProvider/>`](./hooks/#the-apolloprovider-component) component higher up in your tree to provide an [`ApolloClient`](../core/ApolloClient/) instance that's used to fetch your data.\n\nThe behavior of your component enhanced with the `graphql()` function will be different depending on if your GraphQL operation is a [query](../../data/queries/), a [mutation](../../data/mutations/), or a [subscription](../../data/subscriptions/). See the appropriate API documentation for more information about the functionality and available options for each type.\n\n### Examples\n\nYou can use the `graphql()` function like this:\n\n```js\nfunction TodoApp({ data: { todos } }) {\n  return (\n    <ul>\n      {todos.map(({ id, text }) => (\n        <li key={id}>{text}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default graphql(gql`\n  query TodoAppQuery {\n    todos {\n      id\n      text\n    }\n  }\n`)(TodoApp);\n```\n\nYou can also define an intermediate function and hook up your component with the `graphql()` function like this:\n\n```js\n// Create our enhancer function.\nconst withTodoAppQuery = graphql(gql`query TodoAppQuery { ... }`);\n\n// Enhance our component.\nconst TodoAppWithData = withTodoAppQuery(TodoApp);\n\n// Export the enhanced component.\nexport default TodoAppWithData;\n```\n\n### The `config` object\n\nBefore we look into the specific behaviors of each operation, let's look at the `config` object. The `config` object is the second argument you pass into the `graphql()` function, after your GraphQL document. The config is optional and allows you to add some custom behavior to your higher order component.\n\n```js\nexport default graphql(\n  gql`query MyQuery { ... }`,\n  config, // <- The `config` object.\n)(MyComponent);\n```\n\nLets go through all of the properties that may live on your `config` object.\n\n#### `config.options`\n\n`config.options` is an object or a function that allows you to define the specific behavior your component should use in handling your GraphQL data.\n\nThe specific options available for configuration depend on the operation you pass as the first argument to `graphql()`. There are options specific to [queries](../../data/queries/) and [mutations](../../data/mutations/).\n\nYou can define `config.options` as a plain object, or you can compute your options from a function that takes the component’s props as an argument.\n\n##### Example\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: {\n    // Options go here.\n  },\n})(MyComponent);\n```\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: props => ({\n    // Options are computed from `props` here.\n  }),\n})(MyComponent);\n```\n\n#### `config.props`\n\nThe `config.props` property allows you to define a map function that takes the `props` (and optionally `lastProps`) added by the `graphql()` function ([`props.data`](#propsdata) for queries and [`props.mutate`](#propsmutate) for mutations) and allows you to compute a new `props` (and optionally `lastProps`) object that will be provided to the component that `graphql()` is wrapping.\n\nThe function you define behaves almost exactly like [`mapProps` from Recompose](https://github.com/acdlite/recompose/blob/2e71fdf4270cc8022a6574aaf00731bfc25dcae6/docs/API.md#mapprops) providing the same benefits without the need for another library.\n\n`config.props` is most useful when you want to abstract away complex function calls into a simple prop that you can pass down to your component.\n\nAnother benefit of `config.props` is that it also allows you to decouple your pure UI components from your GraphQL and Apollo concerns. You can write your pure UI components in one file and then keep the logic required for them to interact with the store in a completely different place in your project. You can accomplish this by your pure UI components only asking for the props needed to render and `config.props` can contain the logic to provide exactly the props your pure component needs from the data provided by your GraphQL API.\n\n##### Example\n\nThis example uses [`props.data.fetchMore`](#datafetchmoreoptions).\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  props: ({ data: { fetchMore } }) => ({\n    onLoadMore: () => {\n      fetchMore({ ... });\n    },\n  }),\n})(MyComponent);\n\nfunction MyComponent({ onLoadMore }) {\n  return (\n    <button onClick={onLoadMore}>\n      Load More!\n    </button>\n  );\n}\n```\n\nTo access props that are not added by the `graphql()` function, use the `ownProps` keyword. For example:\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  props: ({ data: { liveImage }, ownProps: { loadingImage } }) => ({\n    image: liveImage || loadingImage,\n  }),\n})(MyComponent);\n```\n\nTo access `lastProps`, use the second argument of `config.props`. For example:\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  props: ({ data: { liveImage } }, lastProps) => ({\n    image: liveImage,\n    lastImage: lastProps.data.liveImage,\n  }),\n})(MyComponent);\n```\n\n#### `config.skip`\n\nIf `config.skip` is `true`, then all of the React Apollo code is skipped _entirely_. Your component behaves as if the `graphql()` function isn't there at all.\n\nYou can also pass a function to `config.skip`. If you do, the function takes your component's props and should return a boolean. If the function returns `true`, then the skip behavior goes into effect.\n\n`config.skip` is especially useful if you want to use a different query based on some prop. You can see this in an example below.\n\n##### Example\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  skip: props => !!props.skip,\n})(MyComponent);\n```\n\nThe following example uses the [`compose`](https://github.com/acdlite/recompose/blob/master/docs/API.md#compose) function to use multiple `graphql()` enhancers at once.\n\n```js\nexport default compose(\n  graphql(gql`query MyQuery1 { ... }`, { skip: props => !props.useQuery1 }),\n  graphql(gql`query MyQuery2 { ... }`, { skip: props => props.useQuery1 }),\n)(MyComponent);\n\nfunction MyComponent({ data }) {\n  // The data may be from `MyQuery1` or `MyQuery2` depending on the value\n  // of the prop `useQuery1`.\n  console.log(data);\n}\n```\n\n#### `config.name`\n\nThis property allows you to configure the name of the prop that gets passed down to your component. By default, if the GraphQL document you pass into `graphql()` is a query, then your prop is named [`data`](#propsdata). If you pass a mutation, then your prop will be named [`mutate`](#propsmutate). These default names collide when you use multiple queries or mutations with the same component. To avoid collisions, use `config.name` to specify a different name.\n\n##### Example\n\nThis example uses the [`compose`](https://github.com/acdlite/recompose/blob/master/docs/API.md#compose) function to use multiple `graphql()` HOCs together.\n\n```js\nexport default compose(\n  graphql(gql`mutation CreateTodoMutation (...) { ... }`, { name: 'createTodo' }),\n  graphql(gql`mutation UpdateTodoMutation (...) { ... }`, { name: 'updateTodo' }),\n  graphql(gql`mutation DeleteTodoMutation (...) { ... }`, { name: 'deleteTodo' }),\n)(MyComponent);\n\nfunction MyComponent(props) {\n  // Instead of the default prop name, `mutate`,\n  // we have three different prop names.\n  console.log(props.createTodo);\n  console.log(props.updateTodo);\n  console.log(props.deleteTodo);\n\n  return null;\n}\n```\n\n#### `config.withRef`\n\nBy setting `config.withRef` to `true`, you can get the instance of your wrapped component from your higher-order GraphQL component using a `getWrappedInstance` method available on the instance of your higher-order GraphQL component.\n\nYou might want to set this to `true` when you want to call functions or access properties that are defined on your wrapped component’s class instance.\n\n##### Example\n\nThis example uses the [React `ref` feature](https://facebook.github.io/react/docs/refs-and-the-dom.html).\n\n```js\nclass MyComponent extends Component {\n  saySomething() {\n    console.log('Hello, world!');\n  }\n\n  render() {\n    // ...\n  }\n}\n\nconst MyGraphQLComponent = graphql(gql`query MyQuery { ... }`, { withRef: true })(\n  MyComponent,\n);\n\nclass MyContainerComponent extends Component {\n  render() {\n    return (\n      <MyGraphQLComponent\n        ref={component => {\n          const wrappedInstance = component.getWrappedInstance();\n          assert(wrappedInstance instanceof MyComponent);\n          // We can call methods on the component class instance.\n          wrappedInstance.saySomething();\n        }}\n      />\n    );\n  }\n}\n```\n\n#### `config.alias`\n\nUse this property to configure the name of your higher order component wrapper. For example, if you set `config.alias` to `'withCurrentUser'`, your wrapper component display name becomes `withCurrentUser(${WrappedComponent.displayName})` instead of `Apollo(${WrappedComponent.displayName})`.\n\nThe default display name for React Apollo components is `Apollo(${WrappedComponent.displayName})`. This pattern is used by most React libraries that make use of higher order components. However, this might get confusing when you are using more than one higher order component and you look at the [React Devtools](https://camo.githubusercontent.com/42385f70ef638c48310ce01a675ceceb4d4b84a9/68747470733a2f2f64337676366c703535716a6171632e636c6f756466726f6e742e6e65742f6974656d732f30543361333532443366325330423049314e31662f53637265656e25323053686f74253230323031372d30312d3132253230617425323031362e33372e30302e706e673f582d436c6f75644170702d56697369746f722d49643d626536623231313261633434616130636135386432623562616265373336323626763d3236623964363434).\n\n\n##### Example\n\nThis example uses the [`compose`](https://github.com/acdlite/recompose/blob/master/docs/API.md#compose) function to use multiple `graphql()` HOCs together.\n\n```js\nexport default compose(\n  graphql(gql`query MyQuery { ... }`, { alias: 'withCurrentUser' }),\n  graphql(gql`query MyQuery { ... }`, { alias: 'withList' }),\n)(MyComponent);\n```\n\n## `graphql() options for queries`\n\n### `props.data`\n\nThe higher-order component created with `graphql()` feeds a `data` prop into your component. Like so:\n\n```js\nrender() {\n  const { data } = this.props; // <- The `data` prop.\n}\n```\n\nThe `data` prop contains the data fetched from your query in addition to some other useful information and functions to control the lifecycle of your GraphQL-connected component. So for example, if we had a query that looked like:\n\n```graphql\nquery ViewerAndTodos {\n  viewer {\n    name\n  }\n  todos {\n    text\n  }\n}\n```\n\nYour `data` prop would contain that data:\n\n```js\nrender() {\n  const { data } = this.props;\n\n  console.log(data.viewer); // <- The data returned by your query for `viewer`.\n  console.log(data.todos); // <- The data returned by your query for `todos`.\n}\n```\n\nThe `data` prop has some other useful properties which can be accessed directly from `data`. For example, `data.loading` or `data.error`. These properties are documented below.\n\nMake sure to always check `data.loading` and `data.error` in your components before rendering. Properties like `data.todos` which contain your app’s data may be undefined while your component is performing its initial fetch. Checking `data.loading` and `data.error` helps you avoid any issues with undefined data. Such checks may look like:\n\n```js\nrender() {\n  const { data: { loading, error, todos } } = this.props;\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n  if (error) {\n    return <p>Error!</p>;\n  }\n  return (\n    <ul>\n      {todos.map(({ id, text }) => (\n        <li key={id}>{text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n### `data.loading`\n\nA boolean representing whether or not a query request is currently in flight for this component. This means that a query request has been sent using your network interface, and we have not yet gotten a response back. Use this property to render a loading component.\n\nHowever, just because `data.loading` is true it does not mean that you won’t have data. For instance, if you already have `data.todos`, but you want to get the latest todos from your API `data.loading` might be true, but you will still have the todos from your previous request.\n\nThere are multiple different network states that your query may be in. If you want to see what the network state of your component is in more detail then refer to [`data.networkStatus`](#datanetworkstatus).\n\n**Example:**\n\n```js\nfunction MyComponent({ data: { loading } }) {\n  if (loading) {\n    return <div>Loading...</div>;\n  } else {\n    // ...\n  }\n}\n\nexport default graphql(gql`query MyQuery { ... }`)(MyComponent);\n```\n\n### `data.error`\n\nIf an error occurred then this property will be an instance of `ApolloError`. If you do not handle this error you will get a warning in your console that says something like: `\"Unhandled (in react-apollo) Error: ...\"`.\n\n**Example:**\n\n```js\nfunction MyComponent({ data: { error } }) {\n  if (error) {\n    return <div>Error!</div>;\n  } else {\n    // ...\n  }\n}\n\nexport default graphql(gql`query MyComponentQuery  { ... }`)(MyComponent);\n```\n\n### `data.networkStatus`\n\n`data.networkStatus` is useful if you want to display a different loading indicator (or no indicator at all) depending on your network status as it provides a more detailed view into the state of a network request on your component than [`data.loading`](#dataloading) does. `data.networkStatus` is an enum with different number values between 1 and 8. These number values each represent a different network state.\n\n1. `loading`: The query has never been run before and the request is now pending. A query will still have this network status even if a result was returned from the cache, but a query was dispatched anyway.\n2. `setVariables`: If a query’s variables change and a network request was fired then the network status will be `setVariables` until the result of that query comes back. React users will see this when [`options.variables`](#optionsvariables) changes on their queries.\n3. `fetchMore`: Indicates that `fetchMore` was called on this query and that the network request created is currently in flight.\n4. `refetch`: It means that `refetch` was called on a query and the refetch request is currently in flight.\n5. Unused.\n6. `poll`: Indicates that a polling query is currently in flight. So for example if you are polling a query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever a poll request has been sent but not resolved.\n7. `ready`: No request is in flight for this query, and no errors happened. Everything is OK.\n8. `error`: No request is in flight for this query, but one or more errors were detected.\n\nIf the network status is less then 7 then it is equivalent to [`data.loading`](#dataloading) being true. In fact you could replace all of your `data.loading` checks with `data.networkStatus < 7` and you would not see a difference. It is recommended that you use `data.loading`, however.\n\n**Example:**\n\n```js\nfunction MyComponent({ data: { networkStatus } }) {\n  if (networkStatus === 6) {\n    return <div>Polling!</div>;\n  } else if (networkStatus < 7) {\n    return <div>Loading...</div>;\n  } else {\n    // ...\n  }\n}\n\nexport default graphql(gql`query MyComponentQuery  { ... }`)(MyComponent);\n```\n\n### `data.variables`\n\nThe variables that Apollo used to fetch data from your GraphQL endpoint. This property is helpful if you want to render some information based on the variables that were used to make a request against your server.\n\n**Example:**\n\n```js\nfunction MyComponent({ data: { variables } }) {\n  return (\n    <div>\n      Query executed with the following variables:\n      <code>{JSON.stringify(variables)}</code>\n    </div>\n  );\n}\n\nexport default graphql(gql`query MyComponentQuery  { ... }`)(MyComponent);\n```\n\n### `data.refetch(variables)`\n\nForces your component to refetch the query you defined in the `graphql()` function. This method is helpful when you want to reload the data in your component, or retry a fetch after an error.\n\n`data.refetch` returns a promise that resolves with the new data fetched from your API once the query has finished executing. The promise will reject if the query failed.\n\nThe `data.refetch` function takes a single `variables` object argument. The `variables` argument will replace `variables` used with either the `query` option or the query from your `graphql()` HOC (depending on whether or not you specified a `query`) option to refetch the query you defined in the `graphql()` function.\n\n**Example:**\n\n```js\nfunction MyComponent({ data: { refetch } }) {\n  return <button onClick={() => refetch()}>Reload</button>;\n}\n\nexport default graphql(gql`query MyComponentQuery  { ... }`)(MyComponent);\n```\n\n### `data.fetchMore(options)`\n\nThe `data.fetchMore` function allows you to do pagination with your query component. To learn more about pagination with `data.fetchMore`, be sure to read the [pagination documentation](../../pagination/overview/).\n\n`data.fetchMore` returns a promise that resolves once the query executed to fetch more data has resolved.\n\nThe `data.fetchMore` function takes a single `options` object argument. The `options` argument may take the following properties:\n\n- `[query]`: This is an optional GraphQL document created with the `gql` GraphQL tag. If you specify a `query` then that query will be fetched when you call `data.fetchMore`. If you do not specify a `query`, then the query from your `graphql()` HOC will be used.\n- `[variables]`: The optional variables you may provide that will be used with either the `query` option or the query from your `graphql()` HOC (depending on whether or not you specified a `query`).\n- `updateQuery(previousResult, { fetchMoreResult, variables })`: This is the required function you define that will actually update your paginated list. The first argument, `previousResult`, will be the previous data returned by the query you defined in your `graphql()` function. The second argument is an object with two properties, `fetchMoreResult` and `variables`. `fetchMoreResult` is the data returned by the new fetch that used the `query` and `variables` options from `data.fetchMore`. `variables` are the variables that were used when fetching more data. Using these arguments you should return a new data object with the same shape as the GraphQL query you defined in your `graphql()` function. See an example of this below, and also make sure to read the [pagination documentation](../../pagination/overview/).\n\n**Example:**\n\n```js\ndata.fetchMore({\n  updateQuery: (previousResult, { fetchMoreResult, variables }) => {\n    return {\n      ...previousResult,\n      // Add the new feed data to the end of the old feed data.\n      feed: [...previousResult.feed, ...fetchMoreResult.feed],\n    };\n  },\n});\n```\n\n### `data.subscribeToMore(options)`\n\nThis function will set up a subscription, triggering updates whenever the server sends a subscription publication. This requires subscriptions to be set up on the server to properly work. Check out the [subscriptions guide](../../data/subscriptions/) and the [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws) and [graphql-subscriptions](https://github.com/apollographql/graphql-subscriptions) for more information on getting this set up.\n\nThis function returns an `unsubscribe` function handler which can be used to unsubscribe later.\n\nA common practice is to wrap the `subscribeToMore` call within `getDerivedStateFromProps` and perform the subscription after the original query has completed. To ensure the subscription isn't created multiple times, you can add it to component state. See the example for more details.\n\n- `[document]`: Document is a required property that accepts a GraphQL subscription created with the `gql` template string tag. It should contain a single GraphQL subscription operation with the data that will be returned.\n- `[variables]`: The optional variables you may provide that will be used with the `document` option.\n- `[updateQuery]`: An optional function that runs every time the server sends an update. This modifies the results of the HOC query. The first argument, `previousResult`, will be the previous data returned by the query you defined in your `graphql()` function. The second argument is an object with two properties. `subscriptionData` is result of the subscription. `variables` is the variables object used with the subscription query. Using these arguments you should return a new data object with the same shape as the GraphQL query you defined in your `graphql()` function. This is similar to the [`fetchMore`](#datafetchmoreoptions) callback.\n- `[onError]`: An optional error callback.\n\nIn order to update the query's store with the result of the subscription, you must specify either the `updateQuery` option in `subscribeToMore` or the `reducer` option in your `graphql()` function.\n\n**Example:**\n\n```js\nclass SubscriptionComponent extends Component {\n  state = {\n    subscriptionParam: null,\n    unsubscribe: null,\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps.data.loading) {\n      // Check for existing subscription\n      if (prevState.unsubscribe) {\n        // Only unsubscribe/update state if subscription variable has changed\n        if (prevState.subscriptionParam === nextProps.subscriptionParam) {\n          return null;\n        }\n        prevState.unsubscribe();\n      }\n\n      return {\n        // Subscribe\n        unsubscribe: nextProps.data.subscribeToMore({\n          document: gql`subscription MySubscription {...}`,\n          variables: {\n            param: nextProps.subscriptionParam,\n          },\n          updateQuery: (previousResult, { subscriptionData, variables }) => {\n            // Perform updates on previousResult with subscriptionData\n            return updatedResult;\n          },\n        }),\n        // Store subscriptionParam in state for next update\n        subscriptionParam: nextProps.subscriptionParam,\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    ...\n  }\n}\n```\n\n### `data.startPolling(interval)`\n\nThis function will set up an interval and send a fetch request every time that interval ellapses. The function takes only one integer argument which allows you to configure how often you want your query to be executed in milliseconds. In other words, the `interval` argument represents the milliseconds between polls.\n\nPolling is a good way to keep the data in your UI fresh. By refetching your data every 5,000 milliseconds (or 5 seconds, for example) you may effectively emulate realtime data without needing to build up a realtime backend.\n\nIf you call `data.startPolling` when your query is already polling then the current polling process will be cancelled and a new process will be started with the interval you specified.\n\nYou may also use [`options.pollInterval`](#optionspollinterval) to start polling immediately after your component mounts. It is recommend that you use `options.pollInterval` if you don’t need to arbitrarily start and stop polling.\n\nIf you set your `interval` to 0 then that means no polling instead of executing a request every JavaScript event loop tick.\n\n**Example:**\n\n```js\nclass MyComponent extends Component {\n  componentDidMount() {\n    // In this specific case you may want to use `options.pollInterval` instead.\n    this.props.data.startPolling(1000);\n  }\n\n  render() {\n    // ...\n  }\n}\n\nexport default graphql(gql`query MyComponentQuery { ... }`)(MyComponent);\n```\n\n### `data.stopPolling()`\n\nBy calling this function you will stop any current polling process. Your query will not start polling again until you call `data.startPolling`.\n\n**Example:**\n\n```js\nclass MyComponent extends Component {\n  render() {\n    return (\n      <div>\n        <button\n          onClick={() => {\n            this.props.data.startPolling(1000);\n          }}\n        >\n          Start Polling\n        </button>\n        <button\n          onClick={() => {\n            this.props.data.stopPolling();\n          }}\n        >\n          Stop Polling\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default graphql(gql`query MyComponentQuery  { ... }`)(MyComponent);\n```\n\n### `data.updateQuery(updaterFn)`\n\nThis function allows you to update the data for your query outside of the context of any mutation, subscription, or fetch. This function only takes a single argument which will be another function. The argument function has the following signature:\n\n```\n(previousResult, { variables }) => nextResult\n```\n\nThe first argument will be the data for your query that currently exists in the store, and you are expected to return a new data object with the same shape. That new data object will be written to the store and any components tracking that data will be updated reactively.\n\nThe second argument is an object with a single property, `variables`. The `variables` property allows you to see what variables were used when reading the `previousResult` from the store.\n\nThis method will _not_ update anything on the server. It will only update data in your client cache and if you reload your JavaScript environment then your update will disappear.\n\n**Example:**\n\n```js\ndata.updateQuery(previousResult => ({\n  ...previousResult,\n  count: previousResult.count + 1,\n}));\n```\n\n### `config.options`\n\nAn object or function that returns an object of options that are used to configure how the query is fetched and updated.\n\nIf `config.options` is a function then it will take the component’s props as its first argument.\n\nThe options available for use in this object depend on the operation type you pass in as the first argument to `graphql()`. The references below will document which options are available when your operation is a query. To see what other options are available for different operations, see the generic documentation for [`config.options`](#configoptions).\n\n**Example:**\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: {\n    // Options go here.\n  },\n})(MyComponent);\n```\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: props => ({\n    // Options are computed from `props` here.\n  }),\n})(MyComponent);\n```\n\n### `options.variables`\n\nThe variables that will be used when executing the query operation. These variables should correspond with the variables that your query definition accepts. If you define `config.options` as a function then you may compute your variables from your props.\n\n**Example:**\n\n```js\nexport default graphql(\n  gql`\n  query MyQuery ($width: Int!, $height: Int!) {\n    ...\n  }\n`,\n  {\n    options: props => ({\n      variables: {\n        width: props.size,\n        height: props.size,\n      },\n    }),\n  },\n)(MyComponent);\n```\n\n### `options.fetchPolicy`\n\nThe fetch policy is an option that allows you to specify how you want your component to interact with the Apollo Client cache. By default, your component will try to read from the cache first, and if the full data for your query is in the cache then Apollo simply returns the data from the cache. If the full data for your query is _not_ in the cache then Apollo will execute your request using your network interface. By changing this option you can change this behavior.\n\nFor a list of supported fetch policies, see [Setting a fetch policy](../../data/queries/#setting-a-fetch-policy).\n\n**Example:**\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: { fetchPolicy: 'cache-and-network' },\n})(MyComponent);\n```\n\n### `options.errorPolicy`\n\nThe error policy is an option which allows you to specify how you want your component to handle errors that can happen when fetching data from GraphQL. There are two types of errors that can happen during your request; a runtime error on the client or server which results in no data, or some GraphQL errors which may be delivered alongside actual data. In order to control how your UI interacts with these errors, you can use the error policy to tell Apollo when you want to know about GraphQL Errors or not!\n\nValid `errorPolicy` values are:\n\n- `none`: This is the default value where we treat GraphQL errors as runtime errors. Apollo will discard any data that came back with the request and render your component with an `error` prop.\n- `ignore`: Much like `none`, this causes Apollo to ignore any data from your server, but it also won't update your UI aside from setting the loading state back to false.\n- `all`: Selecting all means you want to be notified any time there are any GraphQL errors. It will render your component with any data from the request and any errors with their information. It is particularly helpful for server side rendering so your UI always shows something\n\n**Example:**\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: { errorPolicy: 'all' },\n})(MyComponent);\n```\n\n### `options.pollInterval`\n\nThe interval in milliseconds at which you want to start polling. Whenever that number of milliseconds elapses your query will be executed using the network interface and another execution will be scheduled using the configured number of milliseconds.\n\nThis option will start polling your query immediately when the component mounts. If you want to start and stop polling dynamically then you may use [`data.startPolling`](#datastartpollinginterval) and [`data.stopPolling`](#datastoppolling).\n\nIf you set `options.pollInterval` to 0 then that means no polling instead of executing a request every JavaScript event loop tick.\n\n**Example:**\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: { pollInterval: 5000 },\n})(MyComponent);\n```\n\n### `options.notifyOnNetworkStatusChange`\n\nWhether or not updates to the network status or network error should trigger re-rendering of your component.\n\nThe default value is `false`.\n\n**Example:**\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: { notifyOnNetworkStatusChange: true },\n})(MyComponent);\n```\n\n### `options.context`\n\nWith the flexibility and power of [Apollo Link](../../networking/advanced-http-networking/) being part of Apollo Client, you may want to send information from your operation straight to a link in your network chain! This can be used to do things like set `headers` on HTTP requests from props, control which endpoint you send a query to, and so much more depending on what links your app is using. Everything under the `context` object gets passed directly to your network chain. For more information about using context, check out the [`HttpLink` context docs](../../networking/advanced-http-networking/)\n\n### `partialRefetch`\n\nIf `true`, perform a query `refetch` if the query result is marked as being partial, and the returned data is reset to an empty Object by the Apollo Client `QueryManager` (due to a cache miss).\n\nThe default value is `false` for backwards-compatibility's sake, but should be changed to true for most use-cases.\n\n**Example:**\n\n```js\nexport default graphql(gql`query MyQuery { ... }`, {\n  options: { partialRefetch: true },\n})(MyComponent);\n```\n\n## `graphql() options for mutations`\n\n### `props.mutate`\n\nThe higher order component created when you pass a mutation to `graphql()` will provide your component with a single prop named `mutate`. Unlike the `data` prop which you get when you pass a query to `graphql()`, `mutate` is a function.\n\nThe `mutate` function will actually execute your mutation using the network interface therefore mutating your data. The `mutate` function will also then update your cache in ways you define.\n\nTo learn more about how mutations work, be sure to check out the [mutations usage documentation](../../data/mutations/).\n\nThe `mutate` function accepts the same options that [`config.options`](#configoptions-2) for mutations accepts, so make sure to read through the documentation for that to know what you can pass into the `mutate` function.\n\nThe reason the `mutate` function accepts the same options is that it will use the options from [`config.options`](#configoptions-2) _by default_. When you pass an object into the `mutate` function you are just overriding what is already in [`config.options`](#configoptions-2).\n\n**Example:**\n\n```js\nfunction MyComponent({ mutate }) {\n  return (\n    <button\n      onClick={() => {\n        mutate({\n          variables: { foo: 42 },\n        });\n      }}\n    >\n      Mutate\n    </button>\n  );\n}\n\nexport default graphql(gql`mutation MyMutation { ... }`)(MyComponent);\n```\n\n### `config.options`\n\nAn object or function that returns an object of options that are used to configure how the query is fetched and updated.\n\nIf `config.options` is a function then it will take the component’s props as its first argument.\n\nThe options available for use in this object depend on the operation type you pass in as the first argument to `graphql()`. The references below will document which options are available when your operation is a mutation. To see what other options are available for different operations, see the generic documentation for [`config.options`](#configoptions).\n\nThe properties accepted in this options object may also be accepted by the [`props.mutate`](#propsmutate) function. Any options passed into the `mutate` function will take precedence over the options defined in the `config` object.\n\n**Example:**\n\n```js\nexport default graphql(gql`mutation MyMutation { ... }`, {\n  options: {\n    // Options go here.\n  },\n})(MyComponent);\n```\n\n```js\nexport default graphql(gql`mutation MyMutation { ... }`, {\n  options: props => ({\n    // Options are computed from `props` here.\n  }),\n})(MyComponent);\n```\n\n```js\nfunction MyComponent({ mutate }) {\n  return (\n    <button\n      onClick={() => {\n        mutate({\n          // Options are component from `props` and component state here.\n        });\n      }}\n    >\n      Mutate\n    </button>\n  );\n}\n\nexport default graphql(gql`mutation MyMutation { ... }`)(MyComponent);\n```\n\n### `options.variables`\n\nThe variables which will be used to execute the mutation operation. These variables should correspond to the variables that your mutation definition accepts. If you define `config.options` as a function, or you pass variables into the [`props.mutate`](#propsmutate) function then you may compute your variables from props and component state.\n\n**Example:**\n\n```js\nexport default graphql(\n  gql`\n  mutation MyMutation ($foo: String!, $bar: String!) {\n    ...\n  }\n`,\n  {\n    options: props => ({\n      variables: {\n        foo: props.foo,\n        bar: props.bar,\n      },\n    }),\n  },\n)(MyComponent);\n```\n\n### `options.optimisticResponse`\n\nOften when you mutate data it is fairly easy to predict what the response of the mutation will be before asking your server. The optimistic response option allows you to make your mutations feel faster by simulating the result of your mutation in your UI before the mutation actually finishes.\n\nTo learn more about the benefits of optimistic data and how to use it be sure to read the recipe on [Optimistic UI](../../performance/optimistic-ui/).\n\nThis optimistic response will be used with [`options.update`](#optionsupdate) and [`options.updateQueries`](#optionsupdatequeries) to apply an update to your cache which will be rolled back before applying the update from the actual response.\n\n**Example:**\n\n```js\nfunction MyComponent({ newText, mutate }) {\n  return (\n    <button\n      onClick={() => {\n        mutate({\n          variables: {\n            text: newText,\n          },\n          // The optimistic response has all of the fields that are included in\n          // the GraphQL mutation document below.\n          optimisticResponse: {\n            createTodo: {\n              id: -1, // A temporary id. The server decides the real id.\n              text: newText,\n              completed: false,\n            },\n          },\n        });\n      }}\n    >\n      Add Todo\n    </button>\n  );\n}\n\nexport default graphql(gql`\n  mutation CreateTodo ($text: String!) {\n    createTodo(text: $text) {\n      id\n      text\n      completed\n    }\n  }\n`)(MyComponent);\n```\n\n### `options.update`\n\nThis option allows you to update your store based on your mutation’s result. By default Apollo Client will update all of the overlapping nodes in your store. Anything that shares the same id as returned by the `dataIdFromObject` you defined will be updated with the new fields from your mutation results. However, sometimes this alone is not sufficient. Sometimes you may want to update your cache in a way that is dependent on the data currently in your cache. For these updates you may use an `options.update` function.\n\n`options.update` takes two arguments. The first is an instance of a `DataProxy` object which has some methods which will allow you to interact with the data in your store. The second is the response from your mutation - either the optimistic response, or the actual response returned by your server (see the mutation result described in the [mutation render prop](./components/#render-prop-function-1) section for more details).\n\nIn order to change the data in your store call methods on your `DataProxy` instance like [`writeQuery` and `writeFragment`](../../caching/cache-interaction/#writequery-and-writefragment). This will update your cache and reactively re-render any of your GraphQL components which are querying affected data.\n\nTo read the data from the store that you are changing, make sure to use methods on your `DataProxy` like [`readQuery`](../../caching/cache-interaction/#readquery) and [`readFragment`](../../caching/cache-interaction/#readfragment).\n\nFor more information on updating your cache after a mutation with the `options.update` function make sure to read the [Apollo Client technical documentation on the subject](../../data/mutations/#making-all-other-cache-updates).\n\n**Example:**\n\n```js\nconst query = gql`query GetAllTodos { todos { ... } }`;\n\nexport default graphql(\n  gql`\n  mutation CreateTodo ($text: String!) {\n    createTodo(text: $text) { ... }\n  }\n`,\n  {\n    options: {\n      update: (proxy, { data: { createTodo } }) => {\n        const data = proxy.readQuery({ query });\n        data.todos.push(createTodo);\n        proxy.writeQuery({ query, data });\n      },\n    },\n  },\n)(MyComponent);\n```\n\n### `options.refetchQueries`\n\nSometimes when you make a mutation you also want to update the data in your queries so that your users may see an up-to-date user interface. There are more fine-grained ways to update the data in your cache which include [`options.updateQueries`](#optionsupdatequeries), and [`options.update`](#optionsupdate). However, you can update the data in your cache more reliably at the cost of efficiency by using `options.refetchQueries`.\n\n`options.refetchQueries` will execute one or more queries using your network interface and will then normalize the results of those queries into your cache. Allowing you to potentially refetch queries you had fetched before, or fetch brand new queries.\n\n`options.refetchQueries` is either an array of strings or objects, or a function which takes the result of the mutation and returns an array of strings or objects.\n\nIf `options.refetchQueries` is an array of strings then Apollo Client will look for any queries with the same names as the provided strings and will refetch those queries with their current variables. So for example if you have a GraphQL query component with a query named `Comments` (the query may look like: `query Comments { ... }`), and you pass an array of strings containing `Comments` to `options.refetchQueries` then the `Comments` query will be re-executed and when it resolves the latest data will be reflected in your UI.\n\nIf `options.refetchQueries` is an array of objects then the objects must have two properties:\n\n- `query`: Query is a required property that accepts a GraphQL query created with the `gql` template string tag. It should contain a single GraphQL query operation that will be executed once the mutation has completed.\n- `[variables]`: Is an optional object of variables that is required when `query` accepts some variables.\n\nIf an array of objects with this shape is specified then Apollo Client will refetch these queries with their variables.\n\n**Example:**\n\n```js\nexport default graphql(gql`mutation MyMutation { ... }`, {\n  options: {\n    refetchQueries: ['CommentList', 'PostList'],\n  },\n})(MyComponent);\n```\n\n```js\nimport { COMMENT_LIST_QUERY } from '../components/CommentList';\n\nexport default graphql(gql`mutation MyMutation { ... }`, {\n  options: props => ({\n    refetchQueries: [\n      {\n        query: COMMENT_LIST_QUERY,\n      },\n      {\n        query: gql`\n          query GetPostById ($id: ID!) {\n            post(id: $id) {\n              commentCount\n            }\n          }\n        `,\n        variables: {\n          id: props.postID,\n        },\n      },\n    ],\n  }),\n})(MyComponent);\n```\n\n```js\nexport default graphql(gql`mutation MyMutation { ... }`, {\n  options: {\n    refetchQueries: mutationResult => ['CommentList', 'PostList'],\n  },\n})(MyComponent);\n```\n\nPlease note that refetched queries are handled asynchronously, and by default are not necessarily completed before the mutation has completed. If you want to make sure refetched queries are completed before the mutation is considered done (or resolved), set [`options.awaitRefetchQueries`](#optionsawaitrefetchqueries) to `true`.\n\n### `options.awaitRefetchQueries`\n\nQueries refetched using [`options.refetchQueries`](#optionsrefetchqueries) are handled asynchronously, which means by default they are not necessarily completed before the mutation has completed. Setting `options.awaitRefetchQueries` to `true` will make sure refetched queries are completed before the mutation is considered done (or resolved). `options.awaitRefetchQueries` is `false` by default.\n\n### `options.updateQueries`\n\n**Note: We recommend using [`options.update`](#optionsupdate) instead of `updateQueries`. `updateQueries` will be removed in the next version of Apollo Client**\n\nThis option allows you to update your store based on your mutation’s result. By default Apollo Client will update all of the overlapping nodes in your store. Anything that shares the same id as returned by the `dataIdFromObject` you defined will be updated with the new fields from your mutation results. However, sometimes this alone is not sufficient. Sometimes you may want to update your cache in a way that is dependent on the data currently in your cache. For these updates you may use an `options.updateQueries` function.\n\n`options.updateQueries` takes an object where query names are the keys and reducer functions are the values. If you are familiar with Redux, defining your `options.updateQueries` reducers is very similar to defining your Redux reducers. The object looks something like this:\n\n```js\n{\n  Comments: (previousData, { mutationResult, queryVariables }) => nextData,\n}\n```\n\nMake sure that the key of your `options.updateQueries` object corresponds to an actual query that you have made somewhere else in your app. The query name will be the name you put after specifying the `query` operation type. So for example in the following query:\n\n```graphql\nquery Comments {\n  entry(id: 5) {\n    comments {\n      ...\n    }\n  }\n}\n```\n\nThe query name would be `Comments`. If you have not executed a GraphQL query with the name of `Comments` before somewhere in your application, then the reducer function will never be run by Apollo and the key/value pair in `options.updateQueries` will be ignored.\n\nThe first argument to the function you provide as the value for your object will be the previous data for your query. So if your key is `Comments` then the first argument will be the last data object that was returned for your `Comments` query, or the current object that is being rendered by any component using the `Comments` query.\n\nThe second argument to your function value will be an object with three properties:\n\n- `mutationResult`: The `mutationResult` property will represent the result of your mutation after hitting the server. If you provided an [`options.optimisticResponse`](#optionsoptimisticresponse) then `mutationResult` may be that object.\n- `queryVariables`: The last set of variables that the query was executed with. This is helpful because when you specify the query name it will only update the data in the store for your current variable set.\n- `queryName`: This is the name of the query you are updating. It is the same name as the key you provided to `options.updateQueries`.\n\nThe return value of your `options.updateQueries` functions _must_ have the same shape as your first `previousData` argument. However, you _must not_ mutate the `previousData` object. Instead you must create a new object with your changes. Just like in a Redux reducer.\n\n**Example:**\n\n```js\nexport default graphql(\n  gql`\n  mutation SubmitComment ($text: String!) {\n    submitComment(text: $text) { ... }\n  }\n`,\n  {\n    options: {\n      updateQueries: {\n        Comments: (previousData, { mutationResult }) => {\n          const newComment = mutationResult.data.submitComment;\n          // Note how we return a new copy of `previousData` instead of mutating\n          // it. This is just like a Redux reducer!\n          return {\n            ...previousData,\n            entry: {\n              ...previousData.entry,\n              comments: [newComment, ...previousData.entry.comments],\n            },\n          };\n        },\n      },\n    },\n  },\n)(MyComponent);\n```\n\n## `withApollo(component)`\n\n```js\nimport { withApollo } from '@apollo/client/react/hoc';\n```\n\nAn enhancer that provides direct access to your [`ApolloClient`](../core/ApolloClient/) instance. This is useful if you want to do custom logic with Apollo, such as executing one-off queries. By calling this function with the component you want to enhance, `withApollo()` creates a new component that passes an instance of `ApolloClient` as a `client` prop.\n\nMost of the time you want to use `graphql()` instead of `withApollo()`. `graphql()` provides helpful features for working with your GraphQL data. You should only use `withApollo()` if you want the GraphQL client without any of these features.\n\nThis will only be able to provide access to your client if there is an [`<ApolloProvider/>`](./hooks/#the-apolloprovider-component) component higher up in your tree to actually provide the client.\n\n**Example:**\n\n```js\nfunction MyComponent({ client }) {\n  console.log(client);\n}\n\nexport default withApollo(MyComponent);\n```\n"}},"__N_SSG":true}