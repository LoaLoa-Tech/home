{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Access control\nsubSection: advanced\n[meta]-->\n\n# Access control\n\nAccess control enforces who can do what with your GraphQL API.\n\n## Introduction\n\nWhat a user _can_ and _cannot_ do in Keystone depends on two things: _authentication_ and _access control_.\n\nThis guide focuses on the GraphQL API _access control_, which refers to the specific actions an authenticated or anonymous user can take.\n\n_Authentication_, on the other hand, refers to a user identifying themselves in the Admin UI.\nYou can learn about it in the [Authentication guide](/docs/guides/authentication.md).\n\n## GraphQL access control\n\nAccess control is about limiting CRUD (Create, Read, Update, Delete) actions that can be performed based on the current user (authenticated or anonymous).\n\nIn Keystone, both [Lists](/docs/api/create-list.md) and [Fields](/packages/fields/README.md) take an `access` option,\nwhich lets you define rules of access control with fine precision - see [Access control API](/docs/api/access-control.md) docs for more details.\n\n### Example\n\nLet's assume we want set the following access controls for a `User` list:\n\n1. Only admins can _read_ deactivated user accounts.\n2. Only authenticated users can _read/update_ their own email, not any other user's. Admins can _read/update_ anyone's email.\n3. Only admins can see if a password is set. No-one can read their own or other\n   user's passwords.\n   - _NOTE: It is **never** possible in Keystone to read a password via the\n     Admin UI or the API)_\n4. Only authenticated users can update their own password. Admins can update\n   anyone's password.\n\nHere's how we would set that up:\n\n```javascript\nconst { Text, Select, Checkbox, Password } = require('@keystonejs/fields');\n\nconst keystone = new Keystone({...})\n\n// Setup the authentication strategy\nconst authStrategy = keystone.createAuthStrategy({...})\n\nkeystone.createList('User', {\n  access: {\n    // 1. Only admins can read deactivated user accounts\n    read: ({ authentication: { item } }) => {\n      if (item.isAdmin) {\n        return {}; // Don't filter any items for admins\n      }\n      // Approximately; users.filter(user => user.state !== 'deactivated');\n      return {\n        state_not: 'deactivated',\n      };\n    },\n  },\n  fields: {\n    name: { type: Text },\n    address: { type: Text },\n    state: {\n      type: Select,\n      options: ['active', 'deactivated'],\n      defaultValue: 'active',\n    },\n    isAdmin: { type: Checkbox, defaultValue: false },\n    email: {\n      type: Text,\n      // 2. Only authenticated users can read/update their own email, not any other user's.\n      // Admins can read/update anyone's email.\n      access: ({ existingItem, authentication: { item } }) => {\n        return item.isAdmin || existingItem.id === item.id;\n      },\n    },\n    password: {\n      type: Password,\n      access: {\n        // 3. Only admins can see if a password is set. No-one can read their own or other user's passwords.\n        read: ({ authentication }) => authentication.item.isAdmin,\n        // 4. Only authenticated users can update their own password. Admins can update anyone's password.\n        update: ({ existingItem, authentication: { item } }) => {\n          return item.isAdmin || existingItem.id === item.id;\n        },\n      },\n    },\n  },\n});\n```\n\n> **Note:** The code above depends on having a correct [authentication setup](/docs/guides/authentication.md)\n\nWhen logged in to the Admin UI as \"Jess\", will result in a list view like:\n\n| name    | email                 | password | state  |\n| ------- | --------------------- | -------- | ------ |\n| Ticiana |                       |          | active |\n| Jess    | jess@thinkmill.com.au |          | active |\n| Lauren  |                       |          | active |\n\nNote that Jess can only read _his own_ email, and cannot read any passwords.\n\n---\n\nRead more in the [access control API docs](/docs/api/access-control.md).\n"}},"__N_SSG":true}