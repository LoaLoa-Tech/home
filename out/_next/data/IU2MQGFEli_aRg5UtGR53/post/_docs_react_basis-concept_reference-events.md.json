{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: events\ntitle: SyntheticEvent\npermalink: docs/events.html\nlayout: docs\ncategory: Reference\n---\n\nThis reference guide documents the `SyntheticEvent` wrapper that forms part of React's Event System. See the [Handling Events](/docs/handling-events.html) guide to learn more.\n\n## Overview {#overview}\n\nYour event handlers will be passed instances of `SyntheticEvent`, a cross-browser wrapper around the browser's native event. It has the same interface as the browser's native event, including `stopPropagation()` and `preventDefault()`, except the events work identically across all browsers. \n\nIf you find that you need the underlying browser event for some reason, simply use the `nativeEvent` attribute to get it. The synthetic events are different from, and do not map directly to, the browser's native events. For example in `onMouseLeave` `event.nativeEvent` will point to a `mouseout` event. The specific mapping is not part of the public API and may change at any time. Every `SyntheticEvent` object has the following attributes:\n\n```javascript\nboolean bubbles\nboolean cancelable\nDOMEventTarget currentTarget\nboolean defaultPrevented\nnumber eventPhase\nboolean isTrusted\nDOMEvent nativeEvent\nvoid preventDefault()\nboolean isDefaultPrevented()\nvoid stopPropagation()\nboolean isPropagationStopped()\nvoid persist()\nDOMEventTarget target\nnumber timeStamp\nstring type\n```\n\n> Note:\n>\n> As of v17, `e.persist()` doesn't do anything because the `SyntheticEvent` is no longer [pooled](/docs/legacy-event-pooling.html).\n\n> Note:\n>\n> As of v0.14, returning `false` from an event handler will no longer stop event propagation. Instead, `e.stopPropagation()` or `e.preventDefault()` should be triggered manually, as appropriate.\n\n## Supported Events {#supported-events}\n\nReact normalizes events so that they have consistent properties across different browsers.\n\nThe event handlers below are triggered by an event in the bubbling phase. To register an event handler for the capture phase, append `Capture` to the event name; for example, instead of using `onClick`, you would use `onClickCapture` to handle the click event in the capture phase.\n\n- [Clipboard Events](#clipboard-events)\n- [Composition Events](#composition-events)\n- [Keyboard Events](#keyboard-events)\n- [Focus Events](#focus-events)\n- [Form Events](#form-events)\n- [Generic Events](#generic-events)\n- [Mouse Events](#mouse-events)\n- [Pointer Events](#pointer-events)\n- [Selection Events](#selection-events)\n- [Touch Events](#touch-events)\n- [UI Events](#ui-events)\n- [Wheel Events](#wheel-events)\n- [Media Events](#media-events)\n- [Image Events](#image-events)\n- [Animation Events](#animation-events)\n- [Transition Events](#transition-events)\n- [Other Events](#other-events)\n\n* * *\n\n## Reference {#reference}\n\n### Clipboard Events {#clipboard-events}\n\nEvent names:\n\n```\nonCopy onCut onPaste\n```\n\nProperties:\n\n```javascript\nDOMDataTransfer clipboardData\n```\n\n* * *\n\n### Composition Events {#composition-events}\n\nEvent names:\n\n```\nonCompositionEnd onCompositionStart onCompositionUpdate\n```\n\nProperties:\n\n```javascript\nstring data\n\n```\n\n* * *\n\n### Keyboard Events {#keyboard-events}\n\nEvent names:\n\n```\nonKeyDown onKeyPress onKeyUp\n```\n\nProperties:\n\n```javascript\nboolean altKey\nnumber charCode\nboolean ctrlKey\nboolean getModifierState(key)\nstring key\nnumber keyCode\nstring locale\nnumber location\nboolean metaKey\nboolean repeat\nboolean shiftKey\nnumber which\n```\n\nThe `key` property can take any of the values documented in the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values).\n\n* * *\n\n### Focus Events {#focus-events}\n\nEvent names:\n\n```\nonFocus onBlur\n```\n\nThese focus events work on all elements in the React DOM, not just form elements.\n\nProperties:\n\n```js\nDOMEventTarget relatedTarget\n```\n\n#### onFocus {#onfocus}\n\nThe `onFocus` event is called when the element (or some element inside of it) receives focus. For example, it's called when the user clicks on a text input.\n\n```javascript\nfunction Example() {\n  return (\n    <input\n      onFocus={(e) => {\n        console.log('Focused on input');\n      }}\n      placeholder=\"onFocus is triggered when you click this input.\"\n    />\n  )\n}\n```\n\n#### onBlur {#onblur}\n\nThe `onBlur` event handler is called when focus has left the element (or left some element inside of it). For example, it's called when the user clicks outside of a focused text input.\n\n```javascript\nfunction Example() {\n  return (\n    <input\n      onBlur={(e) => {\n        console.log('Triggered because this input lost focus');\n      }}\n      placeholder=\"onBlur is triggered when you click this input and then you click outside of it.\"\n    />\n  )\n}\n```\n\n#### Detecting Focus Entering and Leaving {#detecting-focus-entering-and-leaving}\n\nYou can use the `currentTarget` and `relatedTarget` to differentiate if the focusing or blurring events originated from _outside_ of the parent element. Here is a demo you can copy and paste that shows how to detect focusing a child, focusing the element itself, and focus entering or leaving the whole subtree.\n\n```javascript\nfunction Example() {\n  return (\n    <div\n      tabIndex={1}\n      onFocus={(e) => {\n        if (e.currentTarget === e.target) {\n          console.log('focused self');\n        } else {\n          console.log('focused child', e.target);\n        }\n        if (!e.currentTarget.contains(e.relatedTarget)) {\n          // Not triggered when swapping focus between children\n          console.log('focus entered self');\n        }\n      }}\n      onBlur={(e) => {\n        if (e.currentTarget === e.target) {\n          console.log('unfocused self');\n        } else {\n          console.log('unfocused child', e.target);\n        }\n        if (!e.currentTarget.contains(e.relatedTarget)) {\n          // Not triggered when swapping focus between children\n          console.log('focus left self');\n        }\n      }}\n    >\n      <input id=\"1\" />\n      <input id=\"2\" />\n    </div>\n  );\n}\n```\n\n* * *\n\n### Form Events {#form-events}\n\nEvent names:\n\n```\nonChange onInput onInvalid onReset onSubmit \n```\n\nFor more information about the onChange event, see [Forms](/docs/forms.html).\n\n* * *\n\n### Generic Events {#generic-events}\n\nEvent names:\n\n```\nonError onLoad\n```\n\n* * *\n\n### Mouse Events {#mouse-events}\n\nEvent names:\n\n```\nonClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit\nonDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave\nonMouseMove onMouseOut onMouseOver onMouseUp\n```\n\nThe `onMouseEnter` and `onMouseLeave` events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.\n\nProperties:\n\n```javascript\nboolean altKey\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nnumber pageX\nnumber pageY\nDOMEventTarget relatedTarget\nnumber screenX\nnumber screenY\nboolean shiftKey\n```\n\n* * *\n\n### Pointer Events {#pointer-events}\n\nEvent names:\n\n```\nonPointerDown onPointerMove onPointerUp onPointerCancel onGotPointerCapture\nonLostPointerCapture onPointerEnter onPointerLeave onPointerOver onPointerOut\n```\n\nThe `onPointerEnter` and `onPointerLeave` events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.\n\nProperties:\n\nAs defined in the [W3 spec](https://www.w3.org/TR/pointerevents/), pointer events extend [Mouse Events](#mouse-events) with the following properties:\n\n```javascript\nnumber pointerId\nnumber width\nnumber height\nnumber pressure\nnumber tangentialPressure\nnumber tiltX\nnumber tiltY\nnumber twist\nstring pointerType\nboolean isPrimary\n```\n\nA note on cross-browser support:\n\nPointer events are not yet supported in every browser (at the time of writing this article, supported browsers include: Chrome, Firefox, Edge, and Internet Explorer). React deliberately does not polyfill support for other browsers because a standard-conform polyfill would significantly increase the bundle size of `react-dom`.\n\nIf your application requires pointer events, we recommend adding a third party pointer event polyfill.\n\n* * *\n\n### Selection Events {#selection-events}\n\nEvent names:\n\n```\nonSelect\n```\n\n* * *\n\n### Touch Events {#touch-events}\n\nEvent names:\n\n```\nonTouchCancel onTouchEnd onTouchMove onTouchStart\n```\n\nProperties:\n\n```javascript\nboolean altKey\nDOMTouchList changedTouches\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nboolean shiftKey\nDOMTouchList targetTouches\nDOMTouchList touches\n```\n\n* * *\n\n### UI Events {#ui-events}\n\nEvent names:\n\n```\nonScroll\n```\n\n>Note\n>\n>Starting with React 17, the `onScroll` event **does not bubble** in React. This matches the browser behavior and prevents the confusion when a nested scrollable element fires events on a distant parent.\n\nProperties:\n\n```javascript\nnumber detail\nDOMAbstractView view\n```\n\n* * *\n\n### Wheel Events {#wheel-events}\n\nEvent names:\n\n```\nonWheel\n```\n\nProperties:\n\n```javascript\nnumber deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ\n```\n\n* * *\n\n### Media Events {#media-events}\n\nEvent names:\n\n```\nonAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted\nonEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay\nonPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend\nonTimeUpdate onVolumeChange onWaiting\n```\n\n* * *\n\n### Image Events {#image-events}\n\nEvent names:\n\n```\nonLoad onError\n```\n\n* * *\n\n### Animation Events {#animation-events}\n\nEvent names:\n\n```\nonAnimationStart onAnimationEnd onAnimationIteration\n```\n\nProperties:\n\n```javascript\nstring animationName\nstring pseudoElement\nfloat elapsedTime\n```\n\n* * *\n\n### Transition Events {#transition-events}\n\nEvent names:\n\n```\nonTransitionEnd\n```\n\nProperties:\n\n```javascript\nstring propertyName\nstring pseudoElement\nfloat elapsedTime\n```\n\n* * *\n\n### Other Events {#other-events}\n\nEvent names:\n\n```\nonToggle\n```\n"}},"__N_SSG":true}