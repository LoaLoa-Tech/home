{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Relationship migration\n[meta]-->\n\n# Relationship migration guide\n\nIn the [`Arcade`](/docs/discussions/new-data-schema.md) release of Keystone we [changed the database schema](/docs/discussions/new-data-schema.md) which Keystone uses to store its data.\nThis means that if you are upgrading to these new packages you will need to perform a migration on your database in order for it to continue working.\n\nThis document will help you understand the changes to the database schema, which will help you understand the migrations you need to perform.\n\nWe recommend familiarising yourself with the [relationships](/docs/discussions/relationships.md) documentation to make sure you understand the terminology used in this document.\n\n> **Note:** If you're starting a new project today which includes the [`Arcade`](/docs/discussions/new-data-schema.md) release of Keystone (check your `package.json`), there is no action required; you already have the latest and greatest database schema.\n> If you have an existing project which you have upgraded to the [`Arcade`](/docs/discussions/new-data-schema.md) release of Keystone; read on.\n\n## Overview\n\nThere are four steps to updating your database:\n\n1. Take a backup of your production database.\n2. Identify the changes required for your system.\n3. Apply the changes to your database.\n4. Deploy and test your application.\n\nThe specifics of how to do each of these steps will depend on the particulars of your deployment.\n\n## Database backup\n\nIt is vitally important that you take a backup of your database before performing any changes.\nIt is also crucial that you are able to restore your database if need be.\n\nIf you are managing your own database, please consult the documentation for your database.\nIf you are using a managed database, you should consult the documentation for your service, as they likely already provide systems for backing up and restoring your database.\n\n> **Important:** Making changes to your database schema includes a risk of **complete data loss** if you make a mistake. Do not attempt updating your database unless you are certain you can safely recover from a data loss event.\n\n### MongoDB\n\nThe [official MongoDB documentation](https://docs.mongodb.com/manual/tutorial/backup-and-restore-tools/) provides details on how to use `mongodump` and `mongorestore` to backup and restore your database.\n\n### PostgreSQL\n\nThe [official PostgreSQL documentation](https://www.postgresql.org/docs/12/backup.html) provides a number of different techniques for backing up and restoring your database.\n\n## Identify required changes\n\nThe next step is to identify the changes you need to make to your database.\nTo assist with this you can use the command `keystone upgrade-relationships`.\nThis tool will analyse your relationships and generate a summary of the changes you need to make in your database.\nWe recommend adding it as a script into your `package.json` file and running it with `yarn`.\n\n```bash\nkeystone upgrade-relationships\n```\n\nBy default this command will look for an export called `keystone` in your `index.js` file.\nIf you have a custom server setup, you can indicate a different entry file with\n\n```bash\nkeystone upgrade-relationships --entry <filename>\n```\n\nYour entry file must export a `Keystone` object called `keystone`, and this needs to have all of your lists configured using `createList`.\nThis command will not connect to your database and will not start any express servers.\n\nThe output you see will give you a summary of all the relationships in your system, and details of what actions you need to take to update your database.\n\n#### MongoDB\n\n```shell title=\"Example Output\" showLanguage=false allowCopy=false\nℹ Command: keystone upgrade-relationships\nOne-sided: one to many\n  Todo.author -> User\n    * No action required\nOne-sided: many to many\n  Todo.reviewers -> User\n    * Create a collection todo_reviewers_manies with fields Todo_left_id and User_right_id\n    * Move the data from todos.reviewers into todo_reviewers_manies\n    * Delete todos.reviewers\nTwo-sided: one to one\n  Todo.leadAuthor -> User.leadPost\n    * Delete users.leadPost\nTwo-sided: one to many\n  Todo.publisher -> User.published\n    * Delete users.published\nTwo-sided: many to many\n  Todo.readers -> User.readPosts\n    * Create a collection todo_readers_user_readposts with fields Todo_left_id and User_right_id\n    * Move the data from todos.readers into todo_readers_user_readposts\n    * Delete todos.readers\n    * Delete users.readPosts\n```\n\n#### PostgreSQL\n\n```shell title=\"Example Output\" showLanguage=false allowCopy=false\nℹ Command: keystone upgrade-relationships\nOne-sided: one to many\n  Todo.author -> User\n    * No action required\nOne-sided: many to many\n  Todo.reviewers -> User\n    * Rename table Todo_reviewers to Todo_reviewers_many\n    * Rename column Todo_id to Todo_left_id\n    * Rename column User_id to User_right_id\nTwo-sided: one to one\n  Todo.leadAuthor -> User.leadPost\n    * Delete column User.leadPost\nTwo-sided: one to many\n  Todo.publisher -> User.published\n    * Drop table User_published\nTwo-sided: many to many\n  Todo.readers -> User.readPosts\n    * Drop table User_readPosts\n    * Rename table Todo_readers to Todo_readers_User_readPosts\n    * Rename column Todo_id to Todo_left_id\n    * Rename column User_id to User_right_id\n```\n\n### Generate migrations\n\nThe `upgrade-relationships` script can also be used to generate migration code which you can directly run against your database using the `--migration` flag.\n\n```bash\nkeystone upgrade-relationships --migration\n```\n\n> **Note:** Always be careful when running auto-generated migration code.\n> Be sure to manually verify that the changes are doing what you want, as incorrect migrations can lead to data loss.\n\n# \n\n> **Important:** While we have taken every effort to ensure the auto-generated migration code is correct, we cannot account for every possible scenario.\n> Again; please verify the changes work as expected to avoid data loss.\n\n#### MongoDB\n\n```javascript title=\"Example migration\" allowCopy=false showLanguage=false\ndb.todos.find({}).forEach(function (doc) {\n  (doc.reviewers || []).forEach(function (itemId) {\n    db.todo_reviewers_manies.insert({ Todo_left_id: doc._id, User_right_id: itemId });\n  });\n});\ndb.todos.updateMany({}, { $unset: { reviewers: 1 } });\ndb.users.updateMany({}, { $unset: { leadPost: 1 } });\ndb.users.updateMany({}, { $unset: { published: 1 } });\ndb.todos.find({}).forEach(function (doc) {\n  (doc.readers || []).forEach(function (itemId) {\n    db.todo_readers_user_readposts.insert({ Todo_left_id: doc._id, User_right_id: itemId });\n  });\n});\ndb.todos.updateMany({}, { $unset: { readers: 1 } });\ndb.users.updateMany({}, { $unset: { readPosts: 1 } });\n```\n\n#### PostgreSQL\n\n```SQL title=\"Example migration\" allowCopy=false\nALTER TABLE public.\"Todo_reviewers\" RENAME TO \"Todo_reviewers_many\";\nALTER TABLE public.\"Todo_reviewers_many\" RENAME COLUMN \"Todo_id\" TO \"Todo_left_id\";\nALTER TABLE public.\"Todo_reviewers_many\" RENAME COLUMN \"User_id\" TO \"User_right_id\";\nALTER TABLE public.\"User\" DROP COLUMN \"leadPost\";\nDROP TABLE public.\"User_published\"\nDROP TABLE public.\"User_readPosts\"\nALTER TABLE public.\"Todo_readers\" RENAME TO \"Todo_readers_User_readPosts\";\nALTER TABLE public.\"Todo_readers_User_readPosts\" RENAME COLUMN \"Todo_id\" TO \"Todo_left_id\";\nALTER TABLE public.\"Todo_readers_User_readPosts\" RENAME COLUMN \"User_id\" TO \"User_right_id\";\n```\n\n### Cheatsheet\n\nIf you want a handy reference to consult without needing to execute scripts then please consult the [new schema cheatsheet](/docs/guides/new-schema-cheatsheet.md).\n\n## Apply changes\n\nThe next step is to apply the required changes to your database.\nKeystone provides a lot of flexibility in how and where you deploy your database.\nThis means that there is no one-size-fits-all solution for the best approach to making changes to your database.\n\nIf you already have an established schema migration process then you can simply continue to follow that process, using the output of the `upgrade-relationships` script as the content for a new migration.\n\nIf you do not have an existing schema migration process then the best place to start is the [migrations guide](/docs/guides/migrations.md).\nThis document outlines a number of different approaches to performing database migrations.\n\n## Test and deploy\n\nThe final step is to test and deploy your upgraded Keystone system.\nIf you have successfully migrated your database then you should be able to start Keystone and have it connect to your updated database.\nKeystone does not dictate how or where you run your deployments, so you should follow your existing processes for this step.\n\nIt is advisable to do a test deployment in a controlled, non-production environment.\nThis will allow you to verify that your application is working correctly with the upgraded database.\n\n## Summary\n\nCongratulations, you have upgraded your Keystone system to the new and improved data schema!\nIf you experience any issues with the above process, please [create an issue](https://github.com/keystonejs/keystone/issues) on Github and we will endeavour to help you out.\n"}},"__N_SSG":true}