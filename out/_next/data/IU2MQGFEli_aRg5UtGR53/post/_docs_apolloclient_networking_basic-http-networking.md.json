{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Basic HTTP networking\ndescription: Communicate with a GraphQL server over HTTP\n---\n\nApollo Client has built-in support for communicating with a GraphQL server over HTTP. To set up this communication, provide the server's URL as the `uri` parameter to the `ApolloClient` constructor:\n\n```js\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://api.example.com',\n  cache: new InMemoryCache()\n});\n```\n\nIf you provide this parameter, Apollo Client sends all GraphQL operations (queries and mutations) to the specified URL over HTTP.\n\n## Including credentials in requests\n\nApollo Client can include user credentials (basic auth, cookies, etc.) in the HTTP requests it makes to a GraphQL server. By default, credentials are included only if the server is hosted at the same origin as the application using Apollo Client. You can adjust this behavior by providing a value for the `credentials` parameter to the `ApolloClient` constructor:\n\n```js\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://api.example.com',\n  cache: new InMemoryCache(),\n  // Enable sending cookies over cross-origin requests\n  credentials: 'include'\n});\n```\n\nThe following values for `credentials` are supported:\n\n| Option | Description |\n| - | - |\n| `same-origin` | Send user credentials (cookies, basic http auth, etc.) if the server's URL is on the same origin as the requesting client. This is the default value. |\n| `omit` | Never send or receive credentials. |\n| `include` | Always send user credentials (cookies, basic http auth, etc.), even for cross-origin requests. |\n\nFor more information, see [`Request.credentials`](https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials).\n\n## Customizing request headers\n\nYou can specify the names and values of custom headers to include in every HTTP request to a GraphQL server. To do so, provide the `headers` parameter to the  `ApolloClient` constructor, like so:\n\n```js\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://api.example.com',\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: localStorage.getItem('token'),\n    'client-name': 'WidgetX Ecom [web]',\n    'client-version': '1.0.0'\n  }\n});\n```\n"}},"__N_SSG":true}