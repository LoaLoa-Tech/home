{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Learn to add and access environment variables in your Next.js application.\n---\n\n# Environment Variables\n\n> This document is for Next.js versions 9.4 and up. If youâ€™re using an older version of Next.js, upgrade or refer to [Environment Variables in next.config.js](/docs/api-reference/next.config.js/environment-variables.md).\n\n<details open>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/environment-variables\">Environment Variables</a></li>\n  </ul>\n</details>\n\nNext.js comes with built-in support for environment variables, which allows you to do the following:\n\n- [Use `.env.local` to load environment variables](#loading-environment-variables)\n- [Expose environment variables to the browser](#exposing-environment-variables-to-the-browser)\n\n## Loading Environment Variables\n\nNext.js has built-in support for loading environment variables from `.env.local` into `process.env`.\n\nAn example `.env.local`:\n\n```bash\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n```\n\nThis loads `process.env.DB_HOST`, `process.env.DB_USER`, and `process.env.DB_PASS` into the Node.js environment automatically allowing you to use them in [Next.js data fetching methods](/docs/basic-features/data-fetching.md) and [API routes](/docs/api-routes/introduction.md).\n\nFor example, using [`getStaticProps`](/docs/basic-features/data-fetching.md#getstaticprops-static-generation):\n\n```js\n// pages/index.js\nexport async function getStaticProps() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n```\n\n> **Note**: Next.js will automatically expand variables (`$VAR`) inside of your `.env*` files.\n> This allows you to reference other secrets, like so:\n>\n> ```bash\n> # .env\n> HOSTNAME=localhost\n> PORT=8080\n> HOST=http://$HOSTNAME:$PORT\n> ```\n>\n> If you are trying to use a variable with a `$` in the actual value, it needs to be escaped like so: `\\$`.\n>\n> For example:\n>\n> ```bash\n> # .env\n> A=abc\n>\n> # becomes \"preabc\"\n> WRONG=pre$A\n>\n> # becomes \"pre$A\"\n> CORRECT=pre\\$A\n> ```\n\n## Exposing Environment Variables to the Browser\n\nBy default all environment variables loaded through `.env.local` are only available in the Node.js environment, meaning they won't be exposed to the browser.\n\nIn order to expose a variable to the browser you have to prefix the variable with `NEXT_PUBLIC_`. For example:\n\n```bash\nNEXT_PUBLIC_ANALYTICS_ID=abcdefghijk\n```\n\nThis loads `process.env.NEXT_PUBLIC_ANALYTICS_ID` into the Node.js environment automatically. Allowing you to use it anywhere in your code. The value will be inlined into JavaScript sent to the browser because of the `NEXT_PUBLIC_` prefix.\n\n```js\n// pages/index.js\nimport setupAnalyticsService from '../lib/my-analytics-service'\n\n// NEXT_PUBLIC_ANALYTICS_ID can be used here as it's prefixed by NEXT_PUBLIC_\nsetupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)\n\nfunction HomePage() {\n  return <h1>Hello World</h1>\n}\n\nexport default HomePage\n```\n\n## Default Environment Variables\n\nIn general only one `.env.local` file is needed. However, sometimes you might want to add some defaults for the `development` (`next dev`) or `production` (`next start`) environment.\n\nNext.js allows you to set defaults in `.env` (all environments), `.env.development` (development environment), and `.env.production` (production environment).\n\n`.env.local` always overrides the defaults set.\n\n> **Note**: `.env`, `.env.development`, and `.env.production` files should be included in your repository as they define defaults. **`.env*.local` should be added to `.gitignore`**, as those files are intended to be ignored. `.env.local` is where secrets can be stored.\n\n## Environment Variables on Vercel\n\nWhen deploying on [Vercel](https://vercel.com) you can configure secrets in the [Environment Variables](https://vercel.com/docs/v2/build-step#environment-variables) section of the project in the Vercel dashboard.\n\nYou can still use `.env`, `.env.development` and `.env.production` to add defaults.\n\nIf you've configured [Development Environment Variables](https://vercel.com/docs/v2/build-step#development-environment-variables) you can pull them into a `.env.local` for usage on your local machine using the following command:\n\n```bash\nvercel env pull .env.local\n```\n\n## Test Environment Variables\n\nApart from `development` and `production` environments, there is a 3rd option available: `test`. In the same way you can set defaults for development or production environments, you can do the same with `.env.test` file for testing environment (though this one is not so common as the previous two).\n\nThis one is useful when running tests with tools like `jest` or `cypress` where you need to set specific environment vars only for testing purposes. Test default values will be loaded if `NODE_ENV` is set to `test`, though you usually don't need to do this manually as testing tools will address it for you.\n\nThere is a small difference between `test` environment, and both `development` and `production` that you need to bear in mind: `.env.local` won't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use same env defaults across different executions by ignoring your `.env.local` (which is intended to override the default set).\n\n> **Note**: similar to Default Environment Variables, `.env.test` file should be included in your repository, but `.env.test.local` shouldn't, as `.env*.local` are intended to be ignored through `.gitignore`.\n"}},"__N_SSG":true}