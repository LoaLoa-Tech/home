{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Authentication\n---\n\nUnless all of the data you are loading is completely public, your app has some sort of users, accounts and permissions systems. If different users have different permissions in your application, then you need a way to tell the server which user is associated with each request.\n\nApollo Client uses the ultra flexible [Apollo Link](https://www.apollographql.com/docs/link) that includes several options for authentication.\n\n## Cookie\n\nIf your app is browser based and you are using cookies for login and session management with a backend, it's very easy to tell your network interface to send the cookie along with every request. You just need to pass the credentials option. e.g.  `credentials: 'same-origin'` as shown below, if your backend server is the same domain or else `credentials: 'include'` if your backend is a different domain.\n\n```js\nconst link = createHttpLink({\n  uri: '/graphql',\n  credentials: 'same-origin'\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n});\n```\n\nThis option is simply passed through to the [`fetch` implementation](https://github.com/github/fetch) used by the HttpLink when sending the query.\n\nNote: the backend must also allow credentials from the requested origin. e.g. if using the popular 'cors' package from npm in node.js, the following settings would work in tandem with the above apollo client settings:\n\n```js\n// enable cors\nvar corsOptions = {\n  origin: '<insert uri of front-end domain>',\n  credentials: true // <-- REQUIRED backend setting\n};\napp.use(cors(corsOptions));\n```\n\n## Header\n\nAnother common way to identify yourself when using HTTP is to send along an authorization header. It's easy to add an `authorization` header to every HTTP request by chaining together Apollo Links. In this example, we'll pull the login token from `localStorage` every time a request is sent:\n\n```js\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n```\n\nThe server can use that header to authenticate the user and attach it to the GraphQL execution context, so resolvers can modify their behavior based on a user's role and permissions.\n\n## Reset store on logout\n\nSince Apollo caches all of your query results, it's important to get rid of them when the login state changes.\n\nThe easiest way to ensure that the UI and store state reflects the current user's permissions is to call `client.resetStore()` after your login or logout process has completed. This will cause the store to be cleared and all active queries to be refetched. If you just want the store to be cleared and don't want to refetch active queries, use `client.clearStore()` instead. Another option is to reload the page, which will have a similar effect.\n\n```jsx\nconst PROFILE_QUERY = gql`\n  query CurrentUserForLayout {\n    currentUser {\n      login\n      avatar_url\n    }\n  }\n`;\n\nfunction Profile() {\n  const { client, loading, data: { currentUser } } = useQuery(\n    PROFILE_QUERY,\n    { fetchPolicy: \"network-only\" }\n  );\n\n  if (loading) {\n    return <p className=\"navbar-text navbar-right\">Loading...</p>;\n  }\n\n  if (currentUser) {\n    return (\n      <span>\n        <p className=\"navbar-text navbar-right\">\n          {currentUser.login}\n          &nbsp;\n          <button\n            onClick={() => {\n              // call your auth logout code then reset store\n              App.logout().then(() => client.resetStore());\n            }}\n          >\n            Log out\n          </button>\n        </p>\n      </span>\n    );\n  }\n\n  return (\n    <p className=\"navbar-text navbar-right\">\n      <a href=\"/login/github\">Log in with GitHub</a>\n    </p>\n  );\n}\n```\n"}},"__N_SSG":true}