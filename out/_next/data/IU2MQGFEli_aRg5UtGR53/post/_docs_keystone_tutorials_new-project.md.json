{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: tutorials\ntitle: Creating a new project\norder: 1\n[meta]-->\n\n# Creating a new project\n\nIn this guide we will learn how to manually create and run a new Keystone project.\n\n## Database preparation\n\nBefore running a Keystone application you need to ensure you have a database set\nup. This tutorial requires you to have a MongoDB database setup. Follow the\n[database setup instructions](/docs/quick-start/adapters.md) here to ensure your\ndatabase is ready to go.\n\n## Initialisation\n\nFirst things first. Create a directory for your project and initialise it:\n\n```shell allowCopy=false showLanguage=false\nmkdir new-project\ncd new-project\nyarn init\n```\n\nLet's start with the minimal setup. We will need two packages here:\n`@keystonejs/keystone`, which is the core of Keystone, and\n`@keystonejs/adapter-mongoose`, which allows our app to connect to MongoDB:\n\n```shell\nyarn add @keystonejs/keystone @keystonejs/adapter-mongoose\n```\n\n## First steps\n\nAfter installation we can start coding. The main entry point of a Keystone app\nis the `index.js` file in the root folder. Create it and add the following:\n\n```javascript title=index.js\nconst { Keystone } = require('@keystonejs/keystone');\nconst { MongooseAdapter } = require('@keystonejs/adapter-mongoose');\n\nconst keystone = new Keystone({\n  adapter: new MongooseAdapter({ mongoUri: 'mongodb://localhost/keystone' }),\n});\n```\n\nYou can specify any suitable name for your project. Note that we created an\ninstance of the [Mongoose adapter](/packages/adapter-mongoose/README.md) and\npassed it to `Keystone`'s constructor.\n\nNow we can export our `Keystone` instance and make it available to run. Add the\nfollowing to the end of `index.js`:\n\n```javascript title=index.js\nmodule.exports = {\n  keystone,\n};\n```\n\nAlthough our app doesn't do much yet, it _is_ able to start and connect to a\ndatabase.\n\n<!-- FIXME:TL How exactly does this happen? How do we know? -->\n\n## GraphQL setup\n\nAs in the previous step, install the necessary package.\n\n```shell\nyarn add @keystonejs/app-graphql\n```\n\nImport it in index.js:\n\n```javascript title=index.js\nconst { GraphQLApp } = require('@keystonejs/app-graphql');\n```\n\nAnd add a new array export named `apps` with a new instance of `GraphQLApp`, like so:\n\n```javascript title=index.js\nmodule.exports = {\n  keystone,\n  apps: [new GraphQLApp()],\n};\n```\n\n## Adding a list\n\nIn order to be able to start an app we need to add at least one `List`. A `List`\nis a model that is compatible with Keystone's Admin UI.\n\nLists are composed of `fields`. To add fields to a list, we must install the\n`@keystonejs/fields` package:\n\n```shell\nyarn add @keystonejs/fields\n```\n\nIn this example the field type `Text` is used, which must be `required` in `index.js`:\n\n```javascript title=index.js\nconst { Text } = require('@keystonejs/fields');\n```\n\nCreate your first list in `index.js` by adding the following before the module\nexport and after instantiating `Keystone`:\n\n```javascript title=index.js\nkeystone.createList('Todo', {\n  fields: {\n    name: { type: Text },\n  },\n});\n```\n\nThis code snippet creates a List named `Todo`. The second argument is a config\nobject. For now it has only one key (`fields`) which is used to define the\nschema for the newly created model.\n\nIn our example, the `Todo` list has a single field called `name` of type `Text`.\n\n## Starting the application\n\nAdd the following to `package.json`:\n\n```json title=package.json\n\"scripts\": {\n  \"start:dev\": \"keystone\"\n}\n```\n\nNow ensure that `mongod` is running and execute the start script:\n\n```shell\nyarn start:dev\n```\n\nYou should see something like this:\n\n```shell allowCopy=false showLanguage=false\nâœ” Keystone instance is ready ðŸš€\nðŸ”— GraphQL Playground:   http://localhost:3000/admin/graphiql\nðŸ”— GraphQL API:          http://localhost:3000/admin/api\n```\n\nNow it's time to check those routes in browser to ensure that everything works\nas expected.\n\n## Summary\n\nCongratulations, you have just set up your very first Keystone application;\nincluding a GraphQL API and a GraphQL Playground which you start interacting\nwith.\n\nIn future tutorials we will show you how to execute queries and mutations\nwith this API, and launch a browser based Admin UI to explore and interact with\nyour data.\n"}},"__N_SSG":true}