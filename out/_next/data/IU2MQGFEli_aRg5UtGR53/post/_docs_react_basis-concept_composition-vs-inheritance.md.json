{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: composition-vs-inheritance\ntitle: Composition vs Inheritance\npermalink: docs/composition-vs-inheritance.html\nredirect_from:\n  - \"docs/multiple-components.html\"\nprev: lifting-state-up.html\nnext: thinking-in-react.html\n---\n\nReact has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.\n\nIn this section, we will consider a few problems where developers new to React often reach for inheritance, and show how we can solve them with composition.\n\n## Containment {#containment}\n\nSome components don't know their children ahead of time. This is especially common for components like `Sidebar` or `Dialog` that represent generic \"boxes\".\n\nWe recommend that such components use the special `children` prop to pass children elements directly into their output:\n\n```js{4}\nfunction FancyBorder(props) {\n  return (\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      {props.children}\n    </div>\n  );\n}\n```\n\nThis lets other components pass arbitrary children to them by nesting the JSX:\n\n```js{4-9}\nfunction WelcomeDialog() {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1 className=\"Dialog-title\">\n        Welcome\n      </h1>\n      <p className=\"Dialog-message\">\n        Thank you for visiting our spacecraft!\n      </p>\n    </FancyBorder>\n  );\n}\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/ozqNOV?editors=0010)**\n\nAnything inside the `<FancyBorder>` JSX tag gets passed into the `FancyBorder` component as a `children` prop. Since `FancyBorder` renders `{props.children}` inside a `<div>`, the passed elements appear in the final output.\n\nWhile this is less common, sometimes you might need multiple \"holes\" in a component. In such cases you may come up with your own convention instead of using `children`:\n\n```js{5,8,18,21}\nfunction SplitPane(props) {\n  return (\n    <div className=\"SplitPane\">\n      <div className=\"SplitPane-left\">\n        {props.left}\n      </div>\n      <div className=\"SplitPane-right\">\n        {props.right}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <SplitPane\n      left={\n        <Contacts />\n      }\n      right={\n        <Chat />\n      } />\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/gwZOJp?editors=0010)\n\nReact elements like `<Contacts />` and `<Chat />` are just objects, so you can pass them as props like any other data. This approach may remind you of \"slots\" in other libraries but there are no limitations on what you can pass as props in React.\n\n## Specialization {#specialization}\n\nSometimes we think about components as being \"special cases\" of other components. For example, we might say that a `WelcomeDialog` is a special case of `Dialog`.\n\nIn React, this is also achieved by composition, where a more \"specific\" component renders a more \"generic\" one and configures it with props:\n\n```js{5,8,16-18}\nfunction Dialog(props) {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1 className=\"Dialog-title\">\n        {props.title}\n      </h1>\n      <p className=\"Dialog-message\">\n        {props.message}\n      </p>\n    </FancyBorder>\n  );\n}\n\nfunction WelcomeDialog() {\n  return (\n    <Dialog\n      title=\"Welcome\"\n      message=\"Thank you for visiting our spacecraft!\" />\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/kkEaOZ?editors=0010)\n\nComposition works equally well for components defined as classes:\n\n```js{10,27-31}\nfunction Dialog(props) {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1 className=\"Dialog-title\">\n        {props.title}\n      </h1>\n      <p className=\"Dialog-message\">\n        {props.message}\n      </p>\n      {props.children}\n    </FancyBorder>\n  );\n}\n\nclass SignUpDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSignUp = this.handleSignUp.bind(this);\n    this.state = {login: ''};\n  }\n\n  render() {\n    return (\n      <Dialog title=\"Mars Exploration Program\"\n              message=\"How should we refer to you?\">\n        <input value={this.state.login}\n               onChange={this.handleChange} />\n        <button onClick={this.handleSignUp}>\n          Sign Me Up!\n        </button>\n      </Dialog>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({login: e.target.value});\n  }\n\n  handleSignUp() {\n    alert(`Welcome aboard, ${this.state.login}!`);\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/gwZbYa?editors=0010)\n\n## So What About Inheritance? {#so-what-about-inheritance}\n\nAt Facebook, we use React in thousands of components, and we haven't found any use cases where we would recommend creating component inheritance hierarchies.\n\nProps and composition give you all the flexibility you need to customize a component's look and behavior in an explicit and safe way. Remember that components may accept arbitrary props, including primitive values, React elements, or functions.\n\nIf you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or a class, without extending it.\n"}},"__N_SSG":true}