{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: profiler\ntitle: Profiler API\nlayout: docs\ncategory: Reference\npermalink: docs/profiler.html\n---\n\nThe `Profiler` measures how often a React application renders and what the \"cost\" of rendering is.\nIts purpose is to help identify parts of an application that are slow and may benefit from [optimizations such as memoization](/docs/hooks-faq.html#how-to-memoize-calculations).\n\n> Note:\n>\n> Profiling adds some additional overhead, so **it is disabled in [the production build](/docs/optimizing-performance.html#use-the-production-build)**.\n>\n> To opt into production profiling, React provides a special production build with profiling enabled.\n> Read more about how to use this build at [fb.me/react-profiling](https://fb.me/react-profiling)\n\n## Usage {#usage}\n\nA `Profiler` can be added anywhere in a React tree to measure the cost of rendering that part of the tree.\nIt requires two props: an `id` (string) and an `onRender` callback (function) which React calls any time a component within the tree \"commits\" an update.\n\nFor example, to profile a `Navigation` component and its descendants:\n\n```js{3}\nrender(\n  <App>\n    <Profiler id=\"Navigation\" onRender={callback}>\n      <Navigation {...props} />\n    </Profiler>\n    <Main {...props} />\n  </App>\n);\n```\n\nMultiple `Profiler` components can be used to measure different parts of an application:\n```js{3,6}\nrender(\n  <App>\n    <Profiler id=\"Navigation\" onRender={callback}>\n      <Navigation {...props} />\n    </Profiler>\n    <Profiler id=\"Main\" onRender={callback}>\n      <Main {...props} />\n    </Profiler>\n  </App>\n);\n```\n\n`Profiler` components can also be nested to measure different components within the same subtree:\n```js{3,5,8}\nrender(\n  <App>\n    <Profiler id=\"Panel\" onRender={callback}>\n      <Panel {...props}>\n        <Profiler id=\"Content\" onRender={callback}>\n          <Content {...props} />\n        </Profiler>\n        <Profiler id=\"PreviewPane\" onRender={callback}>\n          <PreviewPane {...props} />\n        </Profiler>\n      </Panel>\n    </Profiler>\n  </App>\n);\n```\n\n> Note\n>\n> Although `Profiler` is a light-weight component, it should be used only when necessary; each use adds some CPU and memory overhead to an application.\n\n## `onRender` Callback {#onrender-callback}\n\nThe `Profiler` requires an `onRender` function as a prop.\nReact calls this function any time a component within the profiled tree \"commits\" an update.\nIt receives parameters describing what was rendered and how long it took.\n\n```js\nfunction onRenderCallback(\n  id, // the \"id\" prop of the Profiler tree that has just committed\n  phase, // either \"mount\" (if the tree just mounted) or \"update\" (if it re-rendered)\n  actualDuration, // time spent rendering the committed update\n  baseDuration, // estimated time to render the entire subtree without memoization\n  startTime, // when React began rendering this update\n  commitTime, // when React committed this update\n  interactions // the Set of interactions belonging to this update\n) {\n  // Aggregate or log render timings...\n}\n```\n\nLet's take a closer look at each of the props:\n\n* **`id: string`** - \nThe `id` prop of the `Profiler` tree that has just committed.\nThis can be used to identify which part of the tree was committed if you are using multiple profilers.\n* **`phase: \"mount\" | \"update\"`** -\nIdentifies whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks.\n* **`actualDuration: number`** -\nTime spent rendering the `Profiler` and its descendants for the current update.\nThis indicates how well the subtree makes use of memoization (e.g. [`React.memo`](/docs/react-api.html#reactmemo), [`useMemo`](/docs/hooks-reference.html#usememo), [`shouldComponentUpdate`](/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate)).\nIdeally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change.\n* **`baseDuration: number`** -\nDuration of the most recent `render` time for each individual component within the `Profiler` tree.\nThis value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization).\n* **`startTime: number`** -\nTimestamp when React began rendering the current update.\n* **`commitTime: number`** -\nTimestamp when React committed the current update.\nThis value is shared between all profilers in a commit, enabling them to be grouped if desirable.\n* **`interactions: Set`** -\nSet of [\"interactions\"](https://fb.me/react-interaction-tracing) that were being traced when the update was scheduled (e.g. when `render` or `setState` were called).\n\n> Note\n>\n> Interactions can be used to identify the cause of an update, although the API for tracing them is still experimental.\n>\n> Learn more about it at [fb.me/react-interaction-tracing](https://fb.me/react-interaction-tracing)\n"}},"__N_SSG":true}