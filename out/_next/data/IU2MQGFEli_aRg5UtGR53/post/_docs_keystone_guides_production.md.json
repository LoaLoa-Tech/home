{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Production checklist\nsubSection: deployment\n[meta]-->\n\n# Production checklist\n\nYes, Keystone can be (and is!) used for production websites. Here's a handy list of tips for using Keystone with real workloads:\n\n## Secure cookies\n\nIn production builds, [Keystone's `cookie` object](/packages/keystone/README.md#config) defaults to\n\n```js\ncookie = {\n  secure: process.env.NODE_ENV === 'production', // Defaults to true in production\n  maxAge: 1000 * 60 * 60 * 24 * 30, // 30 days\n  sameSite: false,\n};\n```\n\nMake sure your server is HTTPS-enabled when `secure` is enabled or you will be unable to log in.\n\n## Session handling\n\n### Cookie secret\n\nMake sure the production deployment sets a long, unguessable value for [Keystone's `cookieSecret`](/packages/keystone/README.md#config).\n\nA randomly generated value is suitable (but keep it secret):\n\n```shell\nopenssl rand -hex 32\n```\n\n### Session store\n\nSessions are stored inside the Keystone app by default, but in production it's recommended to store them in an external server such as Redis instead. You can use [any of the stores that work with `express session`](https://github.com/expressjs/session#compatible-session-stores). The advantages of using an external server are that\n\n- You can restart your app for upgrades without breaking sessions\n- You can replicate your Keystone app for availability, while keeping sessions consistent\n\nThis option can be set using the [sessionStore](/packages/keystone/README.md#sessionstore) property in the `Keystone` constructor configuration object.\n\n## Caching\n\nImprove performance and responsiveness by adding [cache hints](/docs/guides/cache-hints.md) to your lists, fields and custom queries.\n\n## Access control\n\nConfigure [access control](/docs/guides/access-control.md) to limit who can do what with your data.\n\n## DoS hardening\n\nAdd [query limits](/docs/api/create-list.md#querylimits) and [validation](/docs/api/validation.md) to protect your server against maliciously complex queries.\n\n## Using reverse proxies\n\nIt's recommended to run production Javascript servers behind a reverse proxy such as [Nginx](https://nginx.org/), [HAProxy](https://www.haproxy.org/), a CDN or a cloud-based application (layer 7) load balancer. Doing that can improve performance and protect against [Slowloris Dos attacks](https://en.wikipedia.org/wiki/Slowloris_(computer_security)). The express application variable [`trust proxy`](https://expressjs.com/en/guide/behind-proxies.html) must be set to support reverse proxying:\n\n```javascript title=index.js\nmodule.exports = {\n  configureExpress: app => {\n    app.set('trust proxy', true);\n  },\n};\n```\n\n## Environment variables\n\nDon't forget to set the `NODE_ENV` environment variable to `production` when running. Many `npm` libraries check this to enable production mode.\n\n```shell\nNODE_ENV=production keystone start\n```\n\n## Monitoring\n\nIf you care about your app, you'll want to know if something bad happens to it. There are many uptime monitoring service providers who'll regularly ping your app and notify you if it stops working.\n"}},"__N_SSG":true}