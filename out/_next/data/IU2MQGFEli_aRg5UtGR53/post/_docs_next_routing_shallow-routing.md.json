{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: You can use shallow routing to change the URL without triggering a new page change. Learn more here.\n---\n\n# Shallow Routing\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-shallow-routing\">Shallow Routing</a></li>\n  </ul>\n</details>\n\nShallow routing allows you to change the URL without running data fetching methods again, that includes [`getServerSideProps`](/docs/basic-features/data-fetching.md#getserversideprops-server-side-rendering), [`getStaticProps`](/docs/basic-features/data-fetching.md#getstaticprops-static-generation), and [`getInitialProps`](/docs/api-reference/data-fetching/getInitialProps.md).\n\nYou'll receive the updated `pathname` and the `query` via the [`router` object](/docs/api-reference/next/router.md#router-object) (added by [`useRouter`](/docs/api-reference/next/router.md#useRouter) or [`withRouter`](/docs/api-reference/next/router.md#withRouter)), without losing state.\n\nTo enable shallow routing, set the `shallow` option to `true`. Consider the following example:\n\n```jsx\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\n\n// Current URL is '/'\nfunction Page() {\n  const router = useRouter()\n\n  useEffect(() => {\n    // Always do navigations after the first render\n    router.push('/?counter=10', undefined, { shallow: true })\n  }, [])\n\n  useEffect(() => {\n    // The counter changed!\n  }, [router.query.counter])\n}\n\nexport default Page\n```\n\nThe URL will get updated to `/?counter=10`. and the page won't get replaced, only the state of the route is changed.\n\nYou can also watch for URL changes via [`componentDidUpdate`](https://reactjs.org/docs/react-component.html#componentdidupdate) as shown below:\n\n```jsx\ncomponentDidUpdate(prevProps) {\n  const { pathname, query } = this.props.router\n  // verify props have changed to avoid an infinite loop\n  if (query.counter !== prevProps.router.query.counter) {\n    // fetch data based on the new query\n  }\n}\n```\n\n## Caveats\n\nShallow routing **only** works for same page URL changes. For example, let's assume we have another page called `pages/about.js`, and you run this:\n\n```jsx\nrouter.push('/?counter=10', '/about?counter=10', { shallow: true })\n```\n\nSince that's a new page, it'll unload the current page, load the new one and wait for data fetching even though we asked to do shallow routing.\n"}},"__N_SSG":true}