{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Next.js pages are React Components exported in a file in the pages directory. Learn how they work here.\n---\n\n# Pages\n\n> This document is for Next.js versions 9.3 and up. If you're using older versions of Next.js, refer to our [previous documentation](https://nextjs.org/docs/tag/v9.2.2/basic-features/pages).\n\nIn Next.js, a **page** is a [React Component](https://reactjs.org/docs/components-and-props.html) exported from a `.js`, `.jsx`, `.ts`, or `.tsx` file in the `pages` directory. Each page is associated with a route based on its file name.\n\n**Example**: If you create `pages/about.js` that exports a React component like below, it will be accessible at `/about`.\n\n```jsx\nfunction About() {\n  return <div>About</div>\n}\n\nexport default About\n```\n\n### Pages with Dynamic Routes\n\nNext.js supports pages with dynamic routes. For example, if you create a file called `pages/posts/[id].js`, then it will be accessible at `posts/1`, `posts/2`, etc.\n\n> To learn more about dynamic routing, check the [Dynamic Routing documentation](/docs/routing/dynamic-routes.md).\n\n## Pre-rendering\n\nBy default, Next.js **pre-renders** every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO.\n\nEach generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. (This process is called _hydration_.)\n\n### Two forms of Pre-rendering\n\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- [**Static Generation (Recommended)**](#static-generation-recommended): The HTML is generated at **build time** and will be reused on each request.\n- [**Server-side Rendering**](#server-side-rendering): The HTML is generated on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form you'd like to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n\nWe **recommend** using **Static Generation** over Server-side Rendering for performance reasons. Statically generated pages can be cached by CDN with no extra configuration to boost performance. However, in some cases, Server-side Rendering might be the only option.\n\nYou can also use **Client-side Rendering** along with Static Generation or Server-side Rendering. That means some parts of a page can be rendered entirely by client side JavaScript. To learn more, take a look at the [Data Fetching](/docs/basic-features/data-fetching.md#fetching-data-on-the-client-side) documentation.\n\n## Static Generation (Recommended)\n\n<details open>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-wordpress\">WordPress Example</a> (<a href=\"https://next-blog-wordpress.now.sh\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter\">Blog Starter using markdown files</a> (<a href=\"https://next-blog-starter.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-datocms\">DatoCMS Example</a> (<a href=\"https://next-blog-datocms.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-takeshape\">TakeShape Example</a> (<a href=\"https://next-blog-takeshape.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-sanity\">Sanity Example</a> (<a href=\"https://next-blog-sanity.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-prismic\">Prismic Example</a> (<a href=\"https://next-blog-prismic.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-contentful\">Contentful Example</a> (<a href=\"https://next-blog-contentful.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-strapi\">Strapi Example</a> (<a href=\"https://next-blog-strapi.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-agilitycms\">Agility CMS Example</a> (<a href=\"https://next-blog-agilitycms.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-cosmic\">Cosmic Example</a> (<a href=\"https://next-blog-cosmic.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-buttercms\">ButterCMS Example</a> (<a href=\"https://next-blog-buttercms.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-storyblok\">Storyblok Example</a> (<a href=\"https://next-blog-storyblok.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-graphcms\">GraphCMS Example</a> (<a href=\"https://next-blog-graphcms.now.sh/\">Demo</a>)</li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-kontent\">Kontent Example</a> (<a href=\"https://next-blog-kontent.vercel.app/\">Demo</a>)</li>\n    <li><a href=\"https://static-tweet.now.sh/\">Static Tweet Demo</a></li>\n  </ul>\n</details>\n\nIf a page uses **Static Generation**, the page HTML is generated at **build time**. That means in production, the page HTML is generated when you run `next build` . This HTML will then be reused on each request. It can be cached by a CDN.\n\nIn Next.js, you can statically generate pages **with or without data**. Let's take a look at each case.\n\n### Static Generation without data\n\nBy default, Next.js pre-renders pages using Static Generation without fetching data. Here's an example:\n\n```jsx\nfunction About() {\n  return <div>About</div>\n}\n\nexport default About\n```\n\nNote that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time.\n\n### Static Generation with data\n\nSome pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use a special function Next.js provides:\n\n1. Your page **content** depends on external data: Use `getStaticProps`.\n2. Your page **paths** depend on external data: Use `getStaticPaths` (usually in addition to `getStaticProps`).\n\n#### Scenario 1: Your page **content** depends on external data\n\n**Example**: Your blog page might need to fetch the list of blog posts from a CMS (content management system).\n\n```jsx\n// TODO: Need to fetch `posts` (by calling some API endpoint)\n//       before this page can be pre-rendered.\nfunction Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Blog\n```\n\nTo fetch this data on pre-render, Next.js allows you to `export` an `async` function called `getStaticProps` from the same file. This function gets called at build time and lets you pass fetched data to the page's `props` on pre-render.\n\n```jsx\nfunction Blog({ posts }) {\n  // Render posts...\n}\n\n// This function gets called at build time\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n\nexport default Blog\n```\n\nTo learn more about how `getStaticProps` works, check out the [Data Fetching documentation](/docs/basic-features/data-fetching.md#getstaticprops-static-generation).\n\n#### Scenario 2: Your page paths depend on external data\n\nNext.js allows you to create pages with **dynamic routes**. For example, you can create a file called `pages/posts/[id].js` to show a single blog post based on `id`. This will allow you to show a blog post with `id: 1` when you access `posts/1`.\n\n> To learn more about dynamic routing, check the [Dynamic Routing documentation](/docs/routing/dynamic-routes.md).\n\nHowever, which `id` you want to pre-render at build time might depend on external data.\n\n**Example**: suppose that you've only added one blog post (with `id: 1`) to the database. In this case, you'd only want to pre-render `posts/1` at build time.\n\nLater, you might add the second post with `id: 2`. Then you'd want to pre-render `posts/2` as well.\n\nSo your page **paths** that are pre-rendered depend on external data**.** To handle this, Next.js lets you `export` an `async` function called `getStaticPaths` from a dynamic page (`pages/posts/[id].js` in this case). This function gets called at build time and lets you specify which paths you want to pre-render.\n\n```jsx\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => `/posts/${post.id}`)\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n```\n\nAlso in `pages/posts/[id].js`, you need to export `getStaticProps` so that you can fetch the data about the post with this `id` and use it to pre-render the page:\n\n```jsx\nfunction Post({ post }) {\n  // Render post...\n}\n\nexport async function getStaticPaths() {\n  // ...\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n\nexport default Post\n```\n\nTo learn more about how `getStaticPaths` works, check out the [Data Fetching documentation](/docs/basic-features/data-fetching.md#getstaticpaths-static-generation).\n\n### When should I use Static Generation?\n\nWe recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\n\nYou can use Static Generation for many types of pages, including:\n\n- Marketing pages\n- Blog posts\n- E-commerce product listings\n- Help and documentation\n\nYou should ask yourself: \"Can I pre-render this page **ahead** of a user's request?\" If the answer is yes, then you should choose Static Generation.\n\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\nIn cases like this, you can do one of the following:\n\n- Use Static Generation with **Client-side Rendering:** You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the [Data Fetching documentation](/docs/basic-features/data-fetching.md#fetching-data-on-the-client-side).\n- Use **Server-Side Rendering:** Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We'll talk about this approach below.\n\n## Server-side Rendering\n\n> Also referred to as \"SSR\" or \"Dynamic Rendering\".\n\nIf a page uses **Server-side Rendering**, the page HTML is generated on **each request**.\n\nTo use Server-side Rendering for a page, you need to `export` an `async` function called `getServerSideProps`. This function will be called by the server on every request.\n\nFor example, suppose that your page needs to pre-render frequently updated data (fetched from an external API). You can write `getServerSideProps` which fetches this data and passes it to `Page` like below:\n\n```jsx\nfunction Page({ data }) {\n  // Render data...\n}\n\n// This gets called on every request\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  // Pass data to the page via props\n  return { props: { data } }\n}\n\nexport default Page\n```\n\nAs you can see, `getServerSideProps` is similar to `getStaticProps`, but the difference is that `getServerSideProps` is run on every request instead of on build time.\n\nTo learn more about how `getServerSideProps` works, check out our [Data Fetching documentation](/docs/basic-features/data-fetching.md#getserversideprops-server-side-rendering)\n\n## Summary\n\nWe've discussed two forms of pre-rendering for Next.js.\n\n- **Static Generation (Recommended):** The HTML is generated at **build time** and will be reused on each request. To make a page use Static Generation, either export the page component, or export `getStaticProps` (and `getStaticPaths` if necessary). It's great for pages that can be pre-rendered ahead of a user's request. You can also use it with Client-side Rendering to bring in additional data.\n- **Server-side Rendering:** The HTML is generated on **each request**. To make a page use Server-side Rendering, export `getServerSideProps`. Because Server-side Rendering results in slower performance than Static Generation, use this only if absolutely necessary.\n\n## Learn more\n\nWe recommend you to read the following sections next:\n\n<div class=\"card\">\n  <a href=\"/docs/basic-features/data-fetching.md\">\n    <b>Data Fetching:</b>\n    <small>Learn more about data fetching in Next.js.</small>\n  </a>\n</div>\n\n<div class=\"card\">\n  <a href=\"/docs/advanced-features/preview-mode.md\">\n    <b>Preview Mode:</b>\n    <small>Learn more about the preview mode in Next.js.</small>\n  </a>\n</div>\n\n<div class=\"card\">\n  <a href=\"/docs/routing/introduction.md\">\n    <b>Routing:</b>\n    <small>Learn more about routing in Next.js.</small>\n  </a>\n</div>\n\n<div class=\"card\">\n  <a href=\"/docs/basic-features/typescript.md#pages\">\n    <b>TypeScript:</b>\n    <small>Add TypeScript to your pages.</small>\n  </a>\n</div>\n"}},"__N_SSG":true}