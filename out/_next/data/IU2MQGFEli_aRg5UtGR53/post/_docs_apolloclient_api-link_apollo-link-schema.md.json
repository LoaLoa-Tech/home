{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: Schema Link\ndescription: Assists with mocking and server-side rendering\n---\n\n## Overview\n\nThe schema link provides a [graphql execution environment](http://graphql.org/graphql-js/graphql/#graphql), which allows you to perform GraphQL operations on a provided schema. This type of behavior is commonly used for server-side rendering (SSR) to avoid network calls and mocking data. While the schema link could provide graphql results on the client, currently the graphql execution layer is [too heavy weight](https://bundlephobia.com/result?p=graphql) for practical application.\n\n> To unify your state management with client-side GraphQL operations, refer to Apollo Client's [local state management](../../local-state/local-state-management/) functionality. It integrates with the Apollo Client cache and is much more lightweight.\n\n## Installation\n\n`npm install @apollo/client --save`\n\n## Usage\n\n### Server Side Rendering\n\nWhen performing SSR _on the same server_, you can use this library to avoid making network calls.\n\n```js\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { SchemaLink } from '@apollo/client/link/schema';\n\nimport schema from './path/to/your/schema';\n\nconst graphqlClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  ssrMode: true,\n  link: new SchemaLink({ schema })\n});\n```\n\n### Mocking\n\nFor more detailed information about mocking, refer to the [graphql-tools documentation](https://www.apollographql.com/docs/graphql-tools/mocking.html).\n\n```js\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { SchemaLink } from '@apollo/client/link/schema';\nimport { makeExecutableSchema, addMockFunctionsToSchema } from 'graphql-tools';\n\nconst typeDefs = `\n  Query {\n  ...\n  }\n`;\n\nconst mocks = {\n  Query: () => ...,\n  Mutation: () => ...\n};\n\nconst schema = makeExecutableSchema({ typeDefs });\nconst schemaWithMocks = addMockFunctionsToSchema({\n  schema,\n  mocks\n});\n\nconst apolloCache = new InMemoryCache(window.__APOLLO_STATE__);\n\nconst graphqlClient = new ApolloClient({\n  cache: apolloCache,\n  link: new SchemaLink({ schema: schemaWithMocks })\n});\n```\n\n### Options\n\nThe `SchemaLink` constructor can be called with an object with the following properties:\n\n| Option | Description |\n| - | - |\n| `schema` | An executable graphql schema |\n| `rootValue` | The root value that is passed to the resolvers (i.e. the first parameter for the [rootQuery](http://graphql.org/learn/execution/#root-fields-resolvers)) |\n| `context` | An object passed to the resolvers, following the [graphql specification](http://graphql.org/learn/execution/#root-fields-resolvers) or a function that accepts the operation and returns the resolver context. The resolver context may contain all the data-fetching connectors for an operation. |\n"}},"__N_SSG":true}