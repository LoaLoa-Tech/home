{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\nid: conditional-rendering\ntitle: Conditional Rendering\npermalink: docs/conditional-rendering.html\nprev: handling-events.html\nnext: lists-and-keys.html\nredirect_from:\n  - \"tips/false-in-jsx.html\"\n---\n\nIn React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.\n\nConditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) or the [conditional operator](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) to create elements representing the current state, and let React update the UI to match them.\n\nConsider these two components:\n\n```js\nfunction UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\n```\n\nWe'll create a `Greeting` component that displays either of these components depending on whether a user is logged in:\n\n```javascript{3-7,11,12}\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n\nReactDOM.render(\n  // Try changing to isLoggedIn={true}:\n  <Greeting isLoggedIn={false} />,\n  document.getElementById('root')\n);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/ZpVxNq?editors=0011)\n\nThis example renders a different greeting depending on the value of `isLoggedIn` prop.\n\n### Element Variables {#element-variables}\n\nYou can use variables to store elements. This can help you conditionally render a part of the component while the rest of the output doesn't change.\n\nConsider these two new components representing Logout and Login buttons:\n\n```js\nfunction LoginButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Login\n    </button>\n  );\n}\n\nfunction LogoutButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Logout\n    </button>\n  );\n}\n```\n\nIn the example below, we will create a [stateful component](/docs/state-and-lifecycle.html#adding-local-state-to-a-class) called `LoginControl`.\n\nIt will render either `<LoginButton />` or `<LogoutButton />` depending on its current state. It will also render a `<Greeting />` from the previous example:\n\n```javascript{20-25,29,30}\nclass LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = {isLoggedIn: false};\n  }\n\n  handleLoginClick() {\n    this.setState({isLoggedIn: true});\n  }\n\n  handleLogoutClick() {\n    this.setState({isLoggedIn: false});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n    let button;\n\n    if (isLoggedIn) {\n      button = <LogoutButton onClick={this.handleLogoutClick} />;\n    } else {\n      button = <LoginButton onClick={this.handleLoginClick} />;\n    }\n\n    return (\n      <div>\n        <Greeting isLoggedIn={isLoggedIn} />\n        {button}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <LoginControl />,\n  document.getElementById('root')\n);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/QKzAgB?editors=0010)\n\nWhile declaring a variable and using an `if` statement is a fine way to conditionally render a component, sometimes you might want to use a shorter syntax. There are a few ways to inline conditions in JSX, explained below.\n\n### Inline If with Logical && Operator {#inline-if-with-logical--operator}\n\nYou may [embed expressions in JSX](/docs/introducing-jsx.html#embedding-expressions-in-jsx) by wrapping them in curly braces. This includes the JavaScript logical `&&` operator. It can be handy for conditionally including an element:\n\n```js{6-10}\nfunction Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n    </div>\n  );\n}\n\nconst messages = ['React', 'Re: React', 'Re:Re: React'];\nReactDOM.render(\n  <Mailbox unreadMessages={messages} />,\n  document.getElementById('root')\n);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/ozJddz?editors=0010)\n\nIt works because in JavaScript, `true && expression` always evaluates to `expression`, and `false && expression` always evaluates to `false`.\n\nTherefore, if the condition is `true`, the element right after `&&` will appear in the output. If it is `false`, React will ignore and skip it.\n\nNote that returning a falsy expression will still cause the element after `&&` to be skipped but will return the falsy expression. In the example below, `<div>0</div>` will be returned by the render method.\n\n```javascript{2,5}\nrender() {\n  const count = 0;\n  return (\n    <div>\n      { count && <h1>Messages: {count}</h1>}\n    </div>\n  );\n}\n```\n\n### Inline If-Else with Conditional Operator {#inline-if-else-with-conditional-operator}\n\nAnother method for conditionally rendering elements inline is to use the JavaScript conditional operator [`condition ? true : false`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator).\n\nIn the example below, we use it to conditionally render a small block of text.\n\n```javascript{5}\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.\n    </div>\n  );\n}\n```\n\nIt can also be used for larger expressions although it is less obvious what's going on:\n\n```js{5,7,9}\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      {isLoggedIn\n        ? <LogoutButton onClick={this.handleLogoutClick} />\n        : <LoginButton onClick={this.handleLoginClick} />\n      }\n    </div>\n  );\n}\n```\n\nJust like in JavaScript, it is up to you to choose an appropriate style based on what you and your team consider more readable. Also remember that whenever conditions become too complex, it might be a good time to [extract a component](/docs/components-and-props.html#extracting-components).\n\n### Preventing Component from Rendering {#preventing-component-from-rendering}\n\nIn rare cases you might want a component to hide itself even though it was rendered by another component. To do this return `null` instead of its render output.\n\nIn the example below, the `<WarningBanner />` is rendered depending on the value of the prop called `warn`. If the value of the prop is `false`, then the component does not render:\n\n```javascript{2-4,29}\nfunction WarningBanner(props) {\n  if (!props.warn) {\n    return null;\n  }\n\n  return (\n    <div className=\"warning\">\n      Warning!\n    </div>\n  );\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {showWarning: true};\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick() {\n    this.setState(state => ({\n      showWarning: !state.showWarning\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <WarningBanner warn={this.state.showWarning} />\n        <button onClick={this.handleToggleClick}>\n          {this.state.showWarning ? 'Hide' : 'Show'}\n        </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Page />,\n  document.getElementById('root')\n);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/Xjoqwm?editors=0010)\n\nReturning `null` from a component's `render` method does not affect the firing of the component's lifecycle methods. For instance `componentDidUpdate` will still be called.\n"}},"__N_SSG":true}