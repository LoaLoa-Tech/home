{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Next.js supports API Routes, which allow you to build your API without leaving your Next.js app. Learn how it works here.\n---\n\n# API Routes\n\n<details open>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/api-routes\">Basic API Routes</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/api-routes-middleware\">API Routes with middleware</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/api-routes-graphql\">API Routes with GraphQL</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/api-routes-rest\">API Routes with REST</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/api-routes-cors\">API Routes with CORS</a></li>\n  </ul>\n</details>\n\nAPI routes provide a straightforward solution to build your **API** with Next.js.\n\nAny file inside the folder `pages/api` is mapped to `/api/*` and will be treated as an API endpoint instead of a `page`. They are server-side only bundles and won't increase your client-side bundle size.\n\nFor example, the following API route `pages/api/user.js` handles a `json` response:\n\n```js\nexport default function handler(req, res) {\n  res.statusCode = 200\n  res.setHeader('Content-Type', 'application/json')\n  res.end(JSON.stringify({ name: 'John Doe' }))\n}\n```\n\nFor an API route to work, you need to export a function as default (a.k.a **request handler**), which then receives the following parameters:\n\n- `req`: An instance of [http.IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage), plus some pre-built middlewares you can see [here](/docs/api-routes/api-middlewares.md)\n- `res`: An instance of [http.ServerResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse), plus some helper functions you can see [here](/docs/api-routes/response-helpers.md)\n\nTo handle different HTTP methods in an API route, you can use `req.method` in your request handler, like so:\n\n```js\nexport default function handler(req, res) {\n  if (req.method === 'POST') {\n    // Process a POST request\n  } else {\n    // Handle any other HTTP method\n  }\n}\n```\n\nTo fetch API endpoints, take a look into any of the examples at the start of this section.\n\n## Caveats\n\n- API Routes [do not specify CORS headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS), meaning they are **same-origin only** by default. You can customize such behavior by wrapping the request handler with the [cors middleware](/docs/api-routes/api-middlewares.md#connectexpress-middleware-support).\n- API Routes can't be used with [`next export`](/docs/advanced-features/static-html-export.md)\n\n## Related\n\nFor more information on what to do next, we recommend the following sections:\n\n<div class=\"card\">\n  <a href=\"/docs/api-routes/api-middlewares.md\">\n    <b>API Middlewares:</b>\n    <small>learn about the built-in middlewares for the request.</small>\n  </a>\n</div>\n\n<div class=\"card\">\n  <a href=\"/docs/api-routes/response-helpers.md\">\n    <b>Response Helpers:</b>\n    <small>learn about the built-in methods for the response.</small>\n  </a>\n</div>\n\n<div class=\"card\">\n  <a href=\"/docs/basic-features/typescript.md#api-routes\">\n    <b>TypeScript:</b>\n    <small>Add TypeScript to your API Routes.</small>\n  </a>\n</div>\n"}},"__N_SSG":true}