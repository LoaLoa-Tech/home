{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ntitle: ApolloClient\ndescription: ApolloClient API reference\norder: 11\n---\n\nimport { TypescriptApiBox } from 'gatsby-theme-apollo-docs';\n\nThe `ApolloClient` class encapsulates Apollo's core client-side API. It backs all available view-layer integrations (React, iOS, and so on).\n\n## The `ApolloClient` constructor\n\n<TypescriptApiBox name=\"ApolloClient.constructor\" />\n\nThe constructor for `ApolloClient` accepts an `ApolloClientOptions` object that supports the required and optional fields listed below. These fields make it easy to customize how Apollo works based on your application's needs.\n\n### Example constructor call\n\n```js\nimport { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\n\n// Instantiate required constructor fields\nconst cache = new InMemoryCache();\nconst link = createHttpLink({\n  uri: 'http://localhost:4000/',\n});\n\nconst client = new ApolloClient({\n  // Provide required constructor fields\n  cache: cache,\n  link: link,\n\n  // Provide some optional constructor fields\n  name: 'react-web-client',\n  version: '1.3',\n  queryDeduplication: false,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network',\n    },\n  },\n});\n```\n\n### Required fields\n\n| Name | Description |\n| - | - |\n| `uri` | A URI pointing to the backend GraphQL endpoint that Apollo Client will communicate with. **Note:** One of `uri` or `link` is required; if both are specified, `link` will take precedence. You may also [specify `credentials` and `headers`](../../networking/basic-http-networking/) along with `uri`. |\n| `link` | You can provide an Apollo Link instance to serve as Apollo Client's network layer. For more information, see the [advanced HTTP networking](../../networking/advanced-http-networking/) section. **Note:** One of `uri` or `link` is required; if both are specified, `link` will take precedence. |\n| `cache` | Apollo Client uses an Apollo Cache instance to handle its caching strategy. The recommended cache is `InMemoryCache` which is provided by the `@apollo/client` package. For more information, see [Configuring the cache](../../caching/cache-configuration/). |\n\n### Optional fields\n\n| Name | Description |\n| - | - |\n| `name` | A custom name (e.g., `iOS`) that identifies this particular client among your set of clients. Apollo Server uses this property as part of its [Client Awareness](https://www.apollographql.com/docs/apollo-server/v2/features/metrics#Client-Awareness) feature. |\n| `version` | A custom version that identifies the current version of this particular client (e.g., `1.2`). Apollo Server uses this property as part of its [Client Awareness](https://www.apollographql.com/docs/apollo-server/v2/features/metrics#Client-Awareness) feature. <br/><br/> Note that this version string is **not** the version of Apollo Client that you are using, but rather any version string that helps you differentiate between versions of your client. |\n| `ssrMode` | When using Apollo Client for [server-side rendering](../../performance/server-side-rendering/), set this to `true` so that React Apollo's `getDataFromTree` function can work effectively. |\n| `ssrForceFetchDelay` | Provide this to specify a time interval (in milliseconds) before Apollo Client force-fetches queries after a server-side render. This value is `0` by default. |\n| `connectToDevTools` | Set this to `true` to allow the [Apollo Client Devtools](../../development-testing/developer-tooling/#apollo-client-devtools) Chrome extension to connect to your application's Apollo Client in production. (This connection is allowed automatically in dev mode.) |\n| `queryDeduplication` | Set this to `false` to force all created queries to be sent to the server, even if a query with completely identical parameters (query, variables, operationName) is already in flight. |\n| `defaultOptions` | Provide this object to set application-wide default values for options you can provide to the `watchQuery`, `query`, and `mutate` functions. See below for an example object. |\n\n### Example `defaultOptions` object\n\n```js\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'ignore',\n  },\n  query: {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all',\n  },\n  mutate: {\n    errorPolicy: 'all',\n  },\n};\n```\n\nYou can override any default option you specify in this object by providing a\ndifferent value for the same option in individual function calls.\n\n> **Note:** The `useQuery` hook uses Apollo Client's `watchQuery` function. To set `defaultOptions` when using the `useQuery` hook, make sure to set them under the `defaultOptions.watchQuery` property.\n\n## `ApolloClient` functions\n\n<TypescriptApiBox name=\"ApolloClient.watchQuery\" />\n<TypescriptApiBox name=\"ApolloClient.query\" />\n<TypescriptApiBox name=\"ApolloClient.mutate\" />\n<TypescriptApiBox name=\"ApolloClient.subscribe\" />\n<TypescriptApiBox name=\"ApolloClient.readQuery\" />\n<TypescriptApiBox name=\"ApolloClient.readFragment\" />\n<TypescriptApiBox name=\"ApolloClient.writeQuery\" />\n<TypescriptApiBox name=\"ApolloClient.writeFragment\" />\n<TypescriptApiBox name=\"ApolloClient.resetStore\" />\n<TypescriptApiBox name=\"ApolloClient.onResetStore\" />\n<TypescriptApiBox name=\"ApolloClient.clearStore\" />\n<TypescriptApiBox name=\"ApolloClient.onClearStore\" />\n<TypescriptApiBox name=\"ApolloClient.stop\" />\n<TypescriptApiBox name=\"ApolloClient.reFetchObservableQueries\" />\n\n## Types\n\n<TypescriptApiBox name=\"ApolloClientOptions\" />\n<TypescriptApiBox name=\"DefaultOptions\" />\n"}},"__N_SSG":true}