{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: tutorials\ntitle: Creating relationships\norder: 4\n[meta]-->\n\n# Creating relationships\n\nThis chapter assumes that that the reader has the code that was created in the\nprevious tutorials:\n\n1. [Creating a new project](/docs/tutorials/new-project.md)\n2. [Adding lists](/docs/tutorials/add-lists.md)\n\n## To-single relationship\n\nLet's link the Todo list and the User list together by setting up\na `relationship`. Tweak the `assignee` field in `Todo.js` to match the following code:\n\nImport the `Relationship` field:\n\n```javascript title=/lists/Todo.js\nconst { CalendarDay, Checkbox, Relationship, Text } = require('@keystonejs/fields');\n```\n\nUpdate the field type from `Text` to `Relationship` and provide a `ref` that\npoints to which list the field is related to.\n\n```diff title=/lists/Todo.js allowCopy=false showLanguage=false\nassignee: {\n-  type: Text,\n+  type: Relationship,\n+  ref: 'User',\n  isRequired: true,\n}\n```\n\nThe `ref` option defines the `List` to which we will relate. The name assigned\nto the option is the same name that is passed to `createList`. In the Admin UI\nyou can now pick one of the created users to make them responsible for\ncompleting the task.\n\n## Two-way to-single relationship\n\nIt is now possible to assign a task to a user, but it is not possible to assign\nthe user to a task! In `User.js` add the following field:\n\n```javascript title=/lists/User.js\ntask: {\n  type: Relationship,\n  ref: 'Todo',\n}\n```\n\nNow we can set a task for the User from the admin panel. But something is wrong!\nWhen we pick a task for the user and then check this task, the `assignee` is incorrect.\nThis is because we have create two separate one-sided relationships.\nWhat we want is a single two-sided relationship.\n\n## Setting up a two-sided relationship between User and Todo\n\nIn order to indicate that `task` and `assignee` are just two different sides of a single relationship, we need to update our configurations\nIn `User.js` adjust the `task` field to the following:\n\n```diff title=/lists/User.js allowCopy=false showLanguage=false\ntask: {\n  type: Relationship,\n-  ref: 'Todo',\n+  ref: 'Todo.assignee',\n}\n```\n\nAnd in `Todo.js` update the `assignee` field:\n\n```diff title=/lists/Todo.js allowCopy=false showLanguage=false\nassignee: {\n  type: Relationship,\n-  ref: 'User',\n+  ref: 'User.task',\n}\n```\n\nStart the Admin UI, create a Todo and assign a user. Check the user's `task`\nfield and notice that it is already set!\n\n## To-many relationship\n\nWhat if a user needs to be able to do multiple tasks? Keystone provides a way to\ndo this easily. Take a look at following code in `User.js`:\n\n```javascript title=/lists/User.js\ntasks: {\n  type: Relationship,\n  ref: 'Todo.assignee',\n  many: true,\n}\n```\n\nThe `many: true` option indicates that `User` can store multiple references to\ntasks.\n\n> **Note:** we've updated the name of the field from `task` to `tasks` to\n> indicate the nature of the relationship.\n\nCopy this code to your application and don't forget to change the `assignee`\nfield in `Todo.js` to match the new field name `User.tasks`. Now in the Admin\nUI you can pick multiple tasks for a user.\n\nSee also:\n\n- [Relationships](/docs/discussions/relationships.md)\n- [Schema - Lists & Fields](/docs/guides/schema.md)\n- [Field Types - Relationship](/packages/fields/src/types/Relationship/README.md)\n"}},"__N_SSG":true}