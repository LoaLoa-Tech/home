{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"<!--[meta]\nsection: guides\ntitle: Using Keystone with Prisma\n[meta]-->\n\n# Using Keystone with Prisma\n\n> **Warning:** The Prisma adapter uses Prisma Migrate, which is currently [considered experimental](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-migrate). We do not recommend using the Prisma adapter for production systems yet.\n\nIn this guide we'll walk you through the steps to create a new project using Keystone and [Prisma](https://github.com/prisma/prisma), automatically run a migration when changing your Keystone schema, and use Prisma Client directly in a custom query.\n\n## Connect to your database\n\nIn this guide we will connect to a PostgreSQL database on your computer.\nMake sure that you have [PostgreSQL installed](https://www.prisma.io/docs/guides/database-workflows/setting-up-a-database/postgresql) and know the [connection URL](https://www.prisma.io/docs/reference/database-connectors/connection-urls) for your database.\n\nIf you need to create a new database and user you can try the following commands:\n\n```\ncreatedb -U postgres keystone\npsql keystone -U postgres -c \"CREATE USER keystone5 PASSWORD 'change_me_plz'\"\npsql keystone -U postgres -c \"GRANT ALL ON DATABASE keystone TO keystone5;\"\n```\n\nCheck that you can connect to your database with your connection URL, e.g:\n\n```\npsql postgres://keystone5:change_me_plz@localhost:5432/keystone\n```\n\nPlease consult the [PostgreSQL docs](https://www.postgresql.org/docs/) for more details on how to setup a local database.\n\n> **Tip:** Make sure you have a full connection URL including a username and password, e.g. `postgres://keystone5:change_me_plz@localhost:5432/keystone`\n\n## Create a new app\n\nWe'll start by creating a new Keystone application using `yarn create`. Run the following command:\n\n```\nyarn create keystone-app my-app\n```\n\n> **Note:** Alternatively, you can also run `npm create keystone-app my-app` if you prefer using npm or Yarn.\n\n1. Call your project `my-app`\n2. Select `Prisma (Experimental)` as your database type.\n3. Provide the connection URL, including username and password, e.g. `postgres://keystone5:change_me_plz@localhost:5432/keystone`\n4. Select `Todo` application as your starter project.\n\nYour project is now ready to run! Run the following commands (make sure to use the connection string for your database!), and Keystone will start your project\n\n```\ncd my-app\nDATABASE_URL=postgres://keystone5:change_me_plz@localhost:5432/keystone yarn dev\n```\n\n> **Note:** You currently need to provide `DATABASE_URL` as an environment variable due to an [issue](https://github.com/prisma/prisma/issues/3750) in Prisma.\n\nWhen prisma connects to your database it will generate a [Prisma schema file](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema) and then generate and run a migration to set up your database with all the required tables.\n\n## Changing your schema\n\nDuring development you will want to be regularly making changes to your Keystone schema as your data model evolves.\n\nAdd a new field to your current list:\n\n```diff\n-const { Text } = require('@keystonejs/fields');\n- ...\n-  fields: {\n-    name: { type: Text, schemaDoc: 'This is the thing you need to do' },\n-  },\n+const { Text, Checkbox } = require('@keystonejs/fields');\n+...\n+  fields: {\n+    name: { type: Text, schemaDoc: 'This is the thing you need to do' },\n+    isComplete: { type: Checkbox },\n+  },\n```\n\nNow, when you restart your server by running `yarn dev` again, Keystone will generate a new Prisma schema for your system. Prisma will compare this to your current database and will generate and run a migration to update your database to have a column for your new field.\n\n> **Note:** The current adapter behaviour only support this auto-migration behaviour. Future releases will provide more flexible controls for running migrations.\n\n## Using Prisma Client\n\nKeystone provides a library called [`server-side-graphql-client`](/docs/discussions/server-side-graphql.md) which allows you to execute GraphQL queries from within hooks, access control, and custom mutations. These GraphQL queries come with all the benefits of Keystone's access control, hooks, and validation.\n\nIn some circumstances you might want to bypass all of these features and talk directly to your database. The Prisma adapter makes this easy by directly exposing an instance of `PrismaClient` which you can use to send queries to your database.\n\nAdd the following code to your `index.js` file to create a custom query which tells you whether all your todo items are complete.\n\n```javascript\nkeystone.extendGraphQLSchema({\n  queries: [\n    {\n      schema: 'allComplete: Boolean',\n      resolver: async () => {\n        const { prisma } = keystone.adapters.PrismaAdapter;\n        const unfinished = await prisma.todo.count({ where: { isComplete: { equals: false } } });\n        return unfinished === 0;\n      },\n    },\n  ],\n});\n```\n\nThis query is using the `PrismaClient` object stored at `keystone.adapters.PrismaAdapter.prisma` to directly run this query against the database.\nFor more information on the Prisma Client API please consult the [Prisma docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).\n\n> **Tip:** For full details on how to use up the Prisma Adapter, see the [Prisma Adapter API Docs](/packages/adapter-prisma/README.md)\n"}},"__N_SSG":true}