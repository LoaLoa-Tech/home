{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Next.js has built-in support for internationalized routing and language detection. Learn more here.\n---\n\n# Internationalized Routing\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/i18n-routing\">i18n routing</a></li>\n  </ul>\n</details>\n\nNext.js has built-in support for internationalized ([i18n](https://en.wikipedia.org/wiki/Internationalization_and_localization#Naming)) routing since `v10.0.0`. You can provide a list of locales, the default locale, and domain-specific locales and Next.js will automatically handle the routing.\n\nThe i18n routing support is currently meant to complement existing i18n library solutions like `react-intl`, `react-i18next`, `lingui`, `rosetta`, and others by streamlining the routes and locale parsing.\n\n## Getting started\n\nTo get started, add the `i18n` config to your `next.config.js` file.\n\nLocales are [UTS Locale Identifiers](https://www.unicode.org/reports/tr35/tr35-59/tr35.html#Identifiers), a standardized format for defining locales.\n\nGenerally a Locale Identifier is made up of a language, region, and script separated by a dash: `language-region-script`. The region and script are optional. An example:\n\n- `en-US` - English as spoken in the United States\n- `nl-NL` - Dutch as spoken in the Netherlands\n- `nl` - Dutch, no specific region\n\n```js\n// next.config.js\nmodule.exports = {\n  i18n: {\n    // These are all the locales you want to support in\n    // your application\n    locales: ['en-US', 'fr', 'nl-NL'],\n    // This is the default locale you want to be used when visiting\n    // a non-locale prefixed path e.g. `/hello`\n    defaultLocale: 'en-US',\n    // This is a list of locale domains and the default locale they\n    // should handle (these are only required when setting up domain routing)\n    domains: [\n      {\n        domain: 'example.com',\n        defaultLocale: 'en-US',\n      },\n      {\n        domain: 'example.nl',\n        defaultLocale: 'nl-NL',\n      },\n      {\n        domain: 'example.fr',\n        defaultLocale: 'fr',\n      },\n    ],\n  },\n}\n```\n\n## Locale Strategies\n\nThere are two locale handling strategies: Sub-path Routing and Domain Routing.\n\n### Sub-path Routing\n\nSub-path Routing puts the locale in the url path.\n\n```js\n// next.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en-US', 'fr', 'nl-NL'],\n    defaultLocale: 'en-US',\n  },\n}\n```\n\nWith the above configuration `en-US`, `fr`, and `nl-NL` will be available to be routed to, and `en-US` is the default locale. If you have a `pages/blog.js` the following urls would be available:\n\n- `/blog`\n- `/fr/blog`\n- `/nl-nl/blog`\n\nThe default locale does not have a prefix.\n\n### Domain Routing\n\nBy using domain routing you can configure locales to be served from different domains:\n\n```js\n// next.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en-US', 'fr', 'nl-NL', 'nl-BE'],\n    defaultLocale: 'en-US',\n\n    domains: [\n      {\n        domain: 'example.com',\n        defaultLocale: 'en-US',\n      },\n      {\n        domain: 'example.fr',\n        defaultLocale: 'fr',\n      },\n      {\n        domain: 'example.nl',\n        defaultLocale: 'nl-NL',\n        // specify other locales that should be redirected\n        // to this domain\n        locales: ['nl-BE'],\n      },\n    ],\n  },\n}\n```\n\nFor example if you have `pages/blog.js` the following urls will be available:\n\n- `example.com/blog`\n- `example.fr/blog`\n- `example.nl/blog`\n- `example.nl/nl-BE/blog`\n\n## Automatic Locale Detection\n\nWhen a user visits the application root (generally `/`), Next.js will try to automatically detect which locale the user prefers based on the [`Accept-Language`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header and the current domain.\n\nIf a locale other than the default locale is detected, the user will be redirected to either:\n\n- **When using Sub-path Routing:** The locale prefixed path\n- **When using Domain Routing:** The domain with that locale specified as the default\n\nWhen using Domain Routing, if a user with the `Accept-Language` header `fr;q=0.9` visits `example.com`, they will be redirected to `example.fr` since that domain handles the `fr` locale by default.\n\nWhen using Sub-path Routing, the user would be redirected to `/fr`.\n\n### Disabling Automatic Locale Detection\n\nThe automatic locale detection can be disabled with:\n\n```js\n// next.config.js\nmodule.exports = {\n  i18n: {\n    localeDetection: false,\n  },\n}\n```\n\nWhen `localeDetection` is set to `false` Next.js will no longer automatically redirect based on the user's preferred locale and will only provide locale information detected from either the locale based domain or locale path as described above.\n\n## Accessing the locale information\n\nYou can access the locale information via the Next.js router. For example, using the [`useRouter()`](/docs/api-reference/next/router.md#userouter) hook the following properties are available:\n\n- `locale` contains the currently active locale.\n- `locales` contains all configured locales.\n- `defaultLocale` contains the configured default locale.\n\nWhen [pre-rendering](/docs/basic-features/pages.md#static-generation-recommended) pages with `getStaticProps` or `getServerSideProps`, the locale information is provided in [the context](/docs/basic-features/data-fetching.md#getstaticprops-static-generation) provided to the function.\n\nWhen leveraging `getStaticPaths`, the configured locales are provided in the context parameter of the function under `locales` and the configured defaultLocale under `defaultLocale`.\n\n## Transition between locales\n\nYou can use `next/link` or `next/router` to transition between locales.\n\nFor `next/link`, a `locale` prop can be provided to transition to a different locale from the currently active one. If no `locale` prop is provided, the currently active `locale` is used during client-transitions. For example:\n\n```jsx\nimport Link from 'next/link'\n\nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/another\" locale=\"fr\">\n      <a>To /fr/another</a>\n    </Link>\n  )\n}\n```\n\nWhen using the `next/router` methods directly, you can specify the `locale` that should be used via the transition options. For example:\n\n```jsx\nimport { useRouter } from 'next/router'\n\nexport default function IndexPage(props) {\n  const router = useRouter()\n\n  return (\n    <div\n      onClick={() => {\n        router.push('/another', '/another', { locale: 'fr' })\n      }}\n    >\n      to /fr/another\n    </div>\n  )\n}\n```\n\nIf you have a `href` that already includes the locale you can opt-out of automatically handling the locale prefixing:\n\n```jsx\nimport Link from 'next/link'\n\nexport default function IndexPage(props) {\n  return (\n    <Link href=\"/fr/another\" locale={false}>\n      <a>To /fr/another</a>\n    </Link>\n  )\n}\n```\n\n## Leveraging the NEXT_LOCALE cookie\n\nNext.js supports overriding the accept-language header with a `NEXT_LOCALE=the-locale` cookie. This cookie can be set using a language switcher and then when a user comes back to the site it will leverage the locale specified in the cookie.\n\nFor example, if a user prefers the locale `fr` but a `NEXT_LOCALE=en` cookie is set the `en` locale will be used instead until the cookie is removed or expired.\n\n## Search Engine Optimization\n\nSince Next.js knows what language the user is visiting it will automatically add the `lang` attribute to the `<html>` tag.\n\nNext.js doesn't know about variants of a page so it's up to you to add the `hreflang` meta tags using [`next/head`](/docs/api-reference/next/head.md). You can learn more about `hreflang` in the [Google Webmasters documentation](https://support.google.com/webmasters/answer/189077).\n\n## How does this work with Static Generation?\n\n> Note that Internationalized Routing does not integrate with [`next export`](/docs/advanced-features/static-html-export.md) as `next export` does not leverage the Next.js routing layer. Hybrid Next.js applications that do not use `next export` are fully supported.\n\n### Automatically Statically Optimized Pages\n\nFor pages that are [automatically statically optimized](/docs/advanced-features/automatic-static-optimization.md), a version of the page will be generated for each locale.\n\n### Non-dynamic getStaticProps Pages\n\nFor non-dynamic `getStaticProps` pages, a version is generated for each locale like above. `getStaticProps` is called with each `locale` that is being rendered. If you would like to opt-out of a certain locale from being pre-rendered, you can return `notFound: true` from `getStaticProps` and this variant of the page will not be generated.\n\n```js\nexport async function getStaticProps({ locale }) {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch(`https://.../posts?locale=${locale}`)\n  const posts = await res.json()\n\n  if (posts.length === 0) {\n    return {\n      notFound: true,\n    }\n  }\n\n  // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n### Dynamic getStaticProps Pages\n\nFor dynamic `getStaticProps` pages, any locale variants of the page that is desired to be prerendered needs to be returned from [`getStaticPaths`](/docs/basic-features/data-fetching.md#getstaticpaths-static-generation). Along with the `params` object that can be returned for the `paths`, you can also return a `locale` field specifying which locale you want to render. For example:\n\n```js\n// pages/blog/[slug].js\nexport const getStaticPaths = ({ locales }) => {\n  return {\n    paths: [\n      { params: { slug: 'post-1' }, locale: 'en-US' },\n      { params: { slug: 'post-1' }, locale: 'fr' },\n    ],\n    fallback: true,\n  }\n}\n```\n"}},"__N_SSG":true}