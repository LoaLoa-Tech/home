{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Dynamic Routes are pages that allow you to add custom params to your URLs. Start creating Dynamic Routes and learn more here.\n---\n\n# Dynamic Routes\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/dynamic-routing\">Dynamic Routing</a></li>\n  </ul>\n</details>\n\nDefining routes by using predefined paths is not always enough for complex applications. In Next.js you can add brackets to a page (`[param]`) to create a dynamic route (a.k.a. url slugs, pretty urls, and others).\n\nConsider the following page `pages/post/[pid].js`:\n\n```jsx\nimport { useRouter } from 'next/router'\n\nconst Post = () => {\n  const router = useRouter()\n  const { pid } = router.query\n\n  return <p>Post: {pid}</p>\n}\n\nexport default Post\n```\n\nAny route like `/post/1`, `/post/abc`, etc. will be matched by `pages/post/[pid].js`. The matched path parameter will be sent as a query parameter to the page, and it will be merged with the other query parameters.\n\nFor example, the route `/post/abc` will have the following `query` object:\n\n```json\n{ \"pid\": \"abc\" }\n```\n\nSimilarly, the route `/post/abc?foo=bar` will have the following `query` object:\n\n```json\n{ \"foo\": \"bar\", \"pid\": \"abc\" }\n```\n\nHowever, route parameters will override query parameters with the same name. For example, the route `/post/abc?pid=123` will have the following `query` object:\n\n```json\n{ \"pid\": \"abc\" }\n```\n\nMultiple dynamic route segments work the same way. The page `pages/post/[pid]/[comment].js` will match the route `/post/abc/a-comment` and its `query` object will be:\n\n```json\n{ \"pid\": \"abc\", \"comment\": \"a-comment\" }\n```\n\nClient-side navigations to dynamic routes are handled with [`next/link`](/docs/api-reference/next/link.md). If we wanted to have links to the routes used above it will look like this:\n\n```jsx\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/post/abc\">\n          <a>Go to pages/post/[pid].js</a>\n        </Link>\n      </li>\n      <li>\n        <Link href=\"/post/abc?foo=bar\">\n          <a>Also goes to pages/post/[pid].js</a>\n        </Link>\n      </li>\n      <li>\n        <Link href=\"/post/abc/a-comment\">\n          <a>Go to pages/post/[pid]/[comment].js</a>\n        </Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\nRead our docs for [Linking between pages](/docs/routing/introduction.md#linking-between-pages) to learn more.\n\n### Catch all routes\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/catch-all-routes\">Catch All Routes</a></li>\n  </ul>\n</details>\n\nDynamic routes can be extended to catch all paths by adding three dots (`...`) inside the brackets. For example:\n\n- `pages/post/[...slug].js` matches `/post/a`, but also `/post/a/b`, `/post/a/b/c` and so on.\n\n> **Note**: You can use names other than `slug`, such as: `[...param]`\n\nMatched parameters will be sent as a query parameter (`slug` in the example) to the page, and it will always be an array, so, the path `/post/a` will have the following `query` object:\n\n```json\n{ \"slug\": [\"a\"] }\n```\n\nAnd in the case of `/post/a/b`, and any other matching path, new parameters will be added to the array, like so:\n\n```json\n{ \"slug\": [\"a\", \"b\"] }\n```\n\n### Optional catch all routes\n\nCatch all routes can be made optional by including the parameter in double brackets (`[[...slug]]`).\n\nFor example, `pages/post/[[...slug]].js` will match `/post`, `/post/a`, `/post/a/b`, and so on.\n\nThe main difference between catch all and optional catch all routes is that with optional, the route without the parameter is also matched (`/post` in the example above).\n\nThe `query` objects are as follows:\n\n```json\n{ } // GET `/post` (empty object)\n{ \"slug\": [\"a\"] } // `GET /post/a` (single-element array)\n{ \"slug\": [\"a\", \"b\"] } // `GET /post/a/b` (multi-element array)\n```\n\n## Caveats\n\n- Predefined routes take precedence over dynamic routes, and dynamic routes over catch all routes. Take a look at the following examples:\n  - `pages/post/create.js` - Will match `/post/create`\n  - `pages/post/[pid].js` - Will match `/post/1`, `/post/abc`, etc. But not `/post/create`\n  - `pages/post/[...slug].js` - Will match `/post/1/2`, `/post/a/b/c`, etc. But not `/post/create`, `/post/abc`\n- Pages that are statically optimized by [Automatic Static Optimization](/docs/advanced-features/automatic-static-optimization.md) will be hydrated without their route parameters provided, i.e `query` will be an empty object (`{}`).\n\n  After hydration, Next.js will trigger an update to your application to provide the route parameters in the `query` object.\n\n## Related\n\nFor more information on what to do next, we recommend the following sections:\n\n<div class=\"card\">\n  <a href=\"/docs/api-reference/next/link.md\">\n    <b>Pages:</b>\n    <small>Enable client-side transitions with next/link.</small>\n  </a>\n</div>\n\n<div class=\"card\">\n  <a href=\"/docs/routing/introduction.md\">\n    <b>Routing:</b>\n    <small>Learn more about routing in Next.js.</small>\n  </a>\n</div>\n"}},"__N_SSG":true}