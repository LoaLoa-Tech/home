{"pageProps":{"markdownPost":{"name":null,"url":null,"content":"---\ndescription: Next.js supports including CSS files as Global CSS or CSS Modules, using `styled-jsx` for CSS-in-JS, or any other CSS-in-JS solution! Learn more here.\n---\n\n# Built-In CSS Support\n\n<details open>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/basic-css\">Basic CSS Example</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">With Tailwind CSS</a></li>\n  </ul>\n</details>\n\nNext.js allows you to import CSS files from a JavaScript file.\nThis is possible because Next.js extends the concept of [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) beyond JavaScript.\n\n## Adding a Global Stylesheet\n\nTo add a stylesheet to your application, import the CSS file within `pages/_app.js`.\n\nFor example, consider the following stylesheet named `styles.css`:\n\n```css\nbody {\n  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',\n    'Arial', sans-serif;\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\nCreate a [`pages/_app.js` file](/docs/advanced-features/custom-app.md) if not already present.\nThen, [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) the `styles.css` file.\n\n```jsx\nimport '../styles.css'\n\n// This default export is required in a new `pages/_app.js` file.\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\nThese styles (`styles.css`) will apply to all pages and components in your application.\nDue to the global nature of stylesheets, and to avoid conflicts, you may **only import them inside [`pages/_app.js`](/docs/advanced-features/custom-app.md)**.\n\nIn development, expressing stylesheets this way allows your styles to be hot reloaded as you edit them—meaning you can keep application state.\n\nIn production, all CSS files will be automatically concatenated into a single minified `.css` file.\n\n### Import styles from `node_modules`\n\nSince Next.js **9.5.4**, importing a CSS file from `node_modules` is permitted anywhere in your application.\n\nFor global stylesheets, like `bootstrap` or `nprogress`, you should import the file inside `pages/_app.js`.\nFor example:\n\n```jsx\n// pages/_app.js\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\nFor importing CSS required by a third party component, you can do so in your component. For example:\n\n```tsx\n// components/ExampleDialog.js\nimport { useState } from 'react'\nimport { Dialog } from '@reach/dialog'\nimport '@reach/dialog/styles.css'\n\nfunction ExampleDialog(props) {\n  const [showDialog, setShowDialog] = useState(false)\n  const open = () => setShowDialog(true)\n  const close = () => setShowDialog(false)\n\n  return (\n    <div>\n      <button onClick={open}>Open Dialog</button>\n      <Dialog isOpen={showDialog} onDismiss={close}>\n        <button className=\"close-button\" onClick={close}>\n          <VisuallyHidden>Close</VisuallyHidden>\n          <span aria-hidden>×</span>\n        </button>\n        <p>Hello there. I am a dialog</p>\n      </Dialog>\n    </div>\n  )\n}\n```\n\n## Adding Component-Level CSS\n\nNext.js supports [CSS Modules](https://github.com/css-modules/css-modules) using the `[name].module.css` file naming convention.\n\nCSS Modules locally scope CSS by automatically creating a unique class name.\nThis allows you to use the same CSS class name in different files without worrying about collisions.\n\nThis behavior makes CSS Modules the ideal way to include component-level CSS.\nCSS Module files **can be imported anywhere in your application**.\n\nFor example, consider a reusable `Button` component in the `components/` folder:\n\nFirst, create `components/Button.module.css` with the following content:\n\n```css\n/*\nYou do not need to worry about .error {} colliding with any other `.css` or\n`.module.css` files!\n*/\n.error {\n  color: white;\n  background-color: red;\n}\n```\n\nThen, create `components/Button.js`, importing and using the above CSS file:\n\n```jsx\nimport styles from './Button.module.css'\n\nexport function Button() {\n  return (\n    <button\n      type=\"button\"\n      // Note how the \"error\" class is accessed as a property on the imported\n      // `styles` object.\n      className={styles.error}\n    >\n      Destroy\n    </button>\n  )\n}\n```\n\nCSS Modules are an _optional feature_ and are **only enabled for files with the `.module.css` extension**.\nRegular `<link>` stylesheets and global CSS files are still supported.\n\nIn production, all CSS Module files will be automatically concatenated into **many minified and code-split** `.css` files.\nThese `.css` files represent hot execution paths in your application, ensuring the minimal amount of CSS is loaded for your application to paint.\n\n## Sass Support\n\nNext.js allows you to import Sass using both the `.scss` and `.sass` extensions.\nYou can use component-level Sass via CSS Modules and the `.module.scss` or `.module.sass` extension.\n\nBefore you can use Next.js' built-in Sass support, be sure to install [`sass`](https://github.com/sass/sass):\n\n```bash\nnpm install sass\n```\n\nSass support has the same benefits and restrictions as the built-in CSS support detailed above.\n\n> **Note**: Sass supports [two different syntaxes](https://sass-lang.com/documentation/syntax), each with their own extension.\n> The `.scss` extension requires you use the [SCSS syntax](https://sass-lang.com/documentation/syntax#scss),\n> while the `.sass` extension requires you use the [Indented Syntax (\"Sass\")](https://sass-lang.com/documentation/syntax#the-indented-syntax).\n>\n> If you're not sure which to choose, start with the `.scss` extension which is a superset of CSS, and doesn't require you learn the\n> Indented Syntax (\"Sass\").\n\n### Customizing Sass Options\n\nIf you want to configure the Sass compiler you can do so by using `sassOptions` in `next.config.js`.\n\nFor example to add `includePaths`:\n\n```js\nconst path = require('path')\n\nmodule.exports = {\n  sassOptions: {\n    includePaths: [path.join(__dirname, 'styles')],\n  },\n}\n```\n\n## Less and Stylus Support\n\nTo support importing `.less` or `.styl` files you can use the following plugins:\n\n- [@zeit/next-less](https://github.com/vercel/next-plugins/tree/master/packages/next-less)\n- [@zeit/next-stylus](https://github.com/vercel/next-plugins/tree/master/packages/next-stylus)\n\nIf using the less plugin, don't forget to add a dependency on less as well, otherwise you'll see an error like:\n\n```bash\nError: Cannot find module 'less'\n```\n\n## CSS-in-JS\n\n<details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-styled-jsx\">Styled JSX</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-styled-components\">Styled Components</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-emotion\">Emotion</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss-emotion\">Tailwind CSS + Emotion</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-styletron\">Styletron</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-glamor\">Glamor</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-cxs\">Cxs</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-aphrodite\">Aphrodite</a></li>\n    <li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-fela\">Fela</a></li>\n  </ul>\n</details>\n\nIt's possible to use any existing CSS-in-JS solution.\nThe simplest one is inline styles:\n\n```jsx\nfunction HiThere() {\n  return <p style={{ color: 'red' }}>hi there</p>\n}\n\nexport default HiThere\n```\n\nWe bundle [styled-jsx](https://github.com/vercel/styled-jsx) to provide support for isolated scoped CSS.\nThe aim is to support \"shadow CSS\" similar to Web Components, which unfortunately [do not support server-rendering and are JS-only](https://github.com/w3c/webcomponents/issues/71).\n\nSee the above examples for other popular CSS-in-JS solutions (like Styled Components).\n\nA component using `styled-jsx` looks like this:\n\n```jsx\nfunction HelloWorld() {\n  return (\n    <div>\n      Hello world\n      <p>scoped!</p>\n      <style jsx>{`\n        p {\n          color: blue;\n        }\n        div {\n          background: red;\n        }\n        @media (max-width: 600px) {\n          div {\n            background: blue;\n          }\n        }\n      `}</style>\n      <style global jsx>{`\n        body {\n          background: black;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default HelloWorld\n```\n\nPlease see the [styled-jsx documentation](https://github.com/vercel/styled-jsx) for more examples.\n\n## FAQ\n\n### Does it work with JavaScript disabled?\n\nYes, if you disable JavaScript the CSS will still be loaded in the production build (`next start`). During development, we require JavaScript to be enabled to provide the best developer experience with [Fast Refresh](https://nextjs.org/blog/next-9-4#fast-refresh).\n\n## Related\n\nFor more information on what to do next, we recommend the following sections:\n\n<div class=\"card\">\n  <a href=\"/docs/advanced-features/customizing-postcss-config.md\">\n    <b>Customizing PostCSS Config:</b>\n    <small>Extend the PostCSS config and plugins added by Next.js with your own.</small>\n  </a>\n</div>\n"}},"__N_SSG":true}